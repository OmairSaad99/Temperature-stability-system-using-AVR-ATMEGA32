
Temperature_Stability_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fc  00800060  000047da  0000486e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080015c  0080015c  0000496a  2**0
                  ALLOC
  3 .stab         00004c44  00000000  00000000  0000496c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018de  00000000  00000000  000095b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ae8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000afce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b13e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cd87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000dc72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ea20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000eb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ee0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f5db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 35       	cpi	r26, 0x5C	; 92
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e5       	ldi	r26, 0x5C	; 92
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <main>
      8a:	0c 94 eb 23 	jmp	0x47d6	; 0x47d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b4 23 	jmp	0x4768	; 0x4768 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e2       	ldi	r26, 0x2D	; 45
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d0 23 	jmp	0x47a0	; 0x47a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b4 23 	jmp	0x4768	; 0x4768 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e2       	ldi	r24, 0x2D	; 45
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d0 23 	jmp	0x47a0	; 0x47a0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c4 23 	jmp	0x4788	; 0x4788 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e0 23 	jmp	0x47c0	; 0x47c0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_vidInit>:
static u16* GlobalArrRes  = NULL;

static u8 index ;
static u8 ADC_u8ISRsource ;

void ADC_vidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/*VREF Choice*/
#if ADC_REF == ADC_REF_AVCC
	CLR_BIT(REFS1 , ADMUX);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(REFS0 , ADMUX);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
#if RES_ADJ == RES_ADJ_RIGHT

	CLR_BIT(ADLAR , ADMUX);
#elif RES_ADJ == RES_ADJ_LEFT

	SET_BIT(ADLAR , ADMUX);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
		}

	}
	else if (ADC_MOD == ADC_MOD_Synch)
	{
		CLR_BIT(ADATE,ADCSRA);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24
	}

	/*Select Prescaller*/
	ADCSRA&=DIVISION_FACTOR_MASK;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 7f       	andi	r24, 0xF8	; 248
     b92:	8c 93       	st	X, r24
	ADCSRA|=DIVISION_BY_128;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	87 60       	ori	r24, 0x07	; 7
     ba0:	8c 93       	st	X, r24

	/*ADC Enable*/
	SET_BIT(ADEN,ADCSRA);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24


}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8StatrtConversionSynch>:
u16 ADC_u8StatrtConversionSynch(u8 ch , u16 *Copy_ADCReading){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	8e 83       	std	Y+6, r24	; 0x06
     bcc:	78 87       	std	Y+8, r23	; 0x08
     bce:	6f 83       	std	Y+7, r22	; 0x07

	u32 Local_u32Counter = 0 ;
     bd0:	1a 82       	std	Y+2, r1	; 0x02
     bd2:	1b 82       	std	Y+3, r1	; 0x03
     bd4:	1c 82       	std	Y+4, r1	; 0x04
     bd6:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_ErrorState = OK ;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	89 83       	std	Y+1, r24	; 0x01
	if (Busy_State == IDLE)
     bdc:	80 91 35 01 	lds	r24, 0x0135
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <ADC_u8StatrtConversionSynch+0x30>
     be4:	5f c0       	rjmp	.+190    	; 0xca4 <ADC_u8StatrtConversionSynch+0xee>
	{
		Busy_State = BUSY ;
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	80 93 35 01 	sts	0x0135, r24
		/*Select ADC Channel Bit*/
		ADMUX&=ADC_Channel_Mask ;
     bec:	a7 e2       	ldi	r26, 0x27	; 39
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e7 e2       	ldi	r30, 0x27	; 39
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	80 7e       	andi	r24, 0xE0	; 224
     bf8:	8c 93       	st	X, r24
		ADMUX|=ch;
     bfa:	a7 e2       	ldi	r26, 0x27	; 39
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e7 e2       	ldi	r30, 0x27	; 39
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	90 81       	ld	r25, Z
     c04:	8e 81       	ldd	r24, Y+6	; 0x06
     c06:	89 2b       	or	r24, r25
     c08:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADSC,ADCSRA);
     c0a:	a6 e2       	ldi	r26, 0x26	; 38
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e6 e2       	ldi	r30, 0x26	; 38
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	80 64       	ori	r24, 0x40	; 64
     c16:	8c 93       	st	X, r24
     c18:	0b c0       	rjmp	.+22     	; 0xc30 <ADC_u8StatrtConversionSynch+0x7a>

		while(GET_BIT(ADIF,ADCSRA) == 0 && Local_u32Counter != ADC_TimeOut)
		{
			Local_u32Counter ++ ;
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	9b 81       	ldd	r25, Y+3	; 0x03
     c1e:	ac 81       	ldd	r26, Y+4	; 0x04
     c20:	bd 81       	ldd	r27, Y+5	; 0x05
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	a1 1d       	adc	r26, r1
     c26:	b1 1d       	adc	r27, r1
     c28:	8a 83       	std	Y+2, r24	; 0x02
     c2a:	9b 83       	std	Y+3, r25	; 0x03
     c2c:	ac 83       	std	Y+4, r26	; 0x04
     c2e:	bd 83       	std	Y+5, r27	; 0x05
		ADMUX|=ch;

		/*Start Conversion*/
		SET_BIT(ADSC,ADCSRA);

		while(GET_BIT(ADIF,ADCSRA) == 0 && Local_u32Counter != ADC_TimeOut)
     c30:	e6 e2       	ldi	r30, 0x26	; 38
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	82 95       	swap	r24
     c38:	8f 70       	andi	r24, 0x0F	; 15
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	81 70       	andi	r24, 0x01	; 1
     c40:	90 70       	andi	r25, 0x00	; 0
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	61 f4       	brne	.+24     	; 0xc5e <ADC_u8StatrtConversionSynch+0xa8>
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	9b 81       	ldd	r25, Y+3	; 0x03
     c4a:	ac 81       	ldd	r26, Y+4	; 0x04
     c4c:	bd 81       	ldd	r27, Y+5	; 0x05
     c4e:	80 35       	cpi	r24, 0x50	; 80
     c50:	23 ec       	ldi	r18, 0xC3	; 195
     c52:	92 07       	cpc	r25, r18
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	a2 07       	cpc	r26, r18
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	b2 07       	cpc	r27, r18
     c5c:	f1 f6       	brne	.-68     	; 0xc1a <ADC_u8StatrtConversionSynch+0x64>
		{
			Local_u32Counter ++ ;
		}

		if (Local_u32Counter == ADC_TimeOut)
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	9b 81       	ldd	r25, Y+3	; 0x03
     c62:	ac 81       	ldd	r26, Y+4	; 0x04
     c64:	bd 81       	ldd	r27, Y+5	; 0x05
     c66:	80 35       	cpi	r24, 0x50	; 80
     c68:	23 ec       	ldi	r18, 0xC3	; 195
     c6a:	92 07       	cpc	r25, r18
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	a2 07       	cpc	r26, r18
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	b2 07       	cpc	r27, r18
     c74:	19 f4       	brne	.+6      	; 0xc7c <ADC_u8StatrtConversionSynch+0xc6>
		{
			Local_ErrorState = NOK;
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	89 83       	std	Y+1, r24	; 0x01
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <ADC_u8StatrtConversionSynch+0xd4>
		}
		else
		{
			/*Clear ADC Conversion flag*/
			SET_BIT(ADIF,ADCSRA);
     c7c:	a6 e2       	ldi	r26, 0x26	; 38
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e6 e2       	ldi	r30, 0x26	; 38
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	80 61       	ori	r24, 0x10	; 16
     c88:	8c 93       	st	X, r24
#if RES_ADJ == RES_ADJ_RIGHT
		*Copy_ADCReading = ADC ;
		Busy_State = IDLE ;

#elif RES_ADJ == RES_ADJ_LEFT
		*Copy_ADCReading = ADCH ;
     c8a:	e5 e2       	ldi	r30, 0x25	; 37
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	88 2f       	mov	r24, r24
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	ef 81       	ldd	r30, Y+7	; 0x07
     c96:	f8 85       	ldd	r31, Y+8	; 0x08
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
		Busy_State = IDLE ;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 35 01 	sts	0x0135, r24
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <ADC_u8StatrtConversionSynch+0xf2>
#endif
	}
	else
	{
		Local_ErrorState = BUSY_FUNC ;
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState ;
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	88 2f       	mov	r24, r24
     cac:	90 e0       	ldi	r25, 0x00	; 0
}
     cae:	28 96       	adiw	r28, 0x08	; 8
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <ADC_u8StatrtConversionAsynch>:


u16 ADC_u8StatrtConversionAsynch(u8 ch , u16 *Copy_ADCReading ,void(*Copy_pvNotificatinFunc)(void))
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <ADC_u8StatrtConversionAsynch+0x6>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <ADC_u8StatrtConversionAsynch+0x8>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <ADC_u8StatrtConversionAsynch+0xa>
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	8a 83       	std	Y+2, r24	; 0x02
     cd0:	7c 83       	std	Y+4, r23	; 0x04
     cd2:	6b 83       	std	Y+3, r22	; 0x03
     cd4:	5e 83       	std	Y+6, r21	; 0x06
     cd6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_ErrorState = OK;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	89 83       	std	Y+1, r24	; 0x01
	if(Busy_State == IDLE)
     cdc:	80 91 35 01 	lds	r24, 0x0135
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	d1 f5       	brne	.+116    	; 0xd58 <ADC_u8StatrtConversionAsynch+0x98>
	{
		if (Copy_ADCReading == NULL || Copy_pvNotificatinFunc == NULL)
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	21 f0       	breq	.+8      	; 0xcf4 <ADC_u8StatrtConversionAsynch+0x34>
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <ADC_u8StatrtConversionAsynch+0x38>
		{
			Local_ErrorState = NULL;
     cf4:	19 82       	std	Y+1, r1	; 0x01
     cf6:	32 c0       	rjmp	.+100    	; 0xd5c <ADC_u8StatrtConversionAsynch+0x9c>
		}
		else
		{
			Busy_State = BUSY;
     cf8:	82 e0       	ldi	r24, 0x02	; 2
     cfa:	80 93 35 01 	sts	0x0135, r24

			ADC_u8Reading = Copy_ADCReading;
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	90 93 5d 01 	sts	0x015D, r25
     d06:	80 93 5c 01 	sts	0x015C, r24

			GlobalCallBackFun = Copy_pvNotificatinFunc;
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	9e 81       	ldd	r25, Y+6	; 0x06
     d0e:	90 93 5f 01 	sts	0x015F, r25
     d12:	80 93 5e 01 	sts	0x015E, r24

			ADC_u8ISRsource = Single_Async_Conversion;
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	80 93 68 01 	sts	0x0168, r24

			/*Select ADC Channel Bit*/
			ADMUX&=ADC_Channel_Mask ;
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 7e       	andi	r24, 0xE0	; 224
     d28:	8c 93       	st	X, r24
			ADMUX|=ch;
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	90 81       	ld	r25, Z
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	89 2b       	or	r24, r25
     d38:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSC,ADCSRA);
     d3a:	a6 e2       	ldi	r26, 0x26	; 38
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 e2       	ldi	r30, 0x26	; 38
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	8c 93       	st	X, r24


			/*Enable ADC Interrupt*/
			SET_BIT(ADIE,ADCSRA);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 60       	ori	r24, 0x08	; 8
     d54:	8c 93       	st	X, r24
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <ADC_u8StatrtConversionAsynch+0x9c>
		}
	}

	else
	{
		Local_ErrorState = BUSY_FUNC;
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0

}
     d62:	26 96       	adiw	r28, 0x06	; 6
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <ADC_u8StatrtConversionChainAsynch>:



u16 ADC_u8StatrtConversionChainAsynch(Chain_t *chain)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <ADC_u8StatrtConversionChainAsynch+0x6>
     d7a:	0f 92       	push	r0
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	9b 83       	std	Y+3, r25	; 0x03
     d82:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState = OK;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	89 83       	std	Y+1, r24	; 0x01

	if (chain == NULL)
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	9b 81       	ldd	r25, Y+3	; 0x03
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	11 f4       	brne	.+4      	; 0xd94 <ADC_u8StatrtConversionChainAsynch+0x20>
	{
		Local_ErrorState = NULL;
     d90:	19 82       	std	Y+1, r1	; 0x01
     d92:	55 c0       	rjmp	.+170    	; 0xe3e <ADC_u8StatrtConversionChainAsynch+0xca>
	}
	else
	{
		if (Busy_State == IDLE)
     d94:	80 91 35 01 	lds	r24, 0x0135
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	09 f0       	breq	.+2      	; 0xd9e <ADC_u8StatrtConversionChainAsynch+0x2a>
     d9c:	4e c0       	rjmp	.+156    	; 0xe3a <ADC_u8StatrtConversionChainAsynch+0xc6>
		{
			Busy_State = BUSY;
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	80 93 35 01 	sts	0x0135, r24

			ADC_u8ISRsource = Chain_Conversion ;
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	80 93 68 01 	sts	0x0168, r24

			GlobalarrChainchannel = chain->arrChainChannel;
     daa:	ea 81       	ldd	r30, Y+2	; 0x02
     dac:	fb 81       	ldd	r31, Y+3	; 0x03
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	90 93 61 01 	sts	0x0161, r25
     db6:	80 93 60 01 	sts	0x0160, r24
			GlobalSize = chain->size;
     dba:	ea 81       	ldd	r30, Y+2	; 0x02
     dbc:	fb 81       	ldd	r31, Y+3	; 0x03
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	80 93 66 01 	sts	0x0166, r24
			GlobalNotificationFun = chain->PtrNotification;
     dc4:	ea 81       	ldd	r30, Y+2	; 0x02
     dc6:	fb 81       	ldd	r31, Y+3	; 0x03
     dc8:	83 81       	ldd	r24, Z+3	; 0x03
     dca:	94 81       	ldd	r25, Z+4	; 0x04
     dcc:	90 93 63 01 	sts	0x0163, r25
     dd0:	80 93 62 01 	sts	0x0162, r24
			GlobalArrRes = chain->ArrChainResult;
     dd4:	ea 81       	ldd	r30, Y+2	; 0x02
     dd6:	fb 81       	ldd	r31, Y+3	; 0x03
     dd8:	85 81       	ldd	r24, Z+5	; 0x05
     dda:	96 81       	ldd	r25, Z+6	; 0x06
     ddc:	90 93 65 01 	sts	0x0165, r25
     de0:	80 93 64 01 	sts	0x0164, r24

			index = 0 ;
     de4:	10 92 67 01 	sts	0x0167, r1

			/*Select ADC Channel Bit*/
			ADMUX&=ADC_Channel_Mask ;
     de8:	a7 e2       	ldi	r26, 0x27	; 39
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e2       	ldi	r30, 0x27	; 39
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	80 7e       	andi	r24, 0xE0	; 224
     df4:	8c 93       	st	X, r24
			ADMUX|=GlobalarrChainchannel[index];
     df6:	a7 e2       	ldi	r26, 0x27	; 39
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e7 e2       	ldi	r30, 0x27	; 39
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	40 81       	ld	r20, Z
     e00:	20 91 60 01 	lds	r18, 0x0160
     e04:	30 91 61 01 	lds	r19, 0x0161
     e08:	80 91 67 01 	lds	r24, 0x0167
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	f9 01       	movw	r30, r18
     e12:	e8 0f       	add	r30, r24
     e14:	f9 1f       	adc	r31, r25
     e16:	80 81       	ld	r24, Z
     e18:	84 2b       	or	r24, r20
     e1a:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSC,ADCSRA);
     e1c:	a6 e2       	ldi	r26, 0x26	; 38
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e6 e2       	ldi	r30, 0x26	; 38
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 64       	ori	r24, 0x40	; 64
     e28:	8c 93       	st	X, r24


			/*Enable ADC Interrupt*/
			SET_BIT(ADIE,ADCSRA);
     e2a:	a6 e2       	ldi	r26, 0x26	; 38
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e6 e2       	ldi	r30, 0x26	; 38
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	88 60       	ori	r24, 0x08	; 8
     e36:	8c 93       	st	X, r24
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <ADC_u8StatrtConversionChainAsynch+0xca>
		}
		else
		{
			Local_ErrorState = BUSY_FUNC;
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return Local_ErrorState;
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
}
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <ADC_u8StatrtConversionChainSynch>:

u16 ADC_u8StatrtConversionChainSynch(Chain_Sync *chain)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	27 97       	sbiw	r28, 0x07	; 7
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	9f 83       	std	Y+7, r25	; 0x07
     e66:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_ErrorState = OK ;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Counter = 0 ;
     e6c:	19 82       	std	Y+1, r1	; 0x01
     e6e:	1a 82       	std	Y+2, r1	; 0x02
     e70:	1b 82       	std	Y+3, r1	; 0x03
     e72:	1c 82       	std	Y+4, r1	; 0x04

	if (chain == NULL)
     e74:	8e 81       	ldd	r24, Y+6	; 0x06
     e76:	9f 81       	ldd	r25, Y+7	; 0x07
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	19 f4       	brne	.+6      	; 0xe82 <ADC_u8StatrtConversionChainSynch+0x32>
	{
		Local_ErrorState = NOK ;
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	8d 83       	std	Y+5, r24	; 0x05
     e80:	8d c0       	rjmp	.+282    	; 0xf9c <ADC_u8StatrtConversionChainSynch+0x14c>
	}
	else
	{
		if(Busy_State == IDLE)
     e82:	80 91 35 01 	lds	r24, 0x0135
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	09 f0       	breq	.+2      	; 0xe8c <ADC_u8StatrtConversionChainSynch+0x3c>
     e8a:	86 c0       	rjmp	.+268    	; 0xf98 <ADC_u8StatrtConversionChainSynch+0x148>
		{
			Busy_State = BUSY ;
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	80 93 35 01 	sts	0x0135, r24

			index = 0 ;
     e92:	10 92 67 01 	sts	0x0167, r1
     e96:	74 c0       	rjmp	.+232    	; 0xf80 <ADC_u8StatrtConversionChainSynch+0x130>

			while (index < chain->size)
			{
				/*Select ADC Channel Pin*/
				ADMUX &=ADC_Channel_Mask ;
     e98:	a7 e2       	ldi	r26, 0x27	; 39
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e7 e2       	ldi	r30, 0x27	; 39
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 7e       	andi	r24, 0xE0	; 224
     ea4:	8c 93       	st	X, r24
				ADMUX|= chain->ArrChainChannel[index] ;
     ea6:	a7 e2       	ldi	r26, 0x27	; 39
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e7 e2       	ldi	r30, 0x27	; 39
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	40 81       	ld	r20, Z
     eb0:	ee 81       	ldd	r30, Y+6	; 0x06
     eb2:	ff 81       	ldd	r31, Y+7	; 0x07
     eb4:	20 81       	ld	r18, Z
     eb6:	31 81       	ldd	r19, Z+1	; 0x01
     eb8:	80 91 67 01 	lds	r24, 0x0167
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	f9 01       	movw	r30, r18
     ec2:	e8 0f       	add	r30, r24
     ec4:	f9 1f       	adc	r31, r25
     ec6:	80 81       	ld	r24, Z
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24

				/*Start Conversion*/
				SET_BIT(ADSC,ADCSRA);
     ecc:	a6 e2       	ldi	r26, 0x26	; 38
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e6 e2       	ldi	r30, 0x26	; 38
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	80 64       	ori	r24, 0x40	; 64
     ed8:	8c 93       	st	X, r24
     eda:	0b c0       	rjmp	.+22     	; 0xef2 <ADC_u8StatrtConversionChainSynch+0xa2>

				/*Waiting for ADC Conversion Complete Flag To Set*/
				while(GET_BIT(ADIF , ADCSRA) == 0 && Local_u32Counter != ADC_TimeOut)
				{
					Local_u32Counter ++ ;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	ab 81       	ldd	r26, Y+3	; 0x03
     ee2:	bc 81       	ldd	r27, Y+4	; 0x04
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	a1 1d       	adc	r26, r1
     ee8:	b1 1d       	adc	r27, r1
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	ab 83       	std	Y+3, r26	; 0x03
     ef0:	bc 83       	std	Y+4, r27	; 0x04

				/*Start Conversion*/
				SET_BIT(ADSC,ADCSRA);

				/*Waiting for ADC Conversion Complete Flag To Set*/
				while(GET_BIT(ADIF , ADCSRA) == 0 && Local_u32Counter != ADC_TimeOut)
     ef2:	e6 e2       	ldi	r30, 0x26	; 38
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	82 95       	swap	r24
     efa:	8f 70       	andi	r24, 0x0F	; 15
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	81 70       	andi	r24, 0x01	; 1
     f02:	90 70       	andi	r25, 0x00	; 0
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	61 f4       	brne	.+24     	; 0xf20 <ADC_u8StatrtConversionChainSynch+0xd0>
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	ab 81       	ldd	r26, Y+3	; 0x03
     f0e:	bc 81       	ldd	r27, Y+4	; 0x04
     f10:	80 35       	cpi	r24, 0x50	; 80
     f12:	23 ec       	ldi	r18, 0xC3	; 195
     f14:	92 07       	cpc	r25, r18
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	a2 07       	cpc	r26, r18
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	b2 07       	cpc	r27, r18
     f1e:	f1 f6       	brne	.-68     	; 0xedc <ADC_u8StatrtConversionChainSynch+0x8c>
				{
					Local_u32Counter ++ ;
				}

				if (Local_u32Counter == ADC_TimeOut)
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	ab 81       	ldd	r26, Y+3	; 0x03
     f26:	bc 81       	ldd	r27, Y+4	; 0x04
     f28:	80 35       	cpi	r24, 0x50	; 80
     f2a:	23 ec       	ldi	r18, 0xC3	; 195
     f2c:	92 07       	cpc	r25, r18
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	a2 07       	cpc	r26, r18
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	b2 07       	cpc	r27, r18
     f36:	19 f4       	brne	.+6      	; 0xf3e <ADC_u8StatrtConversionChainSynch+0xee>
				{
					Local_ErrorState = NOK ;
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	8d 83       	std	Y+5, r24	; 0x05
     f3c:	21 c0       	rjmp	.+66     	; 0xf80 <ADC_u8StatrtConversionChainSynch+0x130>
				}
				else
				{
					/*Clear ADC Conversion Complete Flag*/
					SET_BIT(ADIF,ADCSRA);
     f3e:	a6 e2       	ldi	r26, 0x26	; 38
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e6 e2       	ldi	r30, 0x26	; 38
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 61       	ori	r24, 0x10	; 16
     f4a:	8c 93       	st	X, r24

					/*ADC Conversion Result*/
					if(RES_ADJ == RES_ADJ_LEFT)
					{
						chain->arrChainResult[index] = ADCH ;
     f4c:	ee 81       	ldd	r30, Y+6	; 0x06
     f4e:	ff 81       	ldd	r31, Y+7	; 0x07
     f50:	23 81       	ldd	r18, Z+3	; 0x03
     f52:	34 81       	ldd	r19, Z+4	; 0x04
     f54:	80 91 67 01 	lds	r24, 0x0167
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	d9 01       	movw	r26, r18
     f62:	a8 0f       	add	r26, r24
     f64:	b9 1f       	adc	r27, r25
     f66:	e5 e2       	ldi	r30, 0x25	; 37
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	11 96       	adiw	r26, 0x01	; 1
     f72:	9c 93       	st	X, r25
     f74:	8e 93       	st	-X, r24
					{
						chain->arrChainResult[index] = ADC ;
					}

					/*Increment ADC Channel Index*/
					index ++ ;
     f76:	80 91 67 01 	lds	r24, 0x0167
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	80 93 67 01 	sts	0x0167, r24
		{
			Busy_State = BUSY ;

			index = 0 ;

			while (index < chain->size)
     f80:	ee 81       	ldd	r30, Y+6	; 0x06
     f82:	ff 81       	ldd	r31, Y+7	; 0x07
     f84:	92 81       	ldd	r25, Z+2	; 0x02
     f86:	80 91 67 01 	lds	r24, 0x0167
     f8a:	89 17       	cp	r24, r25
     f8c:	08 f4       	brcc	.+2      	; 0xf90 <ADC_u8StatrtConversionChainSynch+0x140>
     f8e:	84 cf       	rjmp	.-248    	; 0xe98 <ADC_u8StatrtConversionChainSynch+0x48>

					/*Increment ADC Channel Index*/
					index ++ ;
				}
			}
			Busy_State = IDLE ;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	80 93 35 01 	sts	0x0135, r24
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <ADC_u8StatrtConversionChainSynch+0x14c>
		}
		else
		{
			Local_ErrorState = BUSY_FUNC ;
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	8d 83       	std	Y+5, r24	; 0x05
		}
	}

	return Local_ErrorState ;
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
}
     fa2:	27 96       	adiw	r28, 0x07	; 7
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	4f 93       	push	r20
     fc4:	5f 93       	push	r21
     fc6:	6f 93       	push	r22
     fc8:	7f 93       	push	r23
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	af 93       	push	r26
     fd0:	bf 93       	push	r27
     fd2:	ef 93       	push	r30
     fd4:	ff 93       	push	r31
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
	if (ADC_u8ISRsource == Single_Async_Conversion)
     fde:	80 91 68 01 	lds	r24, 0x0168
     fe2:	83 30       	cpi	r24, 0x03	; 3
     fe4:	d9 f4       	brne	.+54     	; 0x101c <__vector_16+0x68>
	{
		Busy_State = IDLE;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	80 93 35 01 	sts	0x0135, r24
		{
			*ADC_u8Reading = ADC ;
		}
		else if (RES_ADJ == RES_ADJ_LEFT)
		{
			*ADC_u8Reading = ADCH ;
     fec:	a0 91 5c 01 	lds	r26, 0x015C
     ff0:	b0 91 5d 01 	lds	r27, 0x015D
     ff4:	e5 e2       	ldi	r30, 0x25	; 37
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	8d 93       	st	X+, r24
    1000:	9c 93       	st	X, r25
		}

		/*Calling Notification Function*/
		GlobalCallBackFun();
    1002:	e0 91 5e 01 	lds	r30, 0x015E
    1006:	f0 91 5f 01 	lds	r31, 0x015F
    100a:	09 95       	icall

		/*Disable Interrupt*/
		CLR_BIT(ADIE,ADCSRA);
    100c:	a6 e2       	ldi	r26, 0x26	; 38
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e6 e2       	ldi	r30, 0x26	; 38
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	87 7f       	andi	r24, 0xF7	; 247
    1018:	8c 93       	st	X, r24
    101a:	56 c0       	rjmp	.+172    	; 0x10c8 <__vector_16+0x114>
	}
	else if (ADC_u8ISRsource == Chain_Conversion)
    101c:	80 91 68 01 	lds	r24, 0x0168
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	09 f0       	breq	.+2      	; 0x1026 <__vector_16+0x72>
    1024:	51 c0       	rjmp	.+162    	; 0x10c8 <__vector_16+0x114>
		{
			GlobalArrRes[index] = ADC ;
		}
		else if (RES_ADJ == RES_ADJ_LEFT)
		{
			GlobalArrRes[index] = ADCH ;
    1026:	20 91 64 01 	lds	r18, 0x0164
    102a:	30 91 65 01 	lds	r19, 0x0165
    102e:	80 91 67 01 	lds	r24, 0x0167
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	d9 01       	movw	r26, r18
    103c:	a8 0f       	add	r26, r24
    103e:	b9 1f       	adc	r27, r25
    1040:	e5 e2       	ldi	r30, 0x25	; 37
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	11 96       	adiw	r26, 0x01	; 1
    104c:	9c 93       	st	X, r25
    104e:	8e 93       	st	-X, r24
		}

		/*Increament Index*/
		index ++;
    1050:	80 91 67 01 	lds	r24, 0x0167
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	80 93 67 01 	sts	0x0167, r24

		if (index == GlobalSize)
    105a:	90 91 67 01 	lds	r25, 0x0167
    105e:	80 91 66 01 	lds	r24, 0x0166
    1062:	98 17       	cp	r25, r24
    1064:	81 f4       	brne	.+32     	; 0x1086 <__vector_16+0xd2>
		{
			/*Makes Conversion Idle*/
			Busy_State = IDLE ;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	80 93 35 01 	sts	0x0135, r24


			/*calling Notification Function*/
			GlobalNotificationFun();
    106c:	e0 91 62 01 	lds	r30, 0x0162
    1070:	f0 91 63 01 	lds	r31, 0x0163
    1074:	09 95       	icall

			/*Disable Interrupt*/
			CLR_BIT(ADIE,ADCSRA);
    1076:	a6 e2       	ldi	r26, 0x26	; 38
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e6 e2       	ldi	r30, 0x26	; 38
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	87 7f       	andi	r24, 0xF7	; 247
    1082:	8c 93       	st	X, r24
    1084:	21 c0       	rjmp	.+66     	; 0x10c8 <__vector_16+0x114>

		}
		else
		{
			/*Select ADC Channel Bit*/
			ADMUX&=ADC_Channel_Mask ;
    1086:	a7 e2       	ldi	r26, 0x27	; 39
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e7 e2       	ldi	r30, 0x27	; 39
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	80 7e       	andi	r24, 0xE0	; 224
    1092:	8c 93       	st	X, r24
			ADMUX|=GlobalarrChainchannel[index];
    1094:	a7 e2       	ldi	r26, 0x27	; 39
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e7 e2       	ldi	r30, 0x27	; 39
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	40 81       	ld	r20, Z
    109e:	20 91 60 01 	lds	r18, 0x0160
    10a2:	30 91 61 01 	lds	r19, 0x0161
    10a6:	80 91 67 01 	lds	r24, 0x0167
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	f9 01       	movw	r30, r18
    10b0:	e8 0f       	add	r30, r24
    10b2:	f9 1f       	adc	r31, r25
    10b4:	80 81       	ld	r24, Z
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24

			/*Start ADC Conversion Complete*/
			SET_BIT(ADSC,ADCSRA);
    10ba:	a6 e2       	ldi	r26, 0x26	; 38
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e6 e2       	ldi	r30, 0x26	; 38
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	80 64       	ori	r24, 0x40	; 64
    10c6:	8c 93       	st	X, r24

		}
	}
}
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	ff 91       	pop	r31
    10ce:	ef 91       	pop	r30
    10d0:	bf 91       	pop	r27
    10d2:	af 91       	pop	r26
    10d4:	9f 91       	pop	r25
    10d6:	8f 91       	pop	r24
    10d8:	7f 91       	pop	r23
    10da:	6f 91       	pop	r22
    10dc:	5f 91       	pop	r21
    10de:	4f 91       	pop	r20
    10e0:	3f 91       	pop	r19
    10e2:	2f 91       	pop	r18
    10e4:	0f 90       	pop	r0
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti

000010ee <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	2f 97       	sbiw	r28, 0x0f	; 15
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to low for command*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_LOW);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	65 e0       	ldi	r22, 0x05	; 5
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>

	/*Set RW pin to low for write*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	66 e0       	ldi	r22, 0x06	; 6
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>

	/*Set command to data pins*/
	DIO_vidSetPortVal(CLCD_DATA_PORT,Copy_u8Command);
    1118:	83 e0       	ldi	r24, 0x03	; 3
    111a:	6f 85       	ldd	r22, Y+15	; 0x0f
    111c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_vidSetPortVal>

	/*Send enable pulse*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	67 e0       	ldi	r22, 0x07	; 7
    1124:	41 e0       	ldi	r20, 0x01	; 1
    1126:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	b0 e4       	ldi	r27, 0x40	; 64
    1132:	8b 87       	std	Y+11, r24	; 0x0b
    1134:	9c 87       	std	Y+12, r25	; 0x0c
    1136:	ad 87       	std	Y+13, r26	; 0x0d
    1138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113a:	6b 85       	ldd	r22, Y+11	; 0x0b
    113c:	7c 85       	ldd	r23, Y+12	; 0x0c
    113e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1140:	9e 85       	ldd	r25, Y+14	; 0x0e
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	4a ef       	ldi	r20, 0xFA	; 250
    1148:	54 e4       	ldi	r21, 0x44	; 68
    114a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	8f 83       	std	Y+7, r24	; 0x07
    1154:	98 87       	std	Y+8, r25	; 0x08
    1156:	a9 87       	std	Y+9, r26	; 0x09
    1158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e8       	ldi	r20, 0x80	; 128
    1168:	5f e3       	ldi	r21, 0x3F	; 63
    116a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    116e:	88 23       	and	r24, r24
    1170:	2c f4       	brge	.+10     	; 0x117c <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	3f c0       	rjmp	.+126    	; 0x11fa <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    117c:	6f 81       	ldd	r22, Y+7	; 0x07
    117e:	78 85       	ldd	r23, Y+8	; 0x08
    1180:	89 85       	ldd	r24, Y+9	; 0x09
    1182:	9a 85       	ldd	r25, Y+10	; 0x0a
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	3f ef       	ldi	r19, 0xFF	; 255
    1188:	4f e7       	ldi	r20, 0x7F	; 127
    118a:	57 e4       	ldi	r21, 0x47	; 71
    118c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1190:	18 16       	cp	r1, r24
    1192:	4c f5       	brge	.+82     	; 0x11e6 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1194:	6b 85       	ldd	r22, Y+11	; 0x0b
    1196:	7c 85       	ldd	r23, Y+12	; 0x0c
    1198:	8d 85       	ldd	r24, Y+13	; 0x0d
    119a:	9e 85       	ldd	r25, Y+14	; 0x0e
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e2       	ldi	r20, 0x20	; 32
    11a2:	51 e4       	ldi	r21, 0x41	; 65
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	9e 83       	std	Y+6, r25	; 0x06
    11ba:	8d 83       	std	Y+5, r24	; 0x05
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <CLCD_voidSendCommand+0xee>
    11be:	88 ec       	ldi	r24, 0xC8	; 200
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	9c 83       	std	Y+4, r25	; 0x04
    11c4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <CLCD_voidSendCommand+0xdc>
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	69 f7       	brne	.-38     	; 0x11be <CLCD_voidSendCommand+0xd0>
    11e4:	14 c0       	rjmp	.+40     	; 0x120e <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e6:	6f 81       	ldd	r22, Y+7	; 0x07
    11e8:	78 85       	ldd	r23, Y+8	; 0x08
    11ea:	89 85       	ldd	r24, Y+9	; 0x09
    11ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <CLCD_voidSendCommand+0x118>
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	67 e0       	ldi	r22, 0x07	; 7
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
}
    1218:	2f 96       	adiw	r28, 0x0f	; 15
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	2f 97       	sbiw	r28, 0x0f	; 15
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to high for data*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_HIGH);
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	65 e0       	ldi	r22, 0x05	; 5
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>

	/*Set RW pin to low for write*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	66 e0       	ldi	r22, 0x06	; 6
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>

	/*Set Data to data pins*/
	DIO_vidSetPortVal(CLCD_DATA_PORT,Copy_u8Data);
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	6f 85       	ldd	r22, Y+15	; 0x0f
    1258:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_vidSetPortVal>

	/*Send enable pulse*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	67 e0       	ldi	r22, 0x07	; 7
    1260:	41 e0       	ldi	r20, 0x01	; 1
    1262:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a0 e0       	ldi	r26, 0x00	; 0
    126c:	b0 e4       	ldi	r27, 0x40	; 64
    126e:	8b 87       	std	Y+11, r24	; 0x0b
    1270:	9c 87       	std	Y+12, r25	; 0x0c
    1272:	ad 87       	std	Y+13, r26	; 0x0d
    1274:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1276:	6b 85       	ldd	r22, Y+11	; 0x0b
    1278:	7c 85       	ldd	r23, Y+12	; 0x0c
    127a:	8d 85       	ldd	r24, Y+13	; 0x0d
    127c:	9e 85       	ldd	r25, Y+14	; 0x0e
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	4a ef       	ldi	r20, 0xFA	; 250
    1284:	54 e4       	ldi	r21, 0x44	; 68
    1286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	8f 83       	std	Y+7, r24	; 0x07
    1290:	98 87       	std	Y+8, r25	; 0x08
    1292:	a9 87       	std	Y+9, r26	; 0x09
    1294:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1296:	6f 81       	ldd	r22, Y+7	; 0x07
    1298:	78 85       	ldd	r23, Y+8	; 0x08
    129a:	89 85       	ldd	r24, Y+9	; 0x09
    129c:	9a 85       	ldd	r25, Y+10	; 0x0a
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e8       	ldi	r20, 0x80	; 128
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12aa:	88 23       	and	r24, r24
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	3f c0       	rjmp	.+126    	; 0x1336 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	3f ef       	ldi	r19, 0xFF	; 255
    12c4:	4f e7       	ldi	r20, 0x7F	; 127
    12c6:	57 e4       	ldi	r21, 0x47	; 71
    12c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12cc:	18 16       	cp	r1, r24
    12ce:	4c f5       	brge	.+82     	; 0x1322 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e2       	ldi	r20, 0x20	; 32
    12de:	51 e4       	ldi	r21, 0x41	; 65
    12e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9e 83       	std	Y+6, r25	; 0x06
    12f6:	8d 83       	std	Y+5, r24	; 0x05
    12f8:	0f c0       	rjmp	.+30     	; 0x1318 <CLCD_voidSendData+0xee>
    12fa:	88 ec       	ldi	r24, 0xC8	; 200
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9c 83       	std	Y+4, r25	; 0x04
    1300:	8b 83       	std	Y+3, r24	; 0x03
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <CLCD_voidSendData+0xdc>
    130a:	9c 83       	std	Y+4, r25	; 0x04
    130c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	69 f7       	brne	.-38     	; 0x12fa <CLCD_voidSendData+0xd0>
    1320:	14 c0       	rjmp	.+40     	; 0x134a <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1322:	6f 81       	ldd	r22, Y+7	; 0x07
    1324:	78 85       	ldd	r23, Y+8	; 0x08
    1326:	89 85       	ldd	r24, Y+9	; 0x09
    1328:	9a 85       	ldd	r25, Y+10	; 0x0a
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	9e 83       	std	Y+6, r25	; 0x06
    1334:	8d 83       	std	Y+5, r24	; 0x05
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	9a 81       	ldd	r25, Y+2	; 0x02
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <CLCD_voidSendData+0x118>
    1346:	9a 83       	std	Y+2, r25	; 0x02
    1348:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	67 e0       	ldi	r22, 0x07	; 7
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
}
    1354:	2f 96       	adiw	r28, 0x0f	; 15
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	2e 97       	sbiw	r28, 0x0e	; 14
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a0 e2       	ldi	r26, 0x20	; 32
    1380:	b2 e4       	ldi	r27, 0x42	; 66
    1382:	8b 87       	std	Y+11, r24	; 0x0b
    1384:	9c 87       	std	Y+12, r25	; 0x0c
    1386:	ad 87       	std	Y+13, r26	; 0x0d
    1388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138a:	6b 85       	ldd	r22, Y+11	; 0x0b
    138c:	7c 85       	ldd	r23, Y+12	; 0x0c
    138e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1390:	9e 85       	ldd	r25, Y+14	; 0x0e
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	4a ef       	ldi	r20, 0xFA	; 250
    1398:	54 e4       	ldi	r21, 0x44	; 68
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	8f 83       	std	Y+7, r24	; 0x07
    13a4:	98 87       	std	Y+8, r25	; 0x08
    13a6:	a9 87       	std	Y+9, r26	; 0x09
    13a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13aa:	6f 81       	ldd	r22, Y+7	; 0x07
    13ac:	78 85       	ldd	r23, Y+8	; 0x08
    13ae:	89 85       	ldd	r24, Y+9	; 0x09
    13b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e8       	ldi	r20, 0x80	; 128
    13b8:	5f e3       	ldi	r21, 0x3F	; 63
    13ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13be:	88 23       	and	r24, r24
    13c0:	2c f4       	brge	.+10     	; 0x13cc <CLCD_voidInit+0x66>
		__ticks = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9e 83       	std	Y+6, r25	; 0x06
    13c8:	8d 83       	std	Y+5, r24	; 0x05
    13ca:	3f c0       	rjmp	.+126    	; 0x144a <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    13cc:	6f 81       	ldd	r22, Y+7	; 0x07
    13ce:	78 85       	ldd	r23, Y+8	; 0x08
    13d0:	89 85       	ldd	r24, Y+9	; 0x09
    13d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	3f ef       	ldi	r19, 0xFF	; 255
    13d8:	4f e7       	ldi	r20, 0x7F	; 127
    13da:	57 e4       	ldi	r21, 0x47	; 71
    13dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e0:	18 16       	cp	r1, r24
    13e2:	4c f5       	brge	.+82     	; 0x1436 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e2       	ldi	r20, 0x20	; 32
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9e 83       	std	Y+6, r25	; 0x06
    140a:	8d 83       	std	Y+5, r24	; 0x05
    140c:	0f c0       	rjmp	.+30     	; 0x142c <CLCD_voidInit+0xc6>
    140e:	88 ec       	ldi	r24, 0xC8	; 200
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9c 83       	std	Y+4, r25	; 0x04
    1414:	8b 83       	std	Y+3, r24	; 0x03
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <CLCD_voidInit+0xb4>
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	69 f7       	brne	.-38     	; 0x140e <CLCD_voidInit+0xa8>
    1434:	14 c0       	rjmp	.+40     	; 0x145e <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <CLCD_voidInit+0xf0>
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: 2 lines, 5*8 Font size*/
	CLCD_voidSendCommand(0b00111000);
    145e:	88 e3       	ldi	r24, 0x38	; 56
    1460:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>

	/*Display on off control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    1464:	8c e0       	ldi	r24, 0x0C	; 12
    1466:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>

	/*Clear display*/
	CLCD_voidSendCommand(1);
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
}
    1470:	2e 96       	adiw	r28, 0x0e	; 14
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <CLCD_vidSendString>:

void CLCD_vidSendString(const char *Copy_u8String)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <CLCD_vidSendString+0x6>
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	9b 83       	std	Y+3, r25	; 0x03
    1490:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator = 0 ;
    1492:	19 82       	std	Y+1, r1	; 0x01
    1494:	0e c0       	rjmp	.+28     	; 0x14b2 <CLCD_vidSendString+0x30>
	while(Copy_u8String[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_u8String[Local_u8Iterator]) ;
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	fc 01       	movw	r30, r24
    14a2:	e2 0f       	add	r30, r18
    14a4:	f3 1f       	adc	r31, r19
    14a6:	80 81       	ld	r24, Z
    14a8:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
		Local_u8Iterator ++ ;
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	8f 5f       	subi	r24, 0xFF	; 255
    14b0:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_vidSendString(const char *Copy_u8String)
{
	u8 Local_u8Iterator = 0 ;
	while(Copy_u8String[Local_u8Iterator] != '\0')
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	9b 81       	ldd	r25, Y+3	; 0x03
    14bc:	fc 01       	movw	r30, r24
    14be:	e2 0f       	add	r30, r18
    14c0:	f3 1f       	adc	r31, r19
    14c2:	80 81       	ld	r24, Z
    14c4:	88 23       	and	r24, r24
    14c6:	39 f7       	brne	.-50     	; 0x1496 <CLCD_vidSendString+0x14>
	{
		CLCD_voidSendData(Copy_u8String[Local_u8Iterator]) ;
		Local_u8Iterator ++ ;
	}
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <CLCD_GoToXY>:

void CLCD_GoToXY(u8 xPos , u8 yPos)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <CLCD_GoToXY+0x6>
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAMaddress = 0 ;
    14e4:	19 82       	std	Y+1, r1	; 0x01
	if (xPos == 0)
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	88 23       	and	r24, r24
    14ea:	19 f4       	brne	.+6      	; 0x14f2 <CLCD_GoToXY+0x1e>
	{
		Local_u8DDRAMaddress = yPos;
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <CLCD_GoToXY+0x2a>
	}
	else if (xPos == 1)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	19 f4       	brne	.+6      	; 0x14fe <CLCD_GoToXY+0x2a>
	{
		Local_u8DDRAMaddress =yPos + 0x40 ;
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	80 5c       	subi	r24, 0xC0	; 192
    14fc:	89 83       	std	Y+1, r24	; 0x01
	}

	CLCD_voidSendCommand(Local_u8DDRAMaddress + 128);
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	80 58       	subi	r24, 0x80	; 128
    1502:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>

}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8 *Copy_u8Pattern , u8 Copy_u8PatternNumber , u8 xPos , u8 yPos)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	27 97       	sbiw	r28, 0x07	; 7
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	6d 83       	std	Y+5, r22	; 0x05
    152c:	4e 83       	std	Y+6, r20	; 0x06
    152e:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMaddress = 0  , Local_u8Iterator ;
    1530:	1a 82       	std	Y+2, r1	; 0x02

	/*Calculate CGRAM Address whose each location is 8 bytes*/
	Local_u8CGRAMaddress = Copy_u8PatternNumber * 8 ;
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD*/
	CLCD_voidSendCommand(Local_u8CGRAMaddress + 64);
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 5c       	subi	r24, 0xC0	; 192
    154a:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>

	/*Write the Pattern into CGRAM*/
	for (Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
    154e:	19 82       	std	Y+1, r1	; 0x01
    1550:	0e c0       	rjmp	.+28     	; 0x156e <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	fc 01       	movw	r30, r24
    155e:	e2 0f       	add	r30, r18
    1560:	f3 1f       	adc	r31, r19
    1562:	80 81       	ld	r24, Z
    1564:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>

	/*Send CGRAM address command to LCD*/
	CLCD_voidSendCommand(Local_u8CGRAMaddress + 64);

	/*Write the Pattern into CGRAM*/
	for (Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	88 30       	cpi	r24, 0x08	; 8
    1572:	78 f3       	brcs	.-34     	; 0x1552 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
	}

	/*go back to DDRAM to Display the pattern*/
	CLCD_GoToXY(xPos , yPos);
    1574:	8e 81       	ldd	r24, Y+6	; 0x06
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>

	/*Display data written in CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
}
    1582:	27 96       	adiw	r28, 0x07	; 7
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <CLCD_write_Number>:


void CLCD_write_Number(u16 Copy_u16DecNum)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <CLCD_write_Number+0x6>
    159a:	00 d0       	rcall	.+0      	; 0x159c <CLCD_write_Number+0x8>
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	9c 83       	std	Y+4, r25	; 0x04
    15a2:	8b 83       	std	Y+3, r24	; 0x03
	static u8 arr_Two_Digits[2] ;
	static u8 arr_Three_Digits[3] ;
	static u8 arr_Four_Digits[4] ;
	u8 index = 0 ;
    15a4:	1a 82       	std	Y+2, r1	; 0x02
	u8 mod ;

	if (Copy_u16DecNum >9 && Copy_u16DecNum <= 99)
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	8a 30       	cpi	r24, 0x0A	; 10
    15ac:	91 05       	cpc	r25, r1
    15ae:	90 f1       	brcs	.+100    	; 0x1614 <CLCD_write_Number+0x80>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	84 36       	cpi	r24, 0x64	; 100
    15b6:	91 05       	cpc	r25, r1
    15b8:	68 f5       	brcc	.+90     	; 0x1614 <CLCD_write_Number+0x80>
    15ba:	1d c0       	rjmp	.+58     	; 0x15f6 <CLCD_write_Number+0x62>
	{
		while (Copy_u16DecNum > 0)
		{
			mod = Copy_u16DecNum  % 10 ;
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	2a e0       	ldi	r18, 0x0A	; 10
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	b9 01       	movw	r22, r18
    15c6:	0e 94 a0 23 	call	0x4740	; 0x4740 <__udivmodhi4>
    15ca:	89 83       	std	Y+1, r24	; 0x01
			arr_Two_Digits[index] = mod ;
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	fc 01       	movw	r30, r24
    15d4:	e0 59       	subi	r30, 0x90	; 144
    15d6:	fe 4f       	sbci	r31, 0xFE	; 254
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	80 83       	st	Z, r24
			Copy_u16DecNum /=10 ;
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	2a e0       	ldi	r18, 0x0A	; 10
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	b9 01       	movw	r22, r18
    15e6:	0e 94 a0 23 	call	0x4740	; 0x4740 <__udivmodhi4>
    15ea:	cb 01       	movw	r24, r22
    15ec:	9c 83       	std	Y+4, r25	; 0x04
    15ee:	8b 83       	std	Y+3, r24	; 0x03
			index ++ ;
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	8f 5f       	subi	r24, 0xFF	; 255
    15f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0 ;
	u8 mod ;

	if (Copy_u16DecNum >9 && Copy_u16DecNum <= 99)
	{
		while (Copy_u16DecNum > 0)
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	f9 f6       	brne	.-66     	; 0x15bc <CLCD_write_Number+0x28>
			arr_Two_Digits[index] = mod ;
			Copy_u16DecNum /=10 ;
			index ++ ;
		}

		CLCD_voidSendData(arr_Two_Digits[1] + '0') ;
    15fe:	80 91 71 01 	lds	r24, 0x0171
    1602:	80 5d       	subi	r24, 0xD0	; 208
    1604:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
		CLCD_voidSendData(arr_Two_Digits[0] + '0') ;
    1608:	80 91 70 01 	lds	r24, 0x0170
    160c:	80 5d       	subi	r24, 0xD0	; 208
    160e:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
    1612:	89 c0       	rjmp	.+274    	; 0x1726 <CLCD_write_Number+0x192>
	}
	else if (Copy_u16DecNum > 99 && Copy_u16DecNum <= 999)
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	84 36       	cpi	r24, 0x64	; 100
    161a:	91 05       	cpc	r25, r1
    161c:	c0 f1       	brcs	.+112    	; 0x168e <CLCD_write_Number+0xfa>
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	23 e0       	ldi	r18, 0x03	; 3
    1624:	88 3e       	cpi	r24, 0xE8	; 232
    1626:	92 07       	cpc	r25, r18
    1628:	90 f5       	brcc	.+100    	; 0x168e <CLCD_write_Number+0xfa>
    162a:	1d c0       	rjmp	.+58     	; 0x1666 <CLCD_write_Number+0xd2>
	{
		while (Copy_u16DecNum > 0)
		{
			mod = Copy_u16DecNum  % 10 ;
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	2a e0       	ldi	r18, 0x0A	; 10
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	b9 01       	movw	r22, r18
    1636:	0e 94 a0 23 	call	0x4740	; 0x4740 <__udivmodhi4>
    163a:	89 83       	std	Y+1, r24	; 0x01
			arr_Three_Digits[index] = mod ;
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	fc 01       	movw	r30, r24
    1644:	e3 59       	subi	r30, 0x93	; 147
    1646:	fe 4f       	sbci	r31, 0xFE	; 254
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	80 83       	st	Z, r24
			Copy_u16DecNum /=10 ;
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	2a e0       	ldi	r18, 0x0A	; 10
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	b9 01       	movw	r22, r18
    1656:	0e 94 a0 23 	call	0x4740	; 0x4740 <__udivmodhi4>
    165a:	cb 01       	movw	r24, r22
    165c:	9c 83       	std	Y+4, r25	; 0x04
    165e:	8b 83       	std	Y+3, r24	; 0x03
			index ++ ;
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(arr_Two_Digits[1] + '0') ;
		CLCD_voidSendData(arr_Two_Digits[0] + '0') ;
	}
	else if (Copy_u16DecNum > 99 && Copy_u16DecNum <= 999)
	{
		while (Copy_u16DecNum > 0)
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	f9 f6       	brne	.-66     	; 0x162c <CLCD_write_Number+0x98>
			arr_Three_Digits[index] = mod ;
			Copy_u16DecNum /=10 ;
			index ++ ;
		}

		CLCD_voidSendData(arr_Three_Digits[2] + '0') ;
    166e:	80 91 6f 01 	lds	r24, 0x016F
    1672:	80 5d       	subi	r24, 0xD0	; 208
    1674:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
		CLCD_voidSendData(arr_Three_Digits[1] + '0') ;
    1678:	80 91 6e 01 	lds	r24, 0x016E
    167c:	80 5d       	subi	r24, 0xD0	; 208
    167e:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
		CLCD_voidSendData(arr_Three_Digits[0] + '0') ;
    1682:	80 91 6d 01 	lds	r24, 0x016D
    1686:	80 5d       	subi	r24, 0xD0	; 208
    1688:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
    168c:	4c c0       	rjmp	.+152    	; 0x1726 <CLCD_write_Number+0x192>
	}
	else if (Copy_u16DecNum > 999 && Copy_u16DecNum <= 9999)
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	23 e0       	ldi	r18, 0x03	; 3
    1694:	88 3e       	cpi	r24, 0xE8	; 232
    1696:	92 07       	cpc	r25, r18
    1698:	e8 f1       	brcs	.+122    	; 0x1714 <CLCD_write_Number+0x180>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	27 e2       	ldi	r18, 0x27	; 39
    16a0:	80 31       	cpi	r24, 0x10	; 16
    16a2:	92 07       	cpc	r25, r18
    16a4:	b8 f5       	brcc	.+110    	; 0x1714 <CLCD_write_Number+0x180>
    16a6:	1d c0       	rjmp	.+58     	; 0x16e2 <CLCD_write_Number+0x14e>
	{
		while (Copy_u16DecNum > 0)
		{
			mod = Copy_u16DecNum  % 10 ;
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	9c 81       	ldd	r25, Y+4	; 0x04
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	b9 01       	movw	r22, r18
    16b2:	0e 94 a0 23 	call	0x4740	; 0x4740 <__udivmodhi4>
    16b6:	89 83       	std	Y+1, r24	; 0x01
			arr_Four_Digits[index] = mod ;
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	fc 01       	movw	r30, r24
    16c0:	e7 59       	subi	r30, 0x97	; 151
    16c2:	fe 4f       	sbci	r31, 0xFE	; 254
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	80 83       	st	Z, r24
			Copy_u16DecNum /=10 ;
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	2a e0       	ldi	r18, 0x0A	; 10
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	b9 01       	movw	r22, r18
    16d2:	0e 94 a0 23 	call	0x4740	; 0x4740 <__udivmodhi4>
    16d6:	cb 01       	movw	r24, r22
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8b 83       	std	Y+3, r24	; 0x03
			index ++ ;
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	8f 5f       	subi	r24, 0xFF	; 255
    16e0:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(arr_Three_Digits[1] + '0') ;
		CLCD_voidSendData(arr_Three_Digits[0] + '0') ;
	}
	else if (Copy_u16DecNum > 999 && Copy_u16DecNum <= 9999)
	{
		while (Copy_u16DecNum > 0)
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	f9 f6       	brne	.-66     	; 0x16a8 <CLCD_write_Number+0x114>
			arr_Four_Digits[index] = mod ;
			Copy_u16DecNum /=10 ;
			index ++ ;
		}

		CLCD_voidSendData(arr_Four_Digits[3] + '0') ;
    16ea:	80 91 6c 01 	lds	r24, 0x016C
    16ee:	80 5d       	subi	r24, 0xD0	; 208
    16f0:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
		CLCD_voidSendData(arr_Four_Digits[2] + '0') ;
    16f4:	80 91 6b 01 	lds	r24, 0x016B
    16f8:	80 5d       	subi	r24, 0xD0	; 208
    16fa:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
		CLCD_voidSendData(arr_Four_Digits[1] + '0') ;
    16fe:	80 91 6a 01 	lds	r24, 0x016A
    1702:	80 5d       	subi	r24, 0xD0	; 208
    1704:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
		CLCD_voidSendData(arr_Four_Digits[0] + '0') ;
    1708:	80 91 69 01 	lds	r24, 0x0169
    170c:	80 5d       	subi	r24, 0xD0	; 208
    170e:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
    1712:	09 c0       	rjmp	.+18     	; 0x1726 <CLCD_write_Number+0x192>
	}
	else if (Copy_u16DecNum >= 0 && Copy_u16DecNum <= 9)
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	8a 30       	cpi	r24, 0x0A	; 10
    171a:	91 05       	cpc	r25, r1
    171c:	20 f4       	brcc	.+8      	; 0x1726 <CLCD_write_Number+0x192>
	{
		CLCD_voidSendData(Copy_u16DecNum + '0') ;
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	80 5d       	subi	r24, 0xD0	; 208
    1722:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
	}
}
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <Set_Morot_Direction>:
#include "PWM_CFG.h"
#include "PWM_private.h"
#include "ADC_Interface.h"

u8 Set_Morot_Direction(u8 Copy_Direction , u8 Copy_MotorState)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	00 d0       	rcall	.+0      	; 0x173a <Set_Morot_Direction+0x6>
    173a:	0f 92       	push	r0
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	8a 83       	std	Y+2, r24	; 0x02
    1742:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_ErrorState = OK ;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Direction == CW)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	b9 f4       	brne	.+46     	; 0x177c <Set_Morot_Direction+0x48>
				Local_ErrorState = NOK ;
			}
		}
		else if (Select_Port_Value == DIO_PORTB)
		{
			DIO_vidSetPortDir(Select_Port_Value , 0b11111111);
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	6f ef       	ldi	r22, 0xFF	; 255
    1752:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_vidSetPortDir>
			if(Copy_MotorState == ON)
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	84 30       	cpi	r24, 0x04	; 4
    175a:	29 f4       	brne	.+10     	; 0x1766 <Set_Morot_Direction+0x32>
				{
					DIO_vidSetPortVal(Select_Port_Value , 0b00000100);
				}
				else if(Select_CW_Pin_Valu == DIO_PIN3)
				{
					DIO_vidSetPortVal(Select_Port_Value , 0b00001000);
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	68 e0       	ldi	r22, 0x08	; 8
    1760:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_vidSetPortVal>
    1764:	41 c0       	rjmp	.+130    	; 0x17e8 <Set_Morot_Direction+0xb4>
				else if(Select_CW_Pin_Valu == DIO_PIN7)
				{
					DIO_vidSetPortVal(Select_Port_Value , 0b10000000);
				}
			}
			else if(Copy_MotorState == OFF)
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	85 30       	cpi	r24, 0x05	; 5
    176a:	29 f4       	brne	.+10     	; 0x1776 <Set_Morot_Direction+0x42>
				{
					DIO_vidSetPortVal(Select_Port_Value , 0);
				}
				else if(Select_CW_Pin_Valu == DIO_PIN3)
				{
					DIO_vidSetPortVal(Select_Port_Value , 0);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_vidSetPortVal>
    1774:	39 c0       	rjmp	.+114    	; 0x17e8 <Set_Morot_Direction+0xb4>
					DIO_vidSetPortVal(Select_Port_Value , 0);
				}
			}
			else
			{
				Local_ErrorState = NOK ;
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	36 c0       	rjmp	.+108    	; 0x17e8 <Set_Morot_Direction+0xb4>
			{
				Local_ErrorState = NOK ;
			}
		}
	}
	else if (Copy_Direction == CCW)
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	b9 f4       	brne	.+46     	; 0x17b0 <Set_Morot_Direction+0x7c>
			}

		}
		else if (Select_Port_Value == DIO_PORTB)
		{
			DIO_vidSetPortDir(Select_Port_Value , 0b11111111);
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	6f ef       	ldi	r22, 0xFF	; 255
    1786:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_vidSetPortDir>
			if(Copy_MotorState == ON)
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	84 30       	cpi	r24, 0x04	; 4
    178e:	29 f4       	brne	.+10     	; 0x179a <Set_Morot_Direction+0x66>
				{
					DIO_vidSetPortVal(Select_Port_Value , 0b00001000);
				}
				else if(Select_CCW_Pin_Valu == DIO_PIN4)
				{
					DIO_vidSetPortVal(Select_Port_Value , 0b00010000);
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	60 e1       	ldi	r22, 0x10	; 16
    1794:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_vidSetPortVal>
    1798:	27 c0       	rjmp	.+78     	; 0x17e8 <Set_Morot_Direction+0xb4>
				else if(Select_CCW_Pin_Valu == DIO_PIN7)
				{
					DIO_vidSetPortVal(Select_Port_Value , 0b10000000);
				}
			}
			else if(Copy_MotorState == OFF)
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	85 30       	cpi	r24, 0x05	; 5
    179e:	29 f4       	brne	.+10     	; 0x17aa <Set_Morot_Direction+0x76>
				{
					DIO_vidSetPortVal(Select_Port_Value , 0);
				}
				else if(Select_CCW_Pin_Valu == DIO_PIN4)
				{
					DIO_vidSetPortVal(Select_Port_Value , 0);
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_vidSetPortVal>
    17a8:	1f c0       	rjmp	.+62     	; 0x17e8 <Set_Morot_Direction+0xb4>
					DIO_vidSetPortVal(Select_Port_Value , 0);
				}
			}
			else
			{
				Local_ErrorState = NOK ;
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	1c c0       	rjmp	.+56     	; 0x17e8 <Set_Morot_Direction+0xb4>
			{
				Local_ErrorState = NOK ;
			}
		}
	}
	else if (Copy_Direction == One_Direction)
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	83 30       	cpi	r24, 0x03	; 3
    17b4:	b9 f4       	brne	.+46     	; 0x17e4 <Set_Morot_Direction+0xb0>
	{
		DIO_vidSetPortDir(Select_Port_Value , 0b11111111);
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	6f ef       	ldi	r22, 0xFF	; 255
    17ba:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_vidSetPortDir>
		if(Copy_MotorState == ON)
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	29 f4       	brne	.+10     	; 0x17ce <Set_Morot_Direction+0x9a>
			{
				DIO_vidSetPortVal(Select_Port_Value , 0b00000100);
			}
			else if(Select_One_Direction_PIN_Valu == DIO_PIN3)
			{
				DIO_vidSetPortVal(Select_Port_Value , 0b00001000);
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	68 e0       	ldi	r22, 0x08	; 8
    17c8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_vidSetPortVal>
    17cc:	0d c0       	rjmp	.+26     	; 0x17e8 <Set_Morot_Direction+0xb4>
			else if(Select_One_Direction_PIN_Valu == DIO_PIN7)
			{
				DIO_vidSetPortVal(Select_Port_Value , 0b10000000);
			}
		}
		else if(Copy_MotorState == OFF)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	85 30       	cpi	r24, 0x05	; 5
    17d2:	29 f4       	brne	.+10     	; 0x17de <Set_Morot_Direction+0xaa>
			{
				DIO_vidSetPortVal(Select_Port_Value , 0);
			}
			else if(Select_One_Direction_PIN_Valu == DIO_PIN3)
			{
				DIO_vidSetPortVal(Select_Port_Value , 0);
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_vidSetPortVal>
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <Set_Morot_Direction+0xb4>
				DIO_vidSetPortVal(Select_Port_Value , 0);
			}
		}
		else
		{
			Local_ErrorState = NOK ;
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <Set_Morot_Direction+0xb4>
		}

	}
	else
	{
		Local_ErrorState = NOK ;
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState ;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <Control_Motor_Intensisty>:

u8 Control_Motor_Intensisty(u8 Copy_u8SelectControlPortIntensisty,u8 Copy_u8Direction , u8 Copy_u8Speed)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <Control_Motor_Intensisty+0x6>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <Control_Motor_Intensisty+0x8>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	8a 83       	std	Y+2, r24	; 0x02
    1804:	6b 83       	std	Y+3, r22	; 0x03
    1806:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = OK ;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Direction == CW)
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	09 f5       	brne	.+66     	; 0x1854 <Control_Motor_Intensisty+0x5e>
	{
		if(Copy_u8SelectControlPortIntensisty == DIO_PORTB)
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	49 f4       	brne	.+18     	; 0x182a <Control_Motor_Intensisty+0x34>
		{
			DIO_vidSetPinDir(Copy_u8SelectControlPortIntensisty , DIO_PIN3 , DIO_OUTPUT);
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	63 e0       	ldi	r22, 0x03	; 3
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>
			TIMR0_VidSetCompMatchVal(Copy_u8Speed);
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	0e 94 16 11 	call	0x222c	; 0x222c <TIMR0_VidSetCompMatchVal>
    1828:	3b c0       	rjmp	.+118    	; 0x18a0 <Control_Motor_Intensisty+0xaa>
		}
		else if(Copy_u8SelectControlPortIntensisty == DIO_PORTD)
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	83 30       	cpi	r24, 0x03	; 3
    182e:	79 f4       	brne	.+30     	; 0x184e <Control_Motor_Intensisty+0x58>
		{
#if Select_Timer1_OC_PIN == OCA
			DIO_vidSetPinDir(Copy_u8SelectControlPortIntensisty , Select_Timer1_OC_PIN , DIO_OUTPUT);
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	65 e0       	ldi	r22, 0x05	; 5
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>
			SetTimer1_ICRval(256);
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	91 e0       	ldi	r25, 0x01	; 1
    183e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <SetTimer1_ICRval>
			TIMR1_VidSetCompMatchOCAVal(Copy_u8Speed);
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 83 11 	call	0x2306	; 0x2306 <TIMR1_VidSetCompMatchOCAVal>
    184c:	29 c0       	rjmp	.+82     	; 0x18a0 <Control_Motor_Intensisty+0xaa>
#endif

		}
		else
		{
			Local_u8ErrorState = NOK ;
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	26 c0       	rjmp	.+76     	; 0x18a0 <Control_Motor_Intensisty+0xaa>
		}
	}
	else if (Copy_u8Direction == CCW)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	09 f5       	brne	.+66     	; 0x189c <Control_Motor_Intensisty+0xa6>
	{
		if(Copy_u8SelectControlPortIntensisty == DIO_PORTB)
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	49 f4       	brne	.+18     	; 0x1872 <Control_Motor_Intensisty+0x7c>
		{
			DIO_vidSetPinDir(Copy_u8SelectControlPortIntensisty , DIO_PIN3 , DIO_OUTPUT);
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	63 e0       	ldi	r22, 0x03	; 3
    1864:	41 e0       	ldi	r20, 0x01	; 1
    1866:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>
			TIMR0_VidSetCompMatchVal(Copy_u8Speed);
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	0e 94 16 11 	call	0x222c	; 0x222c <TIMR0_VidSetCompMatchVal>
    1870:	17 c0       	rjmp	.+46     	; 0x18a0 <Control_Motor_Intensisty+0xaa>
		}
		else if(Copy_u8SelectControlPortIntensisty == DIO_PORTD)
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	79 f4       	brne	.+30     	; 0x1896 <Control_Motor_Intensisty+0xa0>
		{
#if Select_Timer1_OC_PIN == OCA
			DIO_vidSetPinDir(Copy_u8SelectControlPortIntensisty , Select_Timer1_OC_PIN , DIO_OUTPUT);
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	65 e0       	ldi	r22, 0x05	; 5
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>
			SetTimer1_ICRval(256);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	0e 94 71 11 	call	0x22e2	; 0x22e2 <SetTimer1_ICRval>
			TIMR1_VidSetCompMatchOCAVal(Copy_u8Speed);
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 83 11 	call	0x2306	; 0x2306 <TIMR1_VidSetCompMatchOCAVal>
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <Control_Motor_Intensisty+0xaa>
			TIMR1_VidSetCompMatchOCBVal(Copy_u8Speed);
#endif
		}
		else
		{
			Local_u8ErrorState = NOK ;
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <Control_Motor_Intensisty+0xaa>
		}
	}
	else
	{
		Local_u8ErrorState = NOK ;
    189c:	82 e0       	ldi	r24, 0x02	; 2
    189e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <DIO_vidSetPinVal>:
#include "Bit_Math.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"
/**************FUNCTION IMPLEMENTATION************/
void DIO_vidSetPinVal(u8 portId, u8 pinId, u8 val)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	27 97       	sbiw	r28, 0x07	; 7
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	6a 83       	std	Y+2, r22	; 0x02
    18c8:	4b 83       	std	Y+3, r20	; 0x03
	if ((portId <= DIO_PORTD) && (pinId <= DIO_PIN7))//the range is right
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <DIO_vidSetPinVal+0x22>
    18d0:	ee c0       	rjmp	.+476    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	88 30       	cpi	r24, 0x08	; 8
    18d6:	08 f0       	brcs	.+2      	; 0x18da <DIO_vidSetPinVal+0x2a>
    18d8:	ea c0       	rjmp	.+468    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
	{ if (val == DIO_HIGH)
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	09 f0       	breq	.+2      	; 0x18e2 <DIO_vidSetPinVal+0x32>
    18e0:	6f c0       	rjmp	.+222    	; 0x19c0 <DIO_vidSetPinVal+0x110>
	{
		switch(portId)
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	3f 83       	std	Y+7, r19	; 0x07
    18ea:	2e 83       	std	Y+6, r18	; 0x06
    18ec:	8e 81       	ldd	r24, Y+6	; 0x06
    18ee:	9f 81       	ldd	r25, Y+7	; 0x07
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	49 f1       	breq	.+82     	; 0x1948 <DIO_vidSetPinVal+0x98>
    18f6:	2e 81       	ldd	r18, Y+6	; 0x06
    18f8:	3f 81       	ldd	r19, Y+7	; 0x07
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	2c f4       	brge	.+10     	; 0x190a <DIO_vidSetPinVal+0x5a>
    1900:	8e 81       	ldd	r24, Y+6	; 0x06
    1902:	9f 81       	ldd	r25, Y+7	; 0x07
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	61 f0       	breq	.+24     	; 0x1920 <DIO_vidSetPinVal+0x70>
    1908:	d2 c0       	rjmp	.+420    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
    190a:	2e 81       	ldd	r18, Y+6	; 0x06
    190c:	3f 81       	ldd	r19, Y+7	; 0x07
    190e:	22 30       	cpi	r18, 0x02	; 2
    1910:	31 05       	cpc	r19, r1
    1912:	71 f1       	breq	.+92     	; 0x1970 <DIO_vidSetPinVal+0xc0>
    1914:	8e 81       	ldd	r24, Y+6	; 0x06
    1916:	9f 81       	ldd	r25, Y+7	; 0x07
    1918:	83 30       	cpi	r24, 0x03	; 3
    191a:	91 05       	cpc	r25, r1
    191c:	e9 f1       	breq	.+122    	; 0x1998 <DIO_vidSetPinVal+0xe8>
    191e:	c7 c0       	rjmp	.+398    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
		{
		case DIO_PORTA: SET_BIT(pinId,PORTA_REG);break;
    1920:	ab e3       	ldi	r26, 0x3B	; 59
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	eb e3       	ldi	r30, 0x3B	; 59
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_vidSetPinVal+0x8e>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_vidSetPinVal+0x8a>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	b3 c0       	rjmp	.+358    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTB: SET_BIT(pinId,PORTB_REG);break;
    1948:	a8 e3       	ldi	r26, 0x38	; 56
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e8 e3       	ldi	r30, 0x38	; 56
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_vidSetPinVal+0xb6>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_vidSetPinVal+0xb2>
    196a:	84 2b       	or	r24, r20
    196c:	8c 93       	st	X, r24
    196e:	9f c0       	rjmp	.+318    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTC: SET_BIT(pinId,PORTC_REG);break;
    1970:	a5 e3       	ldi	r26, 0x35	; 53
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e5 e3       	ldi	r30, 0x35	; 53
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_vidSetPinVal+0xde>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <DIO_vidSetPinVal+0xda>
    1992:	84 2b       	or	r24, r20
    1994:	8c 93       	st	X, r24
    1996:	8b c0       	rjmp	.+278    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTD: SET_BIT(pinId,PORTD_REG);break;
    1998:	a2 e3       	ldi	r26, 0x32	; 50
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e2 e3       	ldi	r30, 0x32	; 50
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 2e       	mov	r0, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <DIO_vidSetPinVal+0x106>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	0a 94       	dec	r0
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <DIO_vidSetPinVal+0x102>
    19ba:	84 2b       	or	r24, r20
    19bc:	8c 93       	st	X, r24
    19be:	77 c0       	rjmp	.+238    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
		}
	}
	else if (val == DIO_LOW)
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 23       	and	r24, r24
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <DIO_vidSetPinVal+0x118>
    19c6:	73 c0       	rjmp	.+230    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
	{
		switch(portId)
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	3d 83       	std	Y+5, r19	; 0x05
    19d0:	2c 83       	std	Y+4, r18	; 0x04
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	59 f1       	breq	.+86     	; 0x1a32 <DIO_vidSetPinVal+0x182>
    19dc:	2c 81       	ldd	r18, Y+4	; 0x04
    19de:	3d 81       	ldd	r19, Y+5	; 0x05
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <DIO_vidSetPinVal+0x140>
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	69 f0       	breq	.+26     	; 0x1a08 <DIO_vidSetPinVal+0x158>
    19ee:	5f c0       	rjmp	.+190    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
    19f0:	2c 81       	ldd	r18, Y+4	; 0x04
    19f2:	3d 81       	ldd	r19, Y+5	; 0x05
    19f4:	22 30       	cpi	r18, 0x02	; 2
    19f6:	31 05       	cpc	r19, r1
    19f8:	89 f1       	breq	.+98     	; 0x1a5c <DIO_vidSetPinVal+0x1ac>
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	9d 81       	ldd	r25, Y+5	; 0x05
    19fe:	83 30       	cpi	r24, 0x03	; 3
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <DIO_vidSetPinVal+0x156>
    1a04:	40 c0       	rjmp	.+128    	; 0x1a86 <DIO_vidSetPinVal+0x1d6>
    1a06:	53 c0       	rjmp	.+166    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
		{
		case DIO_PORTA: CLR_BIT(pinId,PORTA_REG);break;
    1a08:	ab e3       	ldi	r26, 0x3B	; 59
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	eb e3       	ldi	r30, 0x3B	; 59
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_vidSetPinVal+0x176>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_vidSetPinVal+0x172>
    1a2a:	80 95       	com	r24
    1a2c:	84 23       	and	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	3e c0       	rjmp	.+124    	; 0x1aae <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTB: CLR_BIT(pinId,PORTB_REG);break;
    1a32:	a8 e3       	ldi	r26, 0x38	; 56
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e8 e3       	ldi	r30, 0x38	; 56
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <DIO_vidSetPinVal+0x1a0>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <DIO_vidSetPinVal+0x19c>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	29 c0       	rjmp	.+82     	; 0x1aae <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTC: CLR_BIT(pinId,PORTC_REG);break;
    1a5c:	a5 e3       	ldi	r26, 0x35	; 53
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e5 e3       	ldi	r30, 0x35	; 53
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	48 2f       	mov	r20, r24
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	02 2e       	mov	r0, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_vidSetPinVal+0x1ca>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	0a 94       	dec	r0
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_vidSetPinVal+0x1c6>
    1a7e:	80 95       	com	r24
    1a80:	84 23       	and	r24, r20
    1a82:	8c 93       	st	X, r24
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTD: CLR_BIT(pinId,PORTD_REG);break;
    1a86:	a2 e3       	ldi	r26, 0x32	; 50
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e2 e3       	ldi	r30, 0x32	; 50
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 2e       	mov	r0, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <DIO_vidSetPinVal+0x1f4>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	0a 94       	dec	r0
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <DIO_vidSetPinVal+0x1f0>
    1aa8:	80 95       	com	r24
    1aaa:	84 23       	and	r24, r20
    1aac:	8c 93       	st	X, r24
	else//for future development
	{
		// Report Error
	}

}
    1aae:	27 96       	adiw	r28, 0x07	; 7
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <DIO_vidSetPinDir>:
void DIO_vidSetPinDir(u8 portId, u8 pinId, u8 dir)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	27 97       	sbiw	r28, 0x07	; 7
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	6a 83       	std	Y+2, r22	; 0x02
    1ad8:	4b 83       	std	Y+3, r20	; 0x03
	if ((portId <= DIO_PORTD) && (pinId <= DIO_PIN7))
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <DIO_vidSetPinDir+0x22>
    1ae0:	ee c0       	rjmp	.+476    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	88 30       	cpi	r24, 0x08	; 8
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <DIO_vidSetPinDir+0x2a>
    1ae8:	ea c0       	rjmp	.+468    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
	{ if (dir == DIO_OUTPUT)
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <DIO_vidSetPinDir+0x32>
    1af0:	6f c0       	rjmp	.+222    	; 0x1bd0 <DIO_vidSetPinDir+0x110>
	{
		switch(portId)
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	3f 83       	std	Y+7, r19	; 0x07
    1afa:	2e 83       	std	Y+6, r18	; 0x06
    1afc:	8e 81       	ldd	r24, Y+6	; 0x06
    1afe:	9f 81       	ldd	r25, Y+7	; 0x07
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	91 05       	cpc	r25, r1
    1b04:	49 f1       	breq	.+82     	; 0x1b58 <DIO_vidSetPinDir+0x98>
    1b06:	2e 81       	ldd	r18, Y+6	; 0x06
    1b08:	3f 81       	ldd	r19, Y+7	; 0x07
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	2c f4       	brge	.+10     	; 0x1b1a <DIO_vidSetPinDir+0x5a>
    1b10:	8e 81       	ldd	r24, Y+6	; 0x06
    1b12:	9f 81       	ldd	r25, Y+7	; 0x07
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	61 f0       	breq	.+24     	; 0x1b30 <DIO_vidSetPinDir+0x70>
    1b18:	d2 c0       	rjmp	.+420    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
    1b1a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b1c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b1e:	22 30       	cpi	r18, 0x02	; 2
    1b20:	31 05       	cpc	r19, r1
    1b22:	71 f1       	breq	.+92     	; 0x1b80 <DIO_vidSetPinDir+0xc0>
    1b24:	8e 81       	ldd	r24, Y+6	; 0x06
    1b26:	9f 81       	ldd	r25, Y+7	; 0x07
    1b28:	83 30       	cpi	r24, 0x03	; 3
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	e9 f1       	breq	.+122    	; 0x1ba8 <DIO_vidSetPinDir+0xe8>
    1b2e:	c7 c0       	rjmp	.+398    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
		{
		case DIO_PORTA: SET_BIT(pinId,DDRA_REG);break;
    1b30:	aa e3       	ldi	r26, 0x3A	; 58
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	ea e3       	ldi	r30, 0x3A	; 58
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <DIO_vidSetPinDir+0x8e>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <DIO_vidSetPinDir+0x8a>
    1b52:	84 2b       	or	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	b3 c0       	rjmp	.+358    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTB: SET_BIT(pinId,DDRB_REG);break;
    1b58:	a7 e3       	ldi	r26, 0x37	; 55
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e7 e3       	ldi	r30, 0x37	; 55
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	48 2f       	mov	r20, r24
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 2e       	mov	r0, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <DIO_vidSetPinDir+0xb6>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	0a 94       	dec	r0
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <DIO_vidSetPinDir+0xb2>
    1b7a:	84 2b       	or	r24, r20
    1b7c:	8c 93       	st	X, r24
    1b7e:	9f c0       	rjmp	.+318    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTC: SET_BIT(pinId,DDRC_REG);break;
    1b80:	a4 e3       	ldi	r26, 0x34	; 52
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e4 e3       	ldi	r30, 0x34	; 52
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <DIO_vidSetPinDir+0xde>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <DIO_vidSetPinDir+0xda>
    1ba2:	84 2b       	or	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	8b c0       	rjmp	.+278    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTD: SET_BIT(pinId,DDRD_REG);break;
    1ba8:	a1 e3       	ldi	r26, 0x31	; 49
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e1 e3       	ldi	r30, 0x31	; 49
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_vidSetPinDir+0x106>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_vidSetPinDir+0x102>
    1bca:	84 2b       	or	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	77 c0       	rjmp	.+238    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
		}
	}
	else if (dir == DIO_INPUT)
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	88 23       	and	r24, r24
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <DIO_vidSetPinDir+0x118>
    1bd6:	73 c0       	rjmp	.+230    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
	{
		switch(portId)
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	3d 83       	std	Y+5, r19	; 0x05
    1be0:	2c 83       	std	Y+4, r18	; 0x04
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	9d 81       	ldd	r25, Y+5	; 0x05
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	91 05       	cpc	r25, r1
    1bea:	59 f1       	breq	.+86     	; 0x1c42 <DIO_vidSetPinDir+0x182>
    1bec:	2c 81       	ldd	r18, Y+4	; 0x04
    1bee:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf0:	22 30       	cpi	r18, 0x02	; 2
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <DIO_vidSetPinDir+0x140>
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f0       	breq	.+26     	; 0x1c18 <DIO_vidSetPinDir+0x158>
    1bfe:	5f c0       	rjmp	.+190    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
    1c00:	2c 81       	ldd	r18, Y+4	; 0x04
    1c02:	3d 81       	ldd	r19, Y+5	; 0x05
    1c04:	22 30       	cpi	r18, 0x02	; 2
    1c06:	31 05       	cpc	r19, r1
    1c08:	89 f1       	breq	.+98     	; 0x1c6c <DIO_vidSetPinDir+0x1ac>
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	83 30       	cpi	r24, 0x03	; 3
    1c10:	91 05       	cpc	r25, r1
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <DIO_vidSetPinDir+0x156>
    1c14:	40 c0       	rjmp	.+128    	; 0x1c96 <DIO_vidSetPinDir+0x1d6>
    1c16:	53 c0       	rjmp	.+166    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
		{
		case DIO_PORTA: CLR_BIT(pinId,DDRA_REG);break;
    1c18:	aa e3       	ldi	r26, 0x3A	; 58
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	ea e3       	ldi	r30, 0x3A	; 58
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_vidSetPinDir+0x176>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <DIO_vidSetPinDir+0x172>
    1c3a:	80 95       	com	r24
    1c3c:	84 23       	and	r24, r20
    1c3e:	8c 93       	st	X, r24
    1c40:	3e c0       	rjmp	.+124    	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTB: CLR_BIT(pinId,DDRB_REG);break;
    1c42:	a7 e3       	ldi	r26, 0x37	; 55
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e7 e3       	ldi	r30, 0x37	; 55
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <DIO_vidSetPinDir+0x1a0>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <DIO_vidSetPinDir+0x19c>
    1c64:	80 95       	com	r24
    1c66:	84 23       	and	r24, r20
    1c68:	8c 93       	st	X, r24
    1c6a:	29 c0       	rjmp	.+82     	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTC: CLR_BIT(pinId,DDRC_REG);break;
    1c6c:	a4 e3       	ldi	r26, 0x34	; 52
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e4 e3       	ldi	r30, 0x34	; 52
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 2e       	mov	r0, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_vidSetPinDir+0x1ca>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_vidSetPinDir+0x1c6>
    1c8e:	80 95       	com	r24
    1c90:	84 23       	and	r24, r20
    1c92:	8c 93       	st	X, r24
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTD: CLR_BIT(pinId,DDRD_REG);break;
    1c96:	a1 e3       	ldi	r26, 0x31	; 49
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e1 e3       	ldi	r30, 0x31	; 49
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DIO_vidSetPinDir+0x1f4>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <DIO_vidSetPinDir+0x1f0>
    1cb8:	80 95       	com	r24
    1cba:	84 23       	and	r24, r20
    1cbc:	8c 93       	st	X, r24
	else
	{
		// Report Error
	}

}
    1cbe:	27 96       	adiw	r28, 0x07	; 7
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <DIO_vidSetPortVal>:
void DIO_vidSetPortVal(u8 portId, u8 portval)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <DIO_vidSetPortVal+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <DIO_vidSetPortVal+0x8>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	6a 83       	std	Y+2, r22	; 0x02
	if (portId <= DIO_PORTD)
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	84 30       	cpi	r24, 0x04	; 4
    1ce4:	90 f5       	brcc	.+100    	; 0x1d4a <DIO_vidSetPortVal+0x7a>
	{
		switch(portId)
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3c 83       	std	Y+4, r19	; 0x04
    1cee:	2b 83       	std	Y+3, r18	; 0x03
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	d1 f0       	breq	.+52     	; 0x1d2e <DIO_vidSetPortVal+0x5e>
    1cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfe:	22 30       	cpi	r18, 0x02	; 2
    1d00:	31 05       	cpc	r19, r1
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <DIO_vidSetPortVal+0x3e>
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	61 f0       	breq	.+24     	; 0x1d24 <DIO_vidSetPortVal+0x54>
    1d0c:	1e c0       	rjmp	.+60     	; 0x1d4a <DIO_vidSetPortVal+0x7a>
    1d0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d10:	3c 81       	ldd	r19, Y+4	; 0x04
    1d12:	22 30       	cpi	r18, 0x02	; 2
    1d14:	31 05       	cpc	r19, r1
    1d16:	81 f0       	breq	.+32     	; 0x1d38 <DIO_vidSetPortVal+0x68>
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	83 30       	cpi	r24, 0x03	; 3
    1d1e:	91 05       	cpc	r25, r1
    1d20:	81 f0       	breq	.+32     	; 0x1d42 <DIO_vidSetPortVal+0x72>
    1d22:	13 c0       	rjmp	.+38     	; 0x1d4a <DIO_vidSetPortVal+0x7a>
		{
		case DIO_PORTA: PORTA_REG = portval;break;
    1d24:	eb e3       	ldi	r30, 0x3B	; 59
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	80 83       	st	Z, r24
    1d2c:	0e c0       	rjmp	.+28     	; 0x1d4a <DIO_vidSetPortVal+0x7a>
		case DIO_PORTB: PORTB_REG = portval;break;
    1d2e:	e8 e3       	ldi	r30, 0x38	; 56
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	80 83       	st	Z, r24
    1d36:	09 c0       	rjmp	.+18     	; 0x1d4a <DIO_vidSetPortVal+0x7a>
		case DIO_PORTC: PORTC_REG = portval;break;
    1d38:	e5 e3       	ldi	r30, 0x35	; 53
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	80 83       	st	Z, r24
    1d40:	04 c0       	rjmp	.+8      	; 0x1d4a <DIO_vidSetPortVal+0x7a>
		case DIO_PORTD: PORTD_REG = portval;break;
    1d42:	e2 e3       	ldi	r30, 0x32	; 50
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	80 83       	st	Z, r24
		}
	}
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(u8 portId, u8 portdir)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <DIO_vidSetPortDir+0x6>
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <DIO_vidSetPortDir+0x8>
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	6a 83       	std	Y+2, r22	; 0x02
	if (portId <= DIO_PORTD)
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	84 30       	cpi	r24, 0x04	; 4
    1d6c:	90 f5       	brcc	.+100    	; 0x1dd2 <DIO_vidSetPortDir+0x7a>
	{
		switch(portId)
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	3c 83       	std	Y+4, r19	; 0x04
    1d76:	2b 83       	std	Y+3, r18	; 0x03
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	91 05       	cpc	r25, r1
    1d80:	d1 f0       	breq	.+52     	; 0x1db6 <DIO_vidSetPortDir+0x5e>
    1d82:	2b 81       	ldd	r18, Y+3	; 0x03
    1d84:	3c 81       	ldd	r19, Y+4	; 0x04
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <DIO_vidSetPortDir+0x3e>
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	61 f0       	breq	.+24     	; 0x1dac <DIO_vidSetPortDir+0x54>
    1d94:	1e c0       	rjmp	.+60     	; 0x1dd2 <DIO_vidSetPortDir+0x7a>
    1d96:	2b 81       	ldd	r18, Y+3	; 0x03
    1d98:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	81 f0       	breq	.+32     	; 0x1dc0 <DIO_vidSetPortDir+0x68>
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	81 f0       	breq	.+32     	; 0x1dca <DIO_vidSetPortDir+0x72>
    1daa:	13 c0       	rjmp	.+38     	; 0x1dd2 <DIO_vidSetPortDir+0x7a>
		{
		case DIO_PORTA: DDRA_REG = portdir;break;
    1dac:	ea e3       	ldi	r30, 0x3A	; 58
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	80 83       	st	Z, r24
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <DIO_vidSetPortDir+0x7a>
		case DIO_PORTB: DDRB_REG = portdir;break;
    1db6:	e7 e3       	ldi	r30, 0x37	; 55
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	80 83       	st	Z, r24
    1dbe:	09 c0       	rjmp	.+18     	; 0x1dd2 <DIO_vidSetPortDir+0x7a>
		case DIO_PORTC: DDRC_REG = portdir;break;
    1dc0:	e4 e3       	ldi	r30, 0x34	; 52
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	80 83       	st	Z, r24
    1dc8:	04 c0       	rjmp	.+8      	; 0x1dd2 <DIO_vidSetPortDir+0x7a>
		case DIO_PORTD: DDRD_REG = portdir;break;
    1dca:	e1 e3       	ldi	r30, 0x31	; 49
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	80 83       	st	Z, r24
		}
	}
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 portId, u8 pinId , u8 *Ret_val)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	27 97       	sbiw	r28, 0x07	; 7
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	8a 83       	std	Y+2, r24	; 0x02
    1df6:	6b 83       	std	Y+3, r22	; 0x03
    1df8:	5d 83       	std	Y+5, r21	; 0x05
    1dfa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0 ;
    1dfc:	19 82       	std	Y+1, r1	; 0x01

	if ((Ret_val != NULL) && (pinId <= DIO_PIN7))
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <DIO_u8GetPinVal+0x28>
    1e06:	78 c0       	rjmp	.+240    	; 0x1ef8 <DIO_u8GetPinVal+0x118>
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	88 30       	cpi	r24, 0x08	; 8
    1e0c:	08 f0       	brcs	.+2      	; 0x1e10 <DIO_u8GetPinVal+0x30>
    1e0e:	74 c0       	rjmp	.+232    	; 0x1ef8 <DIO_u8GetPinVal+0x118>
	{
		switch(portId)
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3f 83       	std	Y+7, r19	; 0x07
    1e18:	2e 83       	std	Y+6, r18	; 0x06
    1e1a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e1c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e1e:	41 30       	cpi	r20, 0x01	; 1
    1e20:	51 05       	cpc	r21, r1
    1e22:	59 f1       	breq	.+86     	; 0x1e7a <DIO_u8GetPinVal+0x9a>
    1e24:	8e 81       	ldd	r24, Y+6	; 0x06
    1e26:	9f 81       	ldd	r25, Y+7	; 0x07
    1e28:	82 30       	cpi	r24, 0x02	; 2
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	34 f4       	brge	.+12     	; 0x1e3a <DIO_u8GetPinVal+0x5a>
    1e2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e30:	3f 81       	ldd	r19, Y+7	; 0x07
    1e32:	21 15       	cp	r18, r1
    1e34:	31 05       	cpc	r19, r1
    1e36:	69 f0       	breq	.+26     	; 0x1e52 <DIO_u8GetPinVal+0x72>
    1e38:	5c c0       	rjmp	.+184    	; 0x1ef2 <DIO_u8GetPinVal+0x112>
    1e3a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e3c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e3e:	42 30       	cpi	r20, 0x02	; 2
    1e40:	51 05       	cpc	r21, r1
    1e42:	79 f1       	breq	.+94     	; 0x1ea2 <DIO_u8GetPinVal+0xc2>
    1e44:	8e 81       	ldd	r24, Y+6	; 0x06
    1e46:	9f 81       	ldd	r25, Y+7	; 0x07
    1e48:	83 30       	cpi	r24, 0x03	; 3
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <DIO_u8GetPinVal+0x70>
    1e4e:	3d c0       	rjmp	.+122    	; 0x1eca <DIO_u8GetPinVal+0xea>
    1e50:	50 c0       	rjmp	.+160    	; 0x1ef2 <DIO_u8GetPinVal+0x112>
		{
		case DIO_PORTA: *Ret_val = GET_BIT(pinId,PINA_REG);break;
    1e52:	e9 e3       	ldi	r30, 0x39	; 57
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a9 01       	movw	r20, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <DIO_u8GetPinVal+0x8a>
    1e66:	55 95       	asr	r21
    1e68:	47 95       	ror	r20
    1e6a:	8a 95       	dec	r24
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <DIO_u8GetPinVal+0x86>
    1e6e:	ca 01       	movw	r24, r20
    1e70:	81 70       	andi	r24, 0x01	; 1
    1e72:	ec 81       	ldd	r30, Y+4	; 0x04
    1e74:	fd 81       	ldd	r31, Y+5	; 0x05
    1e76:	80 83       	st	Z, r24
    1e78:	41 c0       	rjmp	.+130    	; 0x1efc <DIO_u8GetPinVal+0x11c>
		case DIO_PORTB: *Ret_val = GET_BIT(pinId,PINB_REG);break;
    1e7a:	e6 e3       	ldi	r30, 0x36	; 54
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a9 01       	movw	r20, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <DIO_u8GetPinVal+0xb2>
    1e8e:	55 95       	asr	r21
    1e90:	47 95       	ror	r20
    1e92:	8a 95       	dec	r24
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <DIO_u8GetPinVal+0xae>
    1e96:	ca 01       	movw	r24, r20
    1e98:	81 70       	andi	r24, 0x01	; 1
    1e9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e9e:	80 83       	st	Z, r24
    1ea0:	2d c0       	rjmp	.+90     	; 0x1efc <DIO_u8GetPinVal+0x11c>
		case DIO_PORTC: *Ret_val = GET_BIT(pinId,PINC_REG);break;
    1ea2:	e3 e3       	ldi	r30, 0x33	; 51
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a9 01       	movw	r20, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <DIO_u8GetPinVal+0xda>
    1eb6:	55 95       	asr	r21
    1eb8:	47 95       	ror	r20
    1eba:	8a 95       	dec	r24
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <DIO_u8GetPinVal+0xd6>
    1ebe:	ca 01       	movw	r24, r20
    1ec0:	81 70       	andi	r24, 0x01	; 1
    1ec2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ec4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ec6:	80 83       	st	Z, r24
    1ec8:	19 c0       	rjmp	.+50     	; 0x1efc <DIO_u8GetPinVal+0x11c>
		case DIO_PORTD: *Ret_val = GET_BIT(pinId,PIND_REG);break;
    1eca:	e0 e3       	ldi	r30, 0x30	; 48
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a9 01       	movw	r20, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <DIO_u8GetPinVal+0x102>
    1ede:	55 95       	asr	r21
    1ee0:	47 95       	ror	r20
    1ee2:	8a 95       	dec	r24
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <DIO_u8GetPinVal+0xfe>
    1ee6:	ca 01       	movw	r24, r20
    1ee8:	81 70       	andi	r24, 0x01	; 1
    1eea:	ec 81       	ldd	r30, Y+4	; 0x04
    1eec:	fd 81       	ldd	r31, Y+5	; 0x05
    1eee:	80 83       	st	Z, r24
    1ef0:	05 c0       	rjmp	.+10     	; 0x1efc <DIO_u8GetPinVal+0x11c>
		default : Local_u8ErrorState = 1 ;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <DIO_u8GetPinVal+0x11c>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1efe:	27 96       	adiw	r28, 0x07	; 7
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <EXTI_Int2_Inti>:

	return Local_ErrorState ;
}
#elif EXTI_Int_Src == INT_2
void EXTI_Int2_Inti(void)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
#if INT2_sense == Falling_Edge
	CLR_BIT(ISC2 , MCUCSR);
    1f18:	a4 e5       	ldi	r26, 0x54	; 84
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e4 e5       	ldi	r30, 0x54	; 84
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	8f 7b       	andi	r24, 0xBF	; 191
    1f24:	8c 93       	st	X, r24

#endif

	/*INT2 Enable*/
#if INT2_State == ENABLED
	SET_BIT(INT_2,GICR);
    1f26:	ab e5       	ldi	r26, 0x5B	; 91
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	eb e5       	ldi	r30, 0x5B	; 91
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	80 62       	ori	r24, 0x20	; 32
    1f32:	8c 93       	st	X, r24
#elif INT2_State == DISABLED
	CLR_BIT(INT_2,GICR);
#else
#error "Wrong State"
#endif
}
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <EXTI_INT0SetCallBack>:
#endif
u8 EXTI_INT0SetCallBack(void (*Copy_PvINT0Func)(void))
{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <EXTI_INT0SetCallBack+0x6>
    1f40:	0f 92       	push	r0
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	9b 83       	std	Y+3, r25	; 0x03
    1f48:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState = OK;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_PvINT0Func != NULL_Pointer)
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	9b 81       	ldd	r25, Y+3	; 0x03
    1f52:	83 30       	cpi	r24, 0x03	; 3
    1f54:	91 05       	cpc	r25, r1
    1f56:	39 f0       	breq	.+14     	; 0x1f66 <EXTI_INT0SetCallBack+0x2c>
	{
		EXTI_PvINT0Func = Copy_PvINT0Func;
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5c:	90 93 37 01 	sts	0x0137, r25
    1f60:	80 93 36 01 	sts	0x0136, r24
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <EXTI_INT0SetCallBack+0x30>
	}
	else
	{
		Local_ErrorState = NULL_Pointer ;
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState ;
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <EXTI_INT2SetCallBack>:

u8 EXTI_INT2SetCallBack(void (*Copy_PvINT2Func)(void))
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <EXTI_INT2SetCallBack+0x6>
    1f7e:	0f 92       	push	r0
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	9b 83       	std	Y+3, r25	; 0x03
    1f86:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState = OK;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_PvINT2Func != NULL_Pointer)
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	91 05       	cpc	r25, r1
    1f94:	39 f0       	breq	.+14     	; 0x1fa4 <EXTI_INT2SetCallBack+0x2c>
	{
		EXTI_PvINT2Func = Copy_PvINT2Func;
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	90 93 39 01 	sts	0x0139, r25
    1f9e:	80 93 38 01 	sts	0x0138, r24
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <EXTI_INT2SetCallBack+0x30>
	}
	else
	{
		Local_ErrorState = NULL_Pointer ;
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState ;
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <__vector_1>:


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1fb6:	1f 92       	push	r1
    1fb8:	0f 92       	push	r0
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	0f 92       	push	r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	2f 93       	push	r18
    1fc2:	3f 93       	push	r19
    1fc4:	4f 93       	push	r20
    1fc6:	5f 93       	push	r21
    1fc8:	6f 93       	push	r22
    1fca:	7f 93       	push	r23
    1fcc:	8f 93       	push	r24
    1fce:	9f 93       	push	r25
    1fd0:	af 93       	push	r26
    1fd2:	bf 93       	push	r27
    1fd4:	ef 93       	push	r30
    1fd6:	ff 93       	push	r31
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_PvINT0Func != NULL_Pointer)
    1fe0:	80 91 36 01 	lds	r24, 0x0136
    1fe4:	90 91 37 01 	lds	r25, 0x0137
    1fe8:	83 30       	cpi	r24, 0x03	; 3
    1fea:	91 05       	cpc	r25, r1
    1fec:	29 f0       	breq	.+10     	; 0x1ff8 <__vector_1+0x42>
	{
		EXTI_PvINT0Func();
    1fee:	e0 91 36 01 	lds	r30, 0x0136
    1ff2:	f0 91 37 01 	lds	r31, 0x0137
    1ff6:	09 95       	icall
	}
	else
	{
		/*Do no thing*/
	}
}
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	ff 91       	pop	r31
    1ffe:	ef 91       	pop	r30
    2000:	bf 91       	pop	r27
    2002:	af 91       	pop	r26
    2004:	9f 91       	pop	r25
    2006:	8f 91       	pop	r24
    2008:	7f 91       	pop	r23
    200a:	6f 91       	pop	r22
    200c:	5f 91       	pop	r21
    200e:	4f 91       	pop	r20
    2010:	3f 91       	pop	r19
    2012:	2f 91       	pop	r18
    2014:	0f 90       	pop	r0
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	0f 90       	pop	r0
    201a:	1f 90       	pop	r1
    201c:	18 95       	reti

0000201e <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    201e:	1f 92       	push	r1
    2020:	0f 92       	push	r0
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	0f 92       	push	r0
    2026:	11 24       	eor	r1, r1
    2028:	2f 93       	push	r18
    202a:	3f 93       	push	r19
    202c:	4f 93       	push	r20
    202e:	5f 93       	push	r21
    2030:	6f 93       	push	r22
    2032:	7f 93       	push	r23
    2034:	8f 93       	push	r24
    2036:	9f 93       	push	r25
    2038:	af 93       	push	r26
    203a:	bf 93       	push	r27
    203c:	ef 93       	push	r30
    203e:	ff 93       	push	r31
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_PvINT2Func != NULL_Pointer)
    2048:	80 91 38 01 	lds	r24, 0x0138
    204c:	90 91 39 01 	lds	r25, 0x0139
    2050:	83 30       	cpi	r24, 0x03	; 3
    2052:	91 05       	cpc	r25, r1
    2054:	29 f0       	breq	.+10     	; 0x2060 <__vector_3+0x42>
	{
		EXTI_PvINT2Func();
    2056:	e0 91 38 01 	lds	r30, 0x0138
    205a:	f0 91 39 01 	lds	r31, 0x0139
    205e:	09 95       	icall
	}
	else
	{
		/*Do no thing*/
	}
}
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	ff 91       	pop	r31
    2066:	ef 91       	pop	r30
    2068:	bf 91       	pop	r27
    206a:	af 91       	pop	r26
    206c:	9f 91       	pop	r25
    206e:	8f 91       	pop	r24
    2070:	7f 91       	pop	r23
    2072:	6f 91       	pop	r22
    2074:	5f 91       	pop	r21
    2076:	4f 91       	pop	r20
    2078:	3f 91       	pop	r19
    207a:	2f 91       	pop	r18
    207c:	0f 90       	pop	r0
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	0f 90       	pop	r0
    2082:	1f 90       	pop	r1
    2084:	18 95       	reti

00002086 <GLOBAL_Init>:

#include "avr/delay.h"


void GLOBAL_Init(void)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
#if Status == ENABLED
	SET_BIT(I,SREG);
    208e:	af e5       	ldi	r26, 0x5F	; 95
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	ef e5       	ldi	r30, 0x5F	; 95
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	80 68       	ori	r24, 0x80	; 128
    209a:	8c 93       	st	X, r24
#elif Status == DISABLED
	CLR_BIT(I,SREG);
#endif
}
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <Enable_Global_Interrupt>:


void Enable_Global_Interrupt()
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(I,SREG);
    20aa:	af e5       	ldi	r26, 0x5F	; 95
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	ef e5       	ldi	r30, 0x5F	; 95
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	80 68       	ori	r24, 0x80	; 128
    20b6:	8c 93       	st	X, r24

}
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <Disable_Global_Interrupt>:


void Disable_Global_Interrupt()
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(I,SREG);
    20c6:	af e5       	ldi	r26, 0x5F	; 95
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	ef e5       	ldi	r30, 0x5F	; 95
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 77       	andi	r24, 0x7F	; 127
    20d2:	8c 93       	st	X, r24
}
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <KPD_GetKeyPressed>:
#include "KPD_private.h"



u8 KPD_GetKeyPressed(void)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <KPD_GetKeyPressed+0x6>
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <KPD_GetKeyPressed+0x8>
    20e2:	0f 92       	push	r0
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
	u8 pressed_key =KPD_NOT_PRESSED_KEY;
    20e8:	8f ef       	ldi	r24, 0xFF	; 255
    20ea:	8b 83       	std	Y+3, r24	; 0x03

	static u8 KPD_Arr[KPD_NUM_ROWS][KPD_NUM_COLS] = KPD_ARR_VAL;

	static u8 KPD_COL_Arr[KPD_NUM_COLS] = {KPD_COL0_PIN , KPD_COL1_PIN ,  KPD_COL2_PIN , KPD_COL3_PIN};
	static u8 KPD_ROW_Arr[KPD_NUM_ROWS] = {KPD_ROW0_PIN ,KPD_ROW1_PIN ,KPD_ROW2_PIN  ,KPD_ROW3_PIN};
	for(col=0 ; col<KPD_NUM_COLS ; col++)
    20ec:	19 82       	std	Y+1, r1	; 0x01
    20ee:	5e c0       	rjmp	.+188    	; 0x21ac <KPD_GetKeyPressed+0xd2>
	{
		/*Activate Current Col*/
		DIO_vidSetPinVal(KPD_PORT,KPD_COL_Arr[col],DIO_LOW);
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	88 2f       	mov	r24, r24
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	fc 01       	movw	r30, r24
    20f8:	e2 5c       	subi	r30, 0xC2	; 194
    20fa:	fe 4f       	sbci	r31, 0xFE	; 254
    20fc:	90 81       	ld	r25, Z
    20fe:	82 e0       	ldi	r24, 0x02	; 2
    2100:	69 2f       	mov	r22, r25
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>

		for(row= 0 ; row < KPD_NUM_ROWS ; row++)
    2108:	1a 82       	std	Y+2, r1	; 0x02
    210a:	3d c0       	rjmp	.+122    	; 0x2186 <KPD_GetKeyPressed+0xac>
		{
			/*Read Current Row*/
			DIO_u8GetPinVal(KPD_PORT,KPD_ROW_Arr[row] , &Local_State) ;
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	88 2f       	mov	r24, r24
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	fc 01       	movw	r30, r24
    2114:	e6 5c       	subi	r30, 0xC6	; 198
    2116:	fe 4f       	sbci	r31, 0xFE	; 254
    2118:	90 81       	ld	r25, Z
    211a:	9e 01       	movw	r18, r28
    211c:	2c 5f       	subi	r18, 0xFC	; 252
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	69 2f       	mov	r22, r25
    2124:	a9 01       	movw	r20, r18
    2126:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <DIO_u8GetPinVal>

			if (DIO_LOW == Local_State)
    212a:	8c 81       	ldd	r24, Y+4	; 0x04
    212c:	88 23       	and	r24, r24
    212e:	41 f5       	brne	.+80     	; 0x2180 <KPD_GetKeyPressed+0xa6>
			{
				pressed_key = KPD_Arr[row][col];
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	48 2f       	mov	r20, r24
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	ca 01       	movw	r24, r20
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	82 0f       	add	r24, r18
    2148:	93 1f       	adc	r25, r19
    214a:	fc 01       	movw	r30, r24
    214c:	ee 5b       	subi	r30, 0xBE	; 190
    214e:	fe 4f       	sbci	r31, 0xFE	; 254
    2150:	80 81       	ld	r24, Z
    2152:	8b 83       	std	Y+3, r24	; 0x03
    2154:	0f c0       	rjmp	.+30     	; 0x2174 <KPD_GetKeyPressed+0x9a>

				/*Polling if he still push button read it again*/
				while(DIO_LOW == Local_State)
				{
					DIO_u8GetPinVal(KPD_PORT,KPD_ROW_Arr[row] , &Local_State);
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	88 2f       	mov	r24, r24
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	fc 01       	movw	r30, r24
    215e:	e6 5c       	subi	r30, 0xC6	; 198
    2160:	fe 4f       	sbci	r31, 0xFE	; 254
    2162:	90 81       	ld	r25, Z
    2164:	9e 01       	movw	r18, r28
    2166:	2c 5f       	subi	r18, 0xFC	; 252
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	69 2f       	mov	r22, r25
    216e:	a9 01       	movw	r20, r18
    2170:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <DIO_u8GetPinVal>
			if (DIO_LOW == Local_State)
			{
				pressed_key = KPD_Arr[row][col];

				/*Polling if he still push button read it again*/
				while(DIO_LOW == Local_State)
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	88 23       	and	r24, r24
    2178:	71 f3       	breq	.-36     	; 0x2156 <KPD_GetKeyPressed+0x7c>
				{
					DIO_u8GetPinVal(KPD_PORT,KPD_ROW_Arr[row] , &Local_State);
				}
				return pressed_key;
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	1c c0       	rjmp	.+56     	; 0x21b8 <KPD_GetKeyPressed+0xde>
	for(col=0 ; col<KPD_NUM_COLS ; col++)
	{
		/*Activate Current Col*/
		DIO_vidSetPinVal(KPD_PORT,KPD_COL_Arr[col],DIO_LOW);

		for(row= 0 ; row < KPD_NUM_ROWS ; row++)
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	8f 5f       	subi	r24, 0xFF	; 255
    2184:	8a 83       	std	Y+2, r24	; 0x02
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	84 30       	cpi	r24, 0x04	; 4
    218a:	08 f4       	brcc	.+2      	; 0x218e <KPD_GetKeyPressed+0xb4>
    218c:	bf cf       	rjmp	.-130    	; 0x210c <KPD_GetKeyPressed+0x32>
				return pressed_key;

			}
		}
		/*Deactivate Current Col*/
		DIO_vidSetPinVal(KPD_PORT,KPD_COL_Arr[col],DIO_HIGH);
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	fc 01       	movw	r30, r24
    2196:	e2 5c       	subi	r30, 0xC2	; 194
    2198:	fe 4f       	sbci	r31, 0xFE	; 254
    219a:	90 81       	ld	r25, Z
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	69 2f       	mov	r22, r25
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>

	static u8 KPD_Arr[KPD_NUM_ROWS][KPD_NUM_COLS] = KPD_ARR_VAL;

	static u8 KPD_COL_Arr[KPD_NUM_COLS] = {KPD_COL0_PIN , KPD_COL1_PIN ,  KPD_COL2_PIN , KPD_COL3_PIN};
	static u8 KPD_ROW_Arr[KPD_NUM_ROWS] = {KPD_ROW0_PIN ,KPD_ROW1_PIN ,KPD_ROW2_PIN  ,KPD_ROW3_PIN};
	for(col=0 ; col<KPD_NUM_COLS ; col++)
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	8f 5f       	subi	r24, 0xFF	; 255
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	84 30       	cpi	r24, 0x04	; 4
    21b0:	08 f4       	brcc	.+2      	; 0x21b4 <KPD_GetKeyPressed+0xda>
    21b2:	9e cf       	rjmp	.-196    	; 0x20f0 <KPD_GetKeyPressed+0x16>
			}
		}
		/*Deactivate Current Col*/
		DIO_vidSetPinVal(KPD_PORT,KPD_COL_Arr[col],DIO_HIGH);
	}
	return pressed_key;
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	8d 83       	std	Y+5, r24	; 0x05
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <Timer0_FastPWM_Mode>:
#include "PWM_interface.h"
#include "PWM_CFG.h"
#include "PWM_private.h"

void Timer0_FastPWM_Mode()
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62

	/*Select FPWM*/
	SET_BIT(WGM00 , TCCR0);
    21d2:	a3 e5       	ldi	r26, 0x53	; 83
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e3 e5       	ldi	r30, 0x53	; 83
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	80 64       	ori	r24, 0x40	; 64
    21de:	8c 93       	st	X, r24
	SET_BIT(WGM01 , TCCR0);
    21e0:	a3 e5       	ldi	r26, 0x53	; 83
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e3 e5       	ldi	r30, 0x53	; 83
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	88 60       	ori	r24, 0x08	; 8
    21ec:	8c 93       	st	X, r24


	/*Select Non Interval Mode*/
	SET_BIT( COM01 , TCCR0);
    21ee:	a3 e5       	ldi	r26, 0x53	; 83
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e3 e5       	ldi	r30, 0x53	; 83
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	80 62       	ori	r24, 0x20	; 32
    21fa:	8c 93       	st	X, r24
	CLR_BIT( COM00 , TCCR0 );
    21fc:	a3 e5       	ldi	r26, 0x53	; 83
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e3 e5       	ldi	r30, 0x53	; 83
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	8f 7e       	andi	r24, 0xEF	; 239
    2208:	8c 93       	st	X, r24

#if Prescaller_Select == Divison_By_8  /*Select Prescaller 8*/
	TCCR0&=Divison_Factor_Mask;
    220a:	a3 e5       	ldi	r26, 0x53	; 83
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e3 e5       	ldi	r30, 0x53	; 83
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	88 7f       	andi	r24, 0xF8	; 248
    2216:	8c 93       	st	X, r24
	TCCR0|=Prescaller_Select;
    2218:	a3 e5       	ldi	r26, 0x53	; 83
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e3 e5       	ldi	r30, 0x53	; 83
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	82 60       	ori	r24, 0x02	; 2
    2224:	8c 93       	st	X, r24
	TCCR0&=Divison_Factor_Mask;
	TCCR0|=Prescaller_Select;
#endif


}
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <TIMR0_VidSetCompMatchVal>:
void TIMR0_VidSetCompMatchVal(u8 Copy_u8CompVal)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	0f 92       	push	r0
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CompVal;
    2238:	ec e5       	ldi	r30, 0x5C	; 92
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	80 83       	st	Z, r24
}
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <Timer1_FastPWM_Mode>:


void Timer1_FastPWM_Mode()
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
	/*Select WaveForm Mode FPWM*/
	SET_BIT(WGM13 , TCCR1B);
    2250:	ae e4       	ldi	r26, 0x4E	; 78
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ee e4       	ldi	r30, 0x4E	; 78
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 61       	ori	r24, 0x10	; 16
    225c:	8c 93       	st	X, r24
	SET_BIT(WGM12 , TCCR1B);
    225e:	ae e4       	ldi	r26, 0x4E	; 78
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ee e4       	ldi	r30, 0x4E	; 78
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	88 60       	ori	r24, 0x08	; 8
    226a:	8c 93       	st	X, r24
	SET_BIT(WGM11 , TCCR1A);
    226c:	af e4       	ldi	r26, 0x4F	; 79
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ef e4       	ldi	r30, 0x4F	; 79
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	82 60       	ori	r24, 0x02	; 2
    2278:	8c 93       	st	X, r24
	CLR_BIT(WGM10 , TCCR1A);
    227a:	af e4       	ldi	r26, 0x4F	; 79
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	ef e4       	ldi	r30, 0x4F	; 79
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	8e 7f       	andi	r24, 0xFE	; 254
    2286:	8c 93       	st	X, r24


	/*Select FPWM OCA Non Inverted Mode*/
	SET_BIT(COM1A1 , TCCR1A) ;
    2288:	af e4       	ldi	r26, 0x4F	; 79
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ef e4       	ldi	r30, 0x4F	; 79
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	80 68       	ori	r24, 0x80	; 128
    2294:	8c 93       	st	X, r24
	CLR_BIT(COM1A0 , TCCR1A) ;
    2296:	af e4       	ldi	r26, 0x4F	; 79
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ef e4       	ldi	r30, 0x4F	; 79
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	8f 7b       	andi	r24, 0xBF	; 191
    22a2:	8c 93       	st	X, r24

	/*Select FPWM OCB Non Inverted Mode*/
	SET_BIT(COM1B1 , TCCR1A) ;
    22a4:	af e4       	ldi	r26, 0x4F	; 79
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ef e4       	ldi	r30, 0x4F	; 79
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	80 62       	ori	r24, 0x20	; 32
    22b0:	8c 93       	st	X, r24
	CLR_BIT(COM1B0 , TCCR1A) ;
    22b2:	af e4       	ldi	r26, 0x4F	; 79
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ef e4       	ldi	r30, 0x4F	; 79
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	8f 7e       	andi	r24, 0xEF	; 239
    22be:	8c 93       	st	X, r24


	/*Prescaller*/
#if Prescaller_Select == Divison_By_8
	TCCR1B &=Divison_Factor_Mask ;
    22c0:	ae e4       	ldi	r26, 0x4E	; 78
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	ee e4       	ldi	r30, 0x4E	; 78
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	88 7f       	andi	r24, 0xF8	; 248
    22cc:	8c 93       	st	X, r24
	TCCR1B |=Prescaller_Select ;
    22ce:	ae e4       	ldi	r26, 0x4E	; 78
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	ee e4       	ldi	r30, 0x4E	; 78
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	82 60       	ori	r24, 0x02	; 2
    22da:	8c 93       	st	X, r24
#elif Prescaller_Select == Divison_By_64
	TCCR1B &=Divison_Factor_Mask ;
	TCCR1B |=Prescaller_Select ;
#endif
}
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <SetTimer1_ICRval>:

void SetTimer1_ICRval(u16 Copy_ICRVal)
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <SetTimer1_ICRval+0x6>
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
	ICR1L = Copy_ICRVal ;
    22f0:	e6 e4       	ldi	r30, 0x46	; 70
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
}
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <TIMR1_VidSetCompMatchOCAVal>:

void TIMR1_VidSetCompMatchOCAVal(u16 Copy_u16CompVal)
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <TIMR1_VidSetCompMatchOCAVal+0x6>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL = Copy_u16CompVal;
    2314:	ea e4       	ldi	r30, 0x4A	; 74
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <TIMR1_VidSetCompMatchOCBVal>:

void TIMR1_VidSetCompMatchOCBVal(u16 Copy_u16CompVal)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	00 d0       	rcall	.+0      	; 0x2330 <TIMR1_VidSetCompMatchOCBVal+0x6>
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL = Copy_u16CompVal;
    2338:	e8 e4       	ldi	r30, 0x48	; 72
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	80 83       	st	Z, r24
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <TWI_VoidMasterInit>:
#include "TWI_Ptivate.h"
#include "TWI_CFG.h"
#include "TWI_Interface.h"

void TWI_VoidMasterInit (u8 Copy_u8SlaveAddress)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	0f 92       	push	r0
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	89 83       	std	Y+1, r24	; 0x01
	/*Set CLock Freq to 400kbps*/
	TWDR = 2 ;
    235a:	e3 e2       	ldi	r30, 0x23	; 35
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	80 83       	st	Z, r24

	CLR_BIT(TWPS0 , TWSR);
    2362:	a1 e2       	ldi	r26, 0x21	; 33
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e1 e2       	ldi	r30, 0x21	; 33
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	8e 7f       	andi	r24, 0xFE	; 254
    236e:	8c 93       	st	X, r24
	CLR_BIT(TWPS1 , TWSR);
    2370:	a1 e2       	ldi	r26, 0x21	; 33
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e1 e2       	ldi	r30, 0x21	; 33
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8d 7f       	andi	r24, 0xFD	; 253
    237c:	8c 93       	st	X, r24

	/*Initialize The Node Address*/
	if (Copy_u8SlaveAddress != 0)
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	88 23       	and	r24, r24
    2382:	29 f0       	breq	.+10     	; 0x238e <TWI_VoidMasterInit+0x40>
	{
		TWAR = Copy_u8SlaveAddress << 1;
    2384:	e2 e2       	ldi	r30, 0x22	; 34
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	88 0f       	add	r24, r24
    238c:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWEN , TWCR);
    238e:	a6 e5       	ldi	r26, 0x56	; 86
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e6 e5       	ldi	r30, 0x56	; 86
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	84 60       	ori	r24, 0x04	; 4
    239a:	8c 93       	st	X, r24
}
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <TWI_VoidSlaveInit>:
void TWI_VoidSlaveInit (u8 Copy_u8SlaveAddress)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	0f 92       	push	r0
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
	/*Initialize The Node Address*/
	TWAR = Copy_u8SlaveAddress << 1;
    23b0:	e2 e2       	ldi	r30, 0x22	; 34
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	88 0f       	add	r24, r24
    23b8:	80 83       	st	Z, r24

	/*Enable TWI*/
	SET_BIT(TWEN , TWCR);
    23ba:	a6 e5       	ldi	r26, 0x56	; 86
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e6 e5       	ldi	r30, 0x56	; 86
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	84 60       	ori	r24, 0x04	; 4
    23c6:	8c 93       	st	X, r24

}
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <TWI_SendStatrtCondition>:
TWI_ErrStatus TWI_SendStatrtCondition (void)
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	0f 92       	push	r0
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    23da:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition*/
	SET_BIT(TWSTA , TWCR);
    23dc:	a6 e5       	ldi	r26, 0x56	; 86
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e6 e5       	ldi	r30, 0x56	; 86
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	80 62       	ori	r24, 0x20	; 32
    23e8:	8c 93       	st	X, r24

	/*Clear The Interrupt flag To Start Previous Operation*/
	SET_BIT(TWINT , TWCR);
    23ea:	a6 e5       	ldi	r26, 0x56	; 86
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e6 e5       	ldi	r30, 0x56	; 86
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	80 68       	ori	r24, 0x80	; 128
    23f6:	8c 93       	st	X, r24

	/*Wait Until Interrupt Flag Is raised Again and Previous operation Is Complete*/
	while (GET_BIT(TWINT , TWCR) != 0);
    23f8:	e6 e5       	ldi	r30, 0x56	; 86
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	88 23       	and	r24, r24
    2400:	dc f3       	brlt	.-10     	; 0x23f8 <TWI_SendStatrtCondition+0x28>

	if ((TWSR & 0xf8) != 0x08)
    2402:	e1 e2       	ldi	r30, 0x21	; 33
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	88 7f       	andi	r24, 0xF8	; 248
    240e:	90 70       	andi	r25, 0x00	; 0
    2410:	88 30       	cpi	r24, 0x08	; 8
    2412:	91 05       	cpc	r25, r1
    2414:	11 f0       	breq	.+4      	; 0x241a <TWI_SendStatrtCondition+0x4a>
	{
		Local_ErrorStatus = StartConditError ;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	89 83       	std	Y+1, r24	; 0x01
		/*Do No Thing*/
	}



	return Local_ErrorStatus ;
    241a:	89 81       	ldd	r24, Y+1	; 0x01
}
    241c:	0f 90       	pop	r0
    241e:	cf 91       	pop	r28
    2420:	df 91       	pop	r29
    2422:	08 95       	ret

00002424 <TWI_SendRepeatedStart>:
TWI_ErrStatus TWI_SendRepeatedStart (void)
{
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	0f 92       	push	r0
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    242e:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition*/
	SET_BIT(TWSTA , TWCR);
    2430:	a6 e5       	ldi	r26, 0x56	; 86
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e6 e5       	ldi	r30, 0x56	; 86
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 62       	ori	r24, 0x20	; 32
    243c:	8c 93       	st	X, r24

	/*Clear The Interrupt flag To Start Previous Operation*/
	SET_BIT(TWINT , TWCR);
    243e:	a6 e5       	ldi	r26, 0x56	; 86
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e6 e5       	ldi	r30, 0x56	; 86
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	80 68       	ori	r24, 0x80	; 128
    244a:	8c 93       	st	X, r24

	/*Wait Until Interrupt Flag Is raised Again and Previous operation Is Complete*/
	while (GET_BIT(TWINT , TWCR) != 0);
    244c:	e6 e5       	ldi	r30, 0x56	; 86
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	88 23       	and	r24, r24
    2454:	dc f3       	brlt	.-10     	; 0x244c <TWI_SendRepeatedStart+0x28>

	if ((TWSR & 0xf8) != 0x10)
    2456:	e1 e2       	ldi	r30, 0x21	; 33
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	88 7f       	andi	r24, 0xF8	; 248
    2462:	90 70       	andi	r25, 0x00	; 0
    2464:	80 31       	cpi	r24, 0x10	; 16
    2466:	91 05       	cpc	r25, r1
    2468:	11 f0       	breq	.+4      	; 0x246e <TWI_SendRepeatedStart+0x4a>
	{
		Local_ErrorStatus = RepeatedStartError ;
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do No Thing*/
	}

	return Local_ErrorStatus ;
    246e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2470:	0f 90       	pop	r0
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <TWI_SendSlaveAddressWithWrite>:
TWI_ErrStatus TWI_SendSlaveAddressWithWrite (u8 Copy_u8SlaveAddress)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	00 d0       	rcall	.+0      	; 0x247e <TWI_SendSlaveAddressWithWrite+0x6>
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    2484:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The Start Condition bit*/
	CLR_BIT(TWSTA , TWCR);
    2486:	a6 e5       	ldi	r26, 0x56	; 86
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	e6 e5       	ldi	r30, 0x56	; 86
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	8f 7d       	andi	r24, 0xDF	; 223
    2492:	8c 93       	st	X, r24

	/*Set Slave Address In the 7 MSB*/
	TWDR = Copy_u8SlaveAddress << 1 ;
    2494:	e3 e2       	ldi	r30, 0x23	; 35
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	88 0f       	add	r24, r24
    249c:	80 83       	st	Z, r24

	/*For Write Request*/
	CLR_BIT(0,TWDR);
    249e:	a3 e2       	ldi	r26, 0x23	; 35
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e3 e2       	ldi	r30, 0x23	; 35
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	8e 7f       	andi	r24, 0xFE	; 254
    24aa:	8c 93       	st	X, r24

	if ((TWSR & 0xf8) != 0x18)
    24ac:	e1 e2       	ldi	r30, 0x21	; 33
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	88 2f       	mov	r24, r24
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	88 7f       	andi	r24, 0xF8	; 248
    24b8:	90 70       	andi	r25, 0x00	; 0
    24ba:	88 31       	cpi	r24, 0x18	; 24
    24bc:	91 05       	cpc	r25, r1
    24be:	11 f0       	breq	.+4      	; 0x24c4 <TWI_SendSlaveAddressWithWrite+0x4c>
	{
		Local_ErrorStatus = SendSlaveAddressWithWriteErr ;
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	89 83       	std	Y+1, r24	; 0x01
		/*Do No Thing*/
	}



	return Local_ErrorStatus ;
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <TWI_SendSlaveAddressWithRead>:
TWI_ErrStatus TWI_SendSlaveAddressWithRead (u8 Copy_u8SlaveAddress)
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <TWI_SendSlaveAddressWithRead+0x6>
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    24dc:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The Start Condition bit*/
	CLR_BIT(TWSTA , TWCR);
    24de:	a6 e5       	ldi	r26, 0x56	; 86
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e6 e5       	ldi	r30, 0x56	; 86
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	8f 7d       	andi	r24, 0xDF	; 223
    24ea:	8c 93       	st	X, r24

	/*Set Slave Address In the 7 MSB*/
	TWDR = Copy_u8SlaveAddress << 1 ;
    24ec:	e3 e2       	ldi	r30, 0x23	; 35
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	88 0f       	add	r24, r24
    24f4:	80 83       	st	Z, r24

	/*For Read Request*/
	SET_BIT(0,TWDR);
    24f6:	a3 e2       	ldi	r26, 0x23	; 35
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e3 e2       	ldi	r30, 0x23	; 35
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	81 60       	ori	r24, 0x01	; 1
    2502:	8c 93       	st	X, r24

	if ((TWSR & 0xf8) != 0x40)
    2504:	e1 e2       	ldi	r30, 0x21	; 33
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	88 7f       	andi	r24, 0xF8	; 248
    2510:	90 70       	andi	r25, 0x00	; 0
    2512:	80 34       	cpi	r24, 0x40	; 64
    2514:	91 05       	cpc	r25, r1
    2516:	11 f0       	breq	.+4      	; 0x251c <TWI_SendSlaveAddressWithRead+0x4c>
	{
		Local_ErrorStatus = SendSlaveAddressWithReadErr ;
    2518:	84 e0       	ldi	r24, 0x04	; 4
    251a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do No Thing*/
	}
	return Local_ErrorStatus ;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <TWI_MasterWriteDataByte>:
TWI_ErrStatus TWI_MasterWriteDataByte (u8 Copy_u8DataByte)
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	00 d0       	rcall	.+0      	; 0x252e <TWI_MasterWriteDataByte+0x6>
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    2534:	19 82       	std	Y+1, r1	; 0x01

	/*Write The Data Byte*/
	TWDR = Copy_u8DataByte ;
    2536:	e3 e2       	ldi	r30, 0x23	; 35
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag To Start The Previous operation*/
	SET_BIT(TWINT , TWCR);
    253e:	a6 e5       	ldi	r26, 0x56	; 86
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e6 e5       	ldi	r30, 0x56	; 86
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	80 68       	ori	r24, 0x80	; 128
    254a:	8c 93       	st	X, r24

	/*Wait Until Interrupt Flag Is raised Again and Previous operation Is Complete*/
	while (GET_BIT(TWINT , TWCR) != 0);
    254c:	e6 e5       	ldi	r30, 0x56	; 86
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	88 23       	and	r24, r24
    2554:	dc f3       	brlt	.-10     	; 0x254c <TWI_MasterWriteDataByte+0x24>

	if ((TWSR & 0xf8) != 0x28)
    2556:	e1 e2       	ldi	r30, 0x21	; 33
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	88 7f       	andi	r24, 0xF8	; 248
    2562:	90 70       	andi	r25, 0x00	; 0
    2564:	88 32       	cpi	r24, 0x28	; 40
    2566:	91 05       	cpc	r25, r1
    2568:	11 f0       	breq	.+4      	; 0x256e <TWI_MasterWriteDataByte+0x46>
	{
		Local_ErrorStatus = WriteDataByteErr ;
    256a:	85 e0       	ldi	r24, 0x05	; 5
    256c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do No Thing*/
	}
	return Local_ErrorStatus ;
    256e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <TWI_MasterReadDataByte>:
TWI_ErrStatus TWI_MasterReadDataByte (u8 *Copy_u8DataByte)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <TWI_MasterReadDataByte+0x6>
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	9b 83       	std	Y+3, r25	; 0x03
    2588:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    258a:	19 82       	std	Y+1, r1	; 0x01

	/*Enable Master Generating ACK Bit*/
	SET_BIT(TWEA , TWCR);
    258c:	a6 e5       	ldi	r26, 0x56	; 86
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e6 e5       	ldi	r30, 0x56	; 86
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	80 64       	ori	r24, 0x40	; 64
    2598:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag To Start The Previous operation*/
	SET_BIT(TWINT , TWCR);
    259a:	a6 e5       	ldi	r26, 0x56	; 86
    259c:	b0 e0       	ldi	r27, 0x00	; 0
    259e:	e6 e5       	ldi	r30, 0x56	; 86
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	80 68       	ori	r24, 0x80	; 128
    25a6:	8c 93       	st	X, r24

	/*Wait Until Interrupt Flag Is raised Again and Previous operation Is Complete*/
	while (GET_BIT(TWINT , TWCR) != 0);
    25a8:	e6 e5       	ldi	r30, 0x56	; 86
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	88 23       	and	r24, r24
    25b0:	dc f3       	brlt	.-10     	; 0x25a8 <TWI_MasterReadDataByte+0x2e>

	if ((TWSR & 0xf8) != 0x50)
    25b2:	e1 e2       	ldi	r30, 0x21	; 33
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	88 2f       	mov	r24, r24
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	88 7f       	andi	r24, 0xF8	; 248
    25be:	90 70       	andi	r25, 0x00	; 0
    25c0:	80 35       	cpi	r24, 0x50	; 80
    25c2:	91 05       	cpc	r25, r1
    25c4:	19 f0       	breq	.+6      	; 0x25cc <TWI_MasterReadDataByte+0x52>
	{
		Local_ErrorStatus = ReadDataByteErr ;
    25c6:	86 e0       	ldi	r24, 0x06	; 6
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	06 c0       	rjmp	.+12     	; 0x25d8 <TWI_MasterReadDataByte+0x5e>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_u8DataByte = TWDR ;
    25cc:	e3 e2       	ldi	r30, 0x23	; 35
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	ea 81       	ldd	r30, Y+2	; 0x02
    25d4:	fb 81       	ldd	r31, Y+3	; 0x03
    25d6:	80 83       	st	Z, r24
	}
	return Local_ErrorStatus ;
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <TWI_SendStopCondition>:
void TWI_SendStopCondition (void)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
	/*Generate Stop Condition On the Bus*/
	SET_BIT(TWSTO , TWCR);
    25ee:	a6 e5       	ldi	r26, 0x56	; 86
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e6 e5       	ldi	r30, 0x56	; 86
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	80 61       	ori	r24, 0x10	; 16
    25fa:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag To Start The Previous operation*/
	SET_BIT(TWINT , TWCR);
    25fc:	a6 e5       	ldi	r26, 0x56	; 86
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e6 e5       	ldi	r30, 0x56	; 86
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	80 68       	ori	r24, 0x80	; 128
    2608:	8c 93       	st	X, r24
}
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <Temp_App_Init>:


Chain_t chain = {arrOfChainChannel , 2 , &Represent_Temperature , arrOfResult} ;

void Temp_App_Init(void)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Port As Output*/
	DIO_vidSetPortDir(DIO_PORTD , 0b11111111);
    2618:	83 e0       	ldi	r24, 0x03	; 3
    261a:	6f ef       	ldi	r22, 0xFF	; 255
    261c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_vidSetPortDir>
	/*Set Control Port As Output*/
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN5 , DIO_OUTPUT);
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	65 e0       	ldi	r22, 0x05	; 5
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN6 , DIO_OUTPUT);
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	66 e0       	ldi	r22, 0x06	; 6
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN7 , DIO_OUTPUT);
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	67 e0       	ldi	r22, 0x07	; 7
    2638:	41 e0       	ldi	r20, 0x01	; 1
    263a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>

	/*Make Col As output and Rows as Input*/
	DIO_vidSetPortDir(DIO_PORTC , 0b00001111);
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	6f e0       	ldi	r22, 0x0F	; 15
    2642:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_vidSetPortDir>

	/*Initial Value for Keypad*/
	DIO_vidSetPortVal(DIO_PORTC , 0b11111111);
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	6f ef       	ldi	r22, 0xFF	; 255
    264a:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <DIO_vidSetPortVal>

	/*Make PINA0 for LM35 AS Input*/
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN0 , DIO_INPUT);
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>

	/*Make PORTA Direction as Output For LEDs*/
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN1 , DIO_OUTPUT);
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	61 e0       	ldi	r22, 0x01	; 1
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN2 , DIO_OUTPUT);
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	62 e0       	ldi	r22, 0x02	; 2
    2666:	41 e0       	ldi	r20, 0x01	; 1
    2668:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN3 , DIO_OUTPUT);
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	63 e0       	ldi	r22, 0x03	; 3
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>

	/*Set OCR PIN As OUTPUT*/
	DIO_vidSetPinDir(DIO_PORTB , DIO_PIN3 , DIO_OUTPUT);
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	63 e0       	ldi	r22, 0x03	; 3
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>

	/*Set PORTA PIN4 for Buzzer as OUTPUT*/
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN4 , DIO_OUTPUT);
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	64 e0       	ldi	r22, 0x04	; 4
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>

	/*Set PORTB PIN2 for Button As Input for reset*/
	DIO_vidSetPinDir(DIO_PORTB , DIO_PIN2 , DIO_INPUT);
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	62 e0       	ldi	r22, 0x02	; 2
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_vidSetPinDir>

	/*Activate PULL UP*/
	DIO_vidSetPinVal(DIO_PORTB , DIO_PIN2 , DIO_HIGH);
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	62 e0       	ldi	r22, 0x02	; 2
    2698:	41 e0       	ldi	r20, 0x01	; 1
    269a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>

	/*Initialize LCD*/
	CLCD_voidInit();
    269e:	0e 94 b3 09 	call	0x1366	; 0x1366 <CLCD_voidInit>

	/*Initialize ADC*/
	ADC_vidInit();
    26a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_vidInit>

	/*INT2 Call Back Function*/
	EXTI_INT2SetCallBack(&Reset_System_INT2_Fun);
    26a6:	84 e9       	ldi	r24, 0x94	; 148
    26a8:	92 e2       	ldi	r25, 0x22	; 34
    26aa:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <EXTI_INT2SetCallBack>

	/*Initialize Timer0 Fast PWM*/
	Timer0_FastPWM_Mode();
    26ae:	0e 94 e5 10 	call	0x21ca	; 0x21ca <Timer0_FastPWM_Mode>

	/*Initialize Interrupt2*/
	EXTI_Int2_Inti();
    26b2:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <EXTI_Int2_Inti>

	/*Enable Global Interrupt*/
	Enable_Global_Interrupt();
    26b6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Enable_Global_Interrupt>
}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <App_Start_Message>:

void App_Start_Message(void)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	e8 97       	sbiw	r28, 0x38	; 56
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
	CLCD_vidSendString("Welcome On LCD") ;
    26d4:	80 e6       	ldi	r24, 0x60	; 96
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	aa ef       	ldi	r26, 0xFA	; 250
    26e2:	b4 e4       	ldi	r27, 0x44	; 68
    26e4:	8d ab       	std	Y+53, r24	; 0x35
    26e6:	9e ab       	std	Y+54, r25	; 0x36
    26e8:	af ab       	std	Y+55, r26	; 0x37
    26ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ec:	6d a9       	ldd	r22, Y+53	; 0x35
    26ee:	7e a9       	ldd	r23, Y+54	; 0x36
    26f0:	8f a9       	ldd	r24, Y+55	; 0x37
    26f2:	98 ad       	ldd	r25, Y+56	; 0x38
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a ef       	ldi	r20, 0xFA	; 250
    26fa:	54 e4       	ldi	r21, 0x44	; 68
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	89 ab       	std	Y+49, r24	; 0x31
    2706:	9a ab       	std	Y+50, r25	; 0x32
    2708:	ab ab       	std	Y+51, r26	; 0x33
    270a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    270c:	69 a9       	ldd	r22, Y+49	; 0x31
    270e:	7a a9       	ldd	r23, Y+50	; 0x32
    2710:	8b a9       	ldd	r24, Y+51	; 0x33
    2712:	9c a9       	ldd	r25, Y+52	; 0x34
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	2c f4       	brge	.+10     	; 0x272e <App_Start_Message+0x6e>
		__ticks = 1;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	98 ab       	std	Y+48, r25	; 0x30
    272a:	8f a7       	std	Y+47, r24	; 0x2f
    272c:	3f c0       	rjmp	.+126    	; 0x27ac <App_Start_Message+0xec>
	else if (__tmp > 65535)
    272e:	69 a9       	ldd	r22, Y+49	; 0x31
    2730:	7a a9       	ldd	r23, Y+50	; 0x32
    2732:	8b a9       	ldd	r24, Y+51	; 0x33
    2734:	9c a9       	ldd	r25, Y+52	; 0x34
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	3f ef       	ldi	r19, 0xFF	; 255
    273a:	4f e7       	ldi	r20, 0x7F	; 127
    273c:	57 e4       	ldi	r21, 0x47	; 71
    273e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2742:	18 16       	cp	r1, r24
    2744:	4c f5       	brge	.+82     	; 0x2798 <App_Start_Message+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2746:	6d a9       	ldd	r22, Y+53	; 0x35
    2748:	7e a9       	ldd	r23, Y+54	; 0x36
    274a:	8f a9       	ldd	r24, Y+55	; 0x37
    274c:	98 ad       	ldd	r25, Y+56	; 0x38
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e2       	ldi	r20, 0x20	; 32
    2754:	51 e4       	ldi	r21, 0x41	; 65
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	98 ab       	std	Y+48, r25	; 0x30
    276c:	8f a7       	std	Y+47, r24	; 0x2f
    276e:	0f c0       	rjmp	.+30     	; 0x278e <App_Start_Message+0xce>
    2770:	88 ec       	ldi	r24, 0xC8	; 200
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9e a7       	std	Y+46, r25	; 0x2e
    2776:	8d a7       	std	Y+45, r24	; 0x2d
    2778:	8d a5       	ldd	r24, Y+45	; 0x2d
    277a:	9e a5       	ldd	r25, Y+46	; 0x2e
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <App_Start_Message+0xbc>
    2780:	9e a7       	std	Y+46, r25	; 0x2e
    2782:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2784:	8f a5       	ldd	r24, Y+47	; 0x2f
    2786:	98 a9       	ldd	r25, Y+48	; 0x30
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	98 ab       	std	Y+48, r25	; 0x30
    278c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2790:	98 a9       	ldd	r25, Y+48	; 0x30
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	69 f7       	brne	.-38     	; 0x2770 <App_Start_Message+0xb0>
    2796:	14 c0       	rjmp	.+40     	; 0x27c0 <App_Start_Message+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2798:	69 a9       	ldd	r22, Y+49	; 0x31
    279a:	7a a9       	ldd	r23, Y+50	; 0x32
    279c:	8b a9       	ldd	r24, Y+51	; 0x33
    279e:	9c a9       	ldd	r25, Y+52	; 0x34
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	98 ab       	std	Y+48, r25	; 0x30
    27aa:	8f a7       	std	Y+47, r24	; 0x2f
    27ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ae:	98 a9       	ldd	r25, Y+48	; 0x30
    27b0:	9c a7       	std	Y+44, r25	; 0x2c
    27b2:	8b a7       	std	Y+43, r24	; 0x2b
    27b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    27b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <App_Start_Message+0xf8>
    27bc:	9c a7       	std	Y+44, r25	; 0x2c
    27be:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2000);
	CLCD_voidSendCommand(1);
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	aa ef       	ldi	r26, 0xFA	; 250
    27cc:	b4 e4       	ldi	r27, 0x44	; 68
    27ce:	8f a3       	std	Y+39, r24	; 0x27
    27d0:	98 a7       	std	Y+40, r25	; 0x28
    27d2:	a9 a7       	std	Y+41, r26	; 0x29
    27d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d6:	6f a1       	ldd	r22, Y+39	; 0x27
    27d8:	78 a5       	ldd	r23, Y+40	; 0x28
    27da:	89 a5       	ldd	r24, Y+41	; 0x29
    27dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	4a ef       	ldi	r20, 0xFA	; 250
    27e4:	54 e4       	ldi	r21, 0x44	; 68
    27e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	8b a3       	std	Y+35, r24	; 0x23
    27f0:	9c a3       	std	Y+36, r25	; 0x24
    27f2:	ad a3       	std	Y+37, r26	; 0x25
    27f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27f6:	6b a1       	ldd	r22, Y+35	; 0x23
    27f8:	7c a1       	ldd	r23, Y+36	; 0x24
    27fa:	8d a1       	ldd	r24, Y+37	; 0x25
    27fc:	9e a1       	ldd	r25, Y+38	; 0x26
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e8       	ldi	r20, 0x80	; 128
    2804:	5f e3       	ldi	r21, 0x3F	; 63
    2806:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    280a:	88 23       	and	r24, r24
    280c:	2c f4       	brge	.+10     	; 0x2818 <App_Start_Message+0x158>
		__ticks = 1;
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9a a3       	std	Y+34, r25	; 0x22
    2814:	89 a3       	std	Y+33, r24	; 0x21
    2816:	3f c0       	rjmp	.+126    	; 0x2896 <App_Start_Message+0x1d6>
	else if (__tmp > 65535)
    2818:	6b a1       	ldd	r22, Y+35	; 0x23
    281a:	7c a1       	ldd	r23, Y+36	; 0x24
    281c:	8d a1       	ldd	r24, Y+37	; 0x25
    281e:	9e a1       	ldd	r25, Y+38	; 0x26
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	3f ef       	ldi	r19, 0xFF	; 255
    2824:	4f e7       	ldi	r20, 0x7F	; 127
    2826:	57 e4       	ldi	r21, 0x47	; 71
    2828:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282c:	18 16       	cp	r1, r24
    282e:	4c f5       	brge	.+82     	; 0x2882 <App_Start_Message+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2830:	6f a1       	ldd	r22, Y+39	; 0x27
    2832:	78 a5       	ldd	r23, Y+40	; 0x28
    2834:	89 a5       	ldd	r24, Y+41	; 0x29
    2836:	9a a5       	ldd	r25, Y+42	; 0x2a
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e2       	ldi	r20, 0x20	; 32
    283e:	51 e4       	ldi	r21, 0x41	; 65
    2840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	bc 01       	movw	r22, r24
    284a:	cd 01       	movw	r24, r26
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9a a3       	std	Y+34, r25	; 0x22
    2856:	89 a3       	std	Y+33, r24	; 0x21
    2858:	0f c0       	rjmp	.+30     	; 0x2878 <App_Start_Message+0x1b8>
    285a:	88 ec       	ldi	r24, 0xC8	; 200
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	98 a3       	std	Y+32, r25	; 0x20
    2860:	8f 8f       	std	Y+31, r24	; 0x1f
    2862:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2864:	98 a1       	ldd	r25, Y+32	; 0x20
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <App_Start_Message+0x1a6>
    286a:	98 a3       	std	Y+32, r25	; 0x20
    286c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286e:	89 a1       	ldd	r24, Y+33	; 0x21
    2870:	9a a1       	ldd	r25, Y+34	; 0x22
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	9a a3       	std	Y+34, r25	; 0x22
    2876:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2878:	89 a1       	ldd	r24, Y+33	; 0x21
    287a:	9a a1       	ldd	r25, Y+34	; 0x22
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	69 f7       	brne	.-38     	; 0x285a <App_Start_Message+0x19a>
    2880:	14 c0       	rjmp	.+40     	; 0x28aa <App_Start_Message+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2882:	6b a1       	ldd	r22, Y+35	; 0x23
    2884:	7c a1       	ldd	r23, Y+36	; 0x24
    2886:	8d a1       	ldd	r24, Y+37	; 0x25
    2888:	9e a1       	ldd	r25, Y+38	; 0x26
    288a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	9a a3       	std	Y+34, r25	; 0x22
    2894:	89 a3       	std	Y+33, r24	; 0x21
    2896:	89 a1       	ldd	r24, Y+33	; 0x21
    2898:	9a a1       	ldd	r25, Y+34	; 0x22
    289a:	9e 8f       	std	Y+30, r25	; 0x1e
    289c:	8d 8f       	std	Y+29, r24	; 0x1d
    289e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <App_Start_Message+0x1e2>
    28a6:	9e 8f       	std	Y+30, r25	; 0x1e
    28a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000);
	CLCD_vidSendString("TEMP CTRL SYSTEM") ;
    28aa:	8f e6       	ldi	r24, 0x6F	; 111
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	aa e7       	ldi	r26, 0x7A	; 122
    28b8:	b4 e4       	ldi	r27, 0x44	; 68
    28ba:	89 8f       	std	Y+25, r24	; 0x19
    28bc:	9a 8f       	std	Y+26, r25	; 0x1a
    28be:	ab 8f       	std	Y+27, r26	; 0x1b
    28c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	69 8d       	ldd	r22, Y+25	; 0x19
    28c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4a ef       	ldi	r20, 0xFA	; 250
    28d0:	54 e4       	ldi	r21, 0x44	; 68
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	8d 8b       	std	Y+21, r24	; 0x15
    28dc:	9e 8b       	std	Y+22, r25	; 0x16
    28de:	af 8b       	std	Y+23, r26	; 0x17
    28e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28e2:	6d 89       	ldd	r22, Y+21	; 0x15
    28e4:	7e 89       	ldd	r23, Y+22	; 0x16
    28e6:	8f 89       	ldd	r24, Y+23	; 0x17
    28e8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	2c f4       	brge	.+10     	; 0x2904 <App_Start_Message+0x244>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9c 8b       	std	Y+20, r25	; 0x14
    2900:	8b 8b       	std	Y+19, r24	; 0x13
    2902:	3f c0       	rjmp	.+126    	; 0x2982 <App_Start_Message+0x2c2>
	else if (__tmp > 65535)
    2904:	6d 89       	ldd	r22, Y+21	; 0x15
    2906:	7e 89       	ldd	r23, Y+22	; 0x16
    2908:	8f 89       	ldd	r24, Y+23	; 0x17
    290a:	98 8d       	ldd	r25, Y+24	; 0x18
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	3f ef       	ldi	r19, 0xFF	; 255
    2910:	4f e7       	ldi	r20, 0x7F	; 127
    2912:	57 e4       	ldi	r21, 0x47	; 71
    2914:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2918:	18 16       	cp	r1, r24
    291a:	4c f5       	brge	.+82     	; 0x296e <App_Start_Message+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291c:	69 8d       	ldd	r22, Y+25	; 0x19
    291e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2920:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2922:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9c 8b       	std	Y+20, r25	; 0x14
    2942:	8b 8b       	std	Y+19, r24	; 0x13
    2944:	0f c0       	rjmp	.+30     	; 0x2964 <App_Start_Message+0x2a4>
    2946:	88 ec       	ldi	r24, 0xC8	; 200
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9a 8b       	std	Y+18, r25	; 0x12
    294c:	89 8b       	std	Y+17, r24	; 0x11
    294e:	89 89       	ldd	r24, Y+17	; 0x11
    2950:	9a 89       	ldd	r25, Y+18	; 0x12
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <App_Start_Message+0x292>
    2956:	9a 8b       	std	Y+18, r25	; 0x12
    2958:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295a:	8b 89       	ldd	r24, Y+19	; 0x13
    295c:	9c 89       	ldd	r25, Y+20	; 0x14
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2964:	8b 89       	ldd	r24, Y+19	; 0x13
    2966:	9c 89       	ldd	r25, Y+20	; 0x14
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	69 f7       	brne	.-38     	; 0x2946 <App_Start_Message+0x286>
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <App_Start_Message+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296e:	6d 89       	ldd	r22, Y+21	; 0x15
    2970:	7e 89       	ldd	r23, Y+22	; 0x16
    2972:	8f 89       	ldd	r24, Y+23	; 0x17
    2974:	98 8d       	ldd	r25, Y+24	; 0x18
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9c 8b       	std	Y+20, r25	; 0x14
    2980:	8b 8b       	std	Y+19, r24	; 0x13
    2982:	8b 89       	ldd	r24, Y+19	; 0x13
    2984:	9c 89       	ldd	r25, Y+20	; 0x14
    2986:	98 8b       	std	Y+16, r25	; 0x10
    2988:	8f 87       	std	Y+15, r24	; 0x0f
    298a:	8f 85       	ldd	r24, Y+15	; 0x0f
    298c:	98 89       	ldd	r25, Y+16	; 0x10
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <App_Start_Message+0x2ce>
    2992:	98 8b       	std	Y+16, r25	; 0x10
    2994:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	CLCD_GoToXY(1,0);
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
	CLCD_vidSendString("Eng:Omair Saad");
    299e:	80 e8       	ldi	r24, 0x80	; 128
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e8       	ldi	r25, 0x80	; 128
    29aa:	ab e3       	ldi	r26, 0x3B	; 59
    29ac:	b5 e4       	ldi	r27, 0x45	; 69
    29ae:	8b 87       	std	Y+11, r24	; 0x0b
    29b0:	9c 87       	std	Y+12, r25	; 0x0c
    29b2:	ad 87       	std	Y+13, r26	; 0x0d
    29b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    29bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a ef       	ldi	r20, 0xFA	; 250
    29c4:	54 e4       	ldi	r21, 0x44	; 68
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8f 83       	std	Y+7, r24	; 0x07
    29d0:	98 87       	std	Y+8, r25	; 0x08
    29d2:	a9 87       	std	Y+9, r26	; 0x09
    29d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d6:	6f 81       	ldd	r22, Y+7	; 0x07
    29d8:	78 85       	ldd	r23, Y+8	; 0x08
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <App_Start_Message+0x338>
		__ticks = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	3f c0       	rjmp	.+126    	; 0x2a76 <App_Start_Message+0x3b6>
	else if (__tmp > 65535)
    29f8:	6f 81       	ldd	r22, Y+7	; 0x07
    29fa:	78 85       	ldd	r23, Y+8	; 0x08
    29fc:	89 85       	ldd	r24, Y+9	; 0x09
    29fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	4c f5       	brge	.+82     	; 0x2a62 <App_Start_Message+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e2       	ldi	r20, 0x20	; 32
    2a1e:	51 e4       	ldi	r21, 0x41	; 65
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <App_Start_Message+0x398>
    2a3a:	88 ec       	ldi	r24, 0xC8	; 200
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	9c 81       	ldd	r25, Y+4	; 0x04
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <App_Start_Message+0x386>
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <App_Start_Message+0x37a>
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <App_Start_Message+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	6f 81       	ldd	r22, Y+7	; 0x07
    2a64:	78 85       	ldd	r23, Y+8	; 0x08
    2a66:	89 85       	ldd	r24, Y+9	; 0x09
    2a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9e 83       	std	Y+6, r25	; 0x06
    2a74:	8d 83       	std	Y+5, r24	; 0x05
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	9a 81       	ldd	r25, Y+2	; 0x02
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <App_Start_Message+0x3c2>
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	CLCD_voidSendCommand(1);
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>

}
    2a90:	e8 96       	adiw	r28, 0x38	; 56
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <App_Main_Menu>:

void App_Main_Menu(void)
{
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	2f 97       	sbiw	r28, 0x0f	; 15
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
	u8 key ;
	CLCD_vidSendString("1 - Start");
    2ab6:	8f e8       	ldi	r24, 0x8F	; 143
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
	CLCD_GoToXY(1 , 0);
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
	CLCD_vidSendString("2-Enter 2 Temp");
    2ac6:	89 e9       	ldi	r24, 0x99	; 153
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
	while(1)
	{
		do
		{
			key = KPD_GetKeyPressed();
    2ace:	0e 94 6d 10 	call	0x20da	; 0x20da <KPD_GetKeyPressed>
    2ad2:	8f 87       	std	Y+15, r24	; 0x0f
		}while(key == 0xff);
    2ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ad8:	d1 f3       	breq	.-12     	; 0x2ace <App_Main_Menu+0x2c>

		if (key == '+' && flag == 0)
    2ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    2adc:	8b 32       	cpi	r24, 0x2B	; 43
    2ade:	61 f4       	brne	.+24     	; 0x2af8 <App_Main_Menu+0x56>
    2ae0:	80 91 73 01 	lds	r24, 0x0173
    2ae4:	88 23       	and	r24, r24
    2ae6:	41 f4       	brne	.+16     	; 0x2af8 <App_Main_Menu+0x56>
		{
			CLCD_voidSendCommand(1);
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
			CLCD_vidSendString("3-Show Temp");
    2aee:	88 ea       	ldi	r24, 0xA8	; 168
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    2af6:	eb cf       	rjmp	.-42     	; 0x2ace <App_Main_Menu+0x2c>
		}
		else if (key == '-' && flag == 0)
    2af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2afa:	8d 32       	cpi	r24, 0x2D	; 45
    2afc:	a1 f4       	brne	.+40     	; 0x2b26 <App_Main_Menu+0x84>
    2afe:	80 91 73 01 	lds	r24, 0x0173
    2b02:	88 23       	and	r24, r24
    2b04:	81 f4       	brne	.+32     	; 0x2b26 <App_Main_Menu+0x84>
		{
			CLCD_voidSendCommand(1);
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
			CLCD_vidSendString("1 - Start");
    2b0c:	8f e8       	ldi	r24, 0x8F	; 143
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
			CLCD_GoToXY(1 , 0);
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	60 e0       	ldi	r22, 0x00	; 0
    2b18:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
			CLCD_vidSendString("2-Enter 2 Temp");
    2b1c:	89 e9       	ldi	r24, 0x99	; 153
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    2b24:	d4 cf       	rjmp	.-88     	; 0x2ace <App_Main_Menu+0x2c>
		}
		else if(key == 'D')
    2b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b28:	84 34       	cpi	r24, 0x44	; 68
    2b2a:	59 f4       	brne	.+22     	; 0x2b42 <App_Main_Menu+0xa0>
		{
			App_Select_Mode();
    2b2c:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <App_Select_Mode>
			CLCD_GoToXY(1 , 0);
			CLCD_vidSendString("2-Enter 2 Temp");
		}

	}
}
    2b30:	2f 96       	adiw	r28, 0x0f	; 15
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	08 95       	ret
			App_Select_Mode();
			break ;
		}
		else
		{
			flag = 0;
    2b42:	10 92 73 01 	sts	0x0173, r1
			CLCD_voidSendCommand(1);
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
			CLCD_vidSendString("Wrong Option !");
    2b4c:	84 eb       	ldi	r24, 0xB4	; 180
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	aa ef       	ldi	r26, 0xFA	; 250
    2b5a:	b4 e4       	ldi	r27, 0x44	; 68
    2b5c:	8b 87       	std	Y+11, r24	; 0x0b
    2b5e:	9c 87       	std	Y+12, r25	; 0x0c
    2b60:	ad 87       	std	Y+13, r26	; 0x0d
    2b62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	4a ef       	ldi	r20, 0xFA	; 250
    2b72:	54 e4       	ldi	r21, 0x44	; 68
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8f 83       	std	Y+7, r24	; 0x07
    2b7e:	98 87       	std	Y+8, r25	; 0x08
    2b80:	a9 87       	std	Y+9, r26	; 0x09
    2b82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b84:	6f 81       	ldd	r22, Y+7	; 0x07
    2b86:	78 85       	ldd	r23, Y+8	; 0x08
    2b88:	89 85       	ldd	r24, Y+9	; 0x09
    2b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e8       	ldi	r20, 0x80	; 128
    2b92:	5f e3       	ldi	r21, 0x3F	; 63
    2b94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	2c f4       	brge	.+10     	; 0x2ba6 <App_Main_Menu+0x104>
		__ticks = 1;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9e 83       	std	Y+6, r25	; 0x06
    2ba2:	8d 83       	std	Y+5, r24	; 0x05
    2ba4:	3f c0       	rjmp	.+126    	; 0x2c24 <App_Main_Menu+0x182>
	else if (__tmp > 65535)
    2ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba8:	78 85       	ldd	r23, Y+8	; 0x08
    2baa:	89 85       	ldd	r24, Y+9	; 0x09
    2bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	3f ef       	ldi	r19, 0xFF	; 255
    2bb2:	4f e7       	ldi	r20, 0x7F	; 127
    2bb4:	57 e4       	ldi	r21, 0x47	; 71
    2bb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bba:	18 16       	cp	r1, r24
    2bbc:	4c f5       	brge	.+82     	; 0x2c10 <App_Main_Menu+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e2       	ldi	r20, 0x20	; 32
    2bcc:	51 e4       	ldi	r21, 0x41	; 65
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9e 83       	std	Y+6, r25	; 0x06
    2be4:	8d 83       	std	Y+5, r24	; 0x05
    2be6:	0f c0       	rjmp	.+30     	; 0x2c06 <App_Main_Menu+0x164>
    2be8:	88 ec       	ldi	r24, 0xC8	; 200
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9c 83       	std	Y+4, r25	; 0x04
    2bee:	8b 83       	std	Y+3, r24	; 0x03
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <App_Main_Menu+0x152>
    2bf8:	9c 83       	std	Y+4, r25	; 0x04
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c06:	8d 81       	ldd	r24, Y+5	; 0x05
    2c08:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	69 f7       	brne	.-38     	; 0x2be8 <App_Main_Menu+0x146>
    2c0e:	14 c0       	rjmp	.+40     	; 0x2c38 <App_Main_Menu+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c10:	6f 81       	ldd	r22, Y+7	; 0x07
    2c12:	78 85       	ldd	r23, Y+8	; 0x08
    2c14:	89 85       	ldd	r24, Y+9	; 0x09
    2c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	8d 83       	std	Y+5, r24	; 0x05
    2c24:	8d 81       	ldd	r24, Y+5	; 0x05
    2c26:	9e 81       	ldd	r25, Y+6	; 0x06
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <App_Main_Menu+0x18e>
    2c34:	9a 83       	std	Y+2, r25	; 0x02
    2c36:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			CLCD_voidSendCommand(1);
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
			CLCD_vidSendString("1 - Start");
    2c3e:	8f e8       	ldi	r24, 0x8F	; 143
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
			CLCD_GoToXY(1 , 0);
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
			CLCD_vidSendString("2-Enter 2 Temp");
    2c4e:	89 e9       	ldi	r24, 0x99	; 153
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    2c56:	3b cf       	rjmp	.-394    	; 0x2ace <App_Main_Menu+0x2c>

00002c58 <Read_Temperature>:
	}
}


void Read_Temperature(void)
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	6d 97       	sbiw	r28, 0x1d	; 29
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
	u8 key ;
	static u8 Local_u8Counter = 0 ; /*Increament If low Temp Entered*/
	static u8 Temperature_Flag = 0;

	CLCD_voidSendCommand(1);
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>

	CLCD_vidSendString("Enter Temp H:");
    2c72:	83 ec       	ldi	r24, 0xC3	; 195
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
	CLCD_GoToXY(0 , 12);
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	6c e0       	ldi	r22, 0x0C	; 12
    2c7e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>

	while(1)
	{

		do{
			if(Reset_TempApp_Flag == 1)
    2c82:	80 91 72 01 	lds	r24, 0x0172
    2c86:	81 30       	cpi	r24, 0x01	; 1
    2c88:	19 f5       	brne	.+70     	; 0x2cd0 <Read_Temperature+0x78>
			{
				Local_u8Counter = 0 ;
    2c8a:	10 92 76 01 	sts	0x0176, r1
				Reset_TempApp_Flag = 0 ;
    2c8e:	10 92 72 01 	sts	0x0172, r1
				flag = 0 ;
    2c92:	10 92 73 01 	sts	0x0173, r1
				Temperature_Flag = 0 ;
    2c96:	10 92 75 01 	sts	0x0175, r1
				counter = 13 ;
    2c9a:	8d e0       	ldi	r24, 0x0D	; 13
    2c9c:	80 93 52 01 	sts	0x0152, r24
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN3 , DIO_LOW);
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	63 e0       	ldi	r22, 0x03	; 3
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN2 , DIO_LOW);
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	62 e0       	ldi	r22, 0x02	; 2
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN1 , DIO_LOW);
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	61 e0       	ldi	r22, 0x01	; 1
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				TIMR0_VidSetCompMatchVal(0);
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	0e 94 16 11 	call	0x222c	; 0x222c <TIMR0_VidSetCompMatchVal>
				CLCD_voidSendCommand(1);
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
				App_Main_Menu();
    2cca:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <App_Main_Menu>
    2cce:	06 c0       	rjmp	.+12     	; 0x2cdc <Read_Temperature+0x84>
				break ;
			}
			else
			{
				key = KPD_GetKeyPressed();
    2cd0:	0e 94 6d 10 	call	0x20da	; 0x20da <KPD_GetKeyPressed>
    2cd4:	8d 8f       	std	Y+29, r24	; 0x1d
			}
		}while(key == 0xff);
    2cd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cda:	99 f2       	breq	.-90     	; 0x2c82 <Read_Temperature+0x2a>

		if(key == 0)
    2cdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cde:	88 23       	and	r24, r24
    2ce0:	09 f0       	breq	.+2      	; 0x2ce4 <Read_Temperature+0x8c>
    2ce2:	6f c0       	rjmp	.+222    	; 0x2dc2 <Read_Temperature+0x16a>
		{
			if(Temperature_Flag == 0)
    2ce4:	80 91 75 01 	lds	r24, 0x0175
    2ce8:	88 23       	and	r24, r24
    2cea:	99 f5       	brne	.+102    	; 0x2d52 <Read_Temperature+0xfa>
			{

				CLCD_GoToXY(0,counter) ;
    2cec:	90 91 52 01 	lds	r25, 0x0152
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	69 2f       	mov	r22, r25
    2cf4:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    2cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cfa:	80 5d       	subi	r24, 0xD0	; 208
    2cfc:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    2d00:	80 91 52 01 	lds	r24, 0x0152
    2d04:	8d 30       	cpi	r24, 0x0D	; 13
    2d06:	41 f4       	brne	.+16     	; 0x2d18 <Read_Temperature+0xc0>
				{
					Temp_key = key ;
    2d08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d0a:	88 2f       	mov	r24, r24
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	90 93 7e 01 	sts	0x017E, r25
    2d12:	80 93 7d 01 	sts	0x017D, r24
    2d16:	17 c0       	rjmp	.+46     	; 0x2d46 <Read_Temperature+0xee>
				}
				else
				{
					Temp_key = (Temp_key * 10) + key ;
    2d18:	80 91 7d 01 	lds	r24, 0x017D
    2d1c:	90 91 7e 01 	lds	r25, 0x017E
    2d20:	9c 01       	movw	r18, r24
    2d22:	22 0f       	add	r18, r18
    2d24:	33 1f       	adc	r19, r19
    2d26:	c9 01       	movw	r24, r18
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	28 0f       	add	r18, r24
    2d32:	39 1f       	adc	r19, r25
    2d34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d36:	88 2f       	mov	r24, r24
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	82 0f       	add	r24, r18
    2d3c:	93 1f       	adc	r25, r19
    2d3e:	90 93 7e 01 	sts	0x017E, r25
    2d42:	80 93 7d 01 	sts	0x017D, r24
				}
				counter ++ ;
    2d46:	80 91 52 01 	lds	r24, 0x0152
    2d4a:	8f 5f       	subi	r24, 0xFF	; 255
    2d4c:	80 93 52 01 	sts	0x0152, r24
    2d50:	98 cf       	rjmp	.-208    	; 0x2c82 <Read_Temperature+0x2a>
			}
			else if(Temperature_Flag == 1)
    2d52:	80 91 75 01 	lds	r24, 0x0175
    2d56:	81 30       	cpi	r24, 0x01	; 1
    2d58:	09 f0       	breq	.+2      	; 0x2d5c <Read_Temperature+0x104>
    2d5a:	93 cf       	rjmp	.-218    	; 0x2c82 <Read_Temperature+0x2a>
			{
				CLCD_GoToXY(1,counter) ;
    2d5c:	90 91 52 01 	lds	r25, 0x0152
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	69 2f       	mov	r22, r25
    2d64:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    2d68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d6a:	80 5d       	subi	r24, 0xD0	; 208
    2d6c:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    2d70:	80 91 52 01 	lds	r24, 0x0152
    2d74:	8d 30       	cpi	r24, 0x0D	; 13
    2d76:	41 f4       	brne	.+16     	; 0x2d88 <Read_Temperature+0x130>
				{
					Temp2_key = key ;
    2d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d7a:	88 2f       	mov	r24, r24
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	90 93 82 01 	sts	0x0182, r25
    2d82:	80 93 81 01 	sts	0x0181, r24
    2d86:	17 c0       	rjmp	.+46     	; 0x2db6 <Read_Temperature+0x15e>
				}
				else
				{
					Temp2_key = (Temp2_key * 10) + key ;
    2d88:	80 91 81 01 	lds	r24, 0x0181
    2d8c:	90 91 82 01 	lds	r25, 0x0182
    2d90:	9c 01       	movw	r18, r24
    2d92:	22 0f       	add	r18, r18
    2d94:	33 1f       	adc	r19, r19
    2d96:	c9 01       	movw	r24, r18
    2d98:	88 0f       	add	r24, r24
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	88 0f       	add	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	28 0f       	add	r18, r24
    2da2:	39 1f       	adc	r19, r25
    2da4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	82 0f       	add	r24, r18
    2dac:	93 1f       	adc	r25, r19
    2dae:	90 93 82 01 	sts	0x0182, r25
    2db2:	80 93 81 01 	sts	0x0181, r24
				}
				counter ++ ;
    2db6:	80 91 52 01 	lds	r24, 0x0152
    2dba:	8f 5f       	subi	r24, 0xFF	; 255
    2dbc:	80 93 52 01 	sts	0x0152, r24
    2dc0:	60 cf       	rjmp	.-320    	; 0x2c82 <Read_Temperature+0x2a>
			}
		}
		else if (key == 1)
    2dc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dc4:	81 30       	cpi	r24, 0x01	; 1
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <Read_Temperature+0x172>
    2dc8:	6f c0       	rjmp	.+222    	; 0x2ea8 <Read_Temperature+0x250>
		{
			if(Temperature_Flag == 0)
    2dca:	80 91 75 01 	lds	r24, 0x0175
    2dce:	88 23       	and	r24, r24
    2dd0:	99 f5       	brne	.+102    	; 0x2e38 <Read_Temperature+0x1e0>
			{
				CLCD_GoToXY(0,counter) ;
    2dd2:	90 91 52 01 	lds	r25, 0x0152
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	69 2f       	mov	r22, r25
    2dda:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    2dde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2de0:	80 5d       	subi	r24, 0xD0	; 208
    2de2:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    2de6:	80 91 52 01 	lds	r24, 0x0152
    2dea:	8d 30       	cpi	r24, 0x0D	; 13
    2dec:	41 f4       	brne	.+16     	; 0x2dfe <Read_Temperature+0x1a6>
				{
					Temp_key = key ;
    2dee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2df0:	88 2f       	mov	r24, r24
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	90 93 7e 01 	sts	0x017E, r25
    2df8:	80 93 7d 01 	sts	0x017D, r24
    2dfc:	17 c0       	rjmp	.+46     	; 0x2e2c <Read_Temperature+0x1d4>
				}
				else
				{
					Temp_key = (Temp_key * 10) + key ;
    2dfe:	80 91 7d 01 	lds	r24, 0x017D
    2e02:	90 91 7e 01 	lds	r25, 0x017E
    2e06:	9c 01       	movw	r18, r24
    2e08:	22 0f       	add	r18, r18
    2e0a:	33 1f       	adc	r19, r19
    2e0c:	c9 01       	movw	r24, r18
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	28 0f       	add	r18, r24
    2e18:	39 1f       	adc	r19, r25
    2e1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e1c:	88 2f       	mov	r24, r24
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	82 0f       	add	r24, r18
    2e22:	93 1f       	adc	r25, r19
    2e24:	90 93 7e 01 	sts	0x017E, r25
    2e28:	80 93 7d 01 	sts	0x017D, r24
				}
				counter ++ ;
    2e2c:	80 91 52 01 	lds	r24, 0x0152
    2e30:	8f 5f       	subi	r24, 0xFF	; 255
    2e32:	80 93 52 01 	sts	0x0152, r24
    2e36:	25 cf       	rjmp	.-438    	; 0x2c82 <Read_Temperature+0x2a>
			}
			else if(Temperature_Flag == 1)
    2e38:	80 91 75 01 	lds	r24, 0x0175
    2e3c:	81 30       	cpi	r24, 0x01	; 1
    2e3e:	09 f0       	breq	.+2      	; 0x2e42 <Read_Temperature+0x1ea>
    2e40:	20 cf       	rjmp	.-448    	; 0x2c82 <Read_Temperature+0x2a>
			{

				CLCD_GoToXY(1,counter) ;
    2e42:	90 91 52 01 	lds	r25, 0x0152
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	69 2f       	mov	r22, r25
    2e4a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    2e4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e50:	80 5d       	subi	r24, 0xD0	; 208
    2e52:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    2e56:	80 91 52 01 	lds	r24, 0x0152
    2e5a:	8d 30       	cpi	r24, 0x0D	; 13
    2e5c:	41 f4       	brne	.+16     	; 0x2e6e <Read_Temperature+0x216>
				{
					Temp2_key = key ;
    2e5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	90 93 82 01 	sts	0x0182, r25
    2e68:	80 93 81 01 	sts	0x0181, r24
    2e6c:	17 c0       	rjmp	.+46     	; 0x2e9c <Read_Temperature+0x244>
				}
				else
				{
					Temp2_key = (Temp2_key * 10) + key ;
    2e6e:	80 91 81 01 	lds	r24, 0x0181
    2e72:	90 91 82 01 	lds	r25, 0x0182
    2e76:	9c 01       	movw	r18, r24
    2e78:	22 0f       	add	r18, r18
    2e7a:	33 1f       	adc	r19, r19
    2e7c:	c9 01       	movw	r24, r18
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	28 0f       	add	r18, r24
    2e88:	39 1f       	adc	r19, r25
    2e8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e8c:	88 2f       	mov	r24, r24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	82 0f       	add	r24, r18
    2e92:	93 1f       	adc	r25, r19
    2e94:	90 93 82 01 	sts	0x0182, r25
    2e98:	80 93 81 01 	sts	0x0181, r24
				}
				counter ++ ;
    2e9c:	80 91 52 01 	lds	r24, 0x0152
    2ea0:	8f 5f       	subi	r24, 0xFF	; 255
    2ea2:	80 93 52 01 	sts	0x0152, r24
    2ea6:	ed ce       	rjmp	.-550    	; 0x2c82 <Read_Temperature+0x2a>
			}
		}
		else if (key == 2)
    2ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eaa:	82 30       	cpi	r24, 0x02	; 2
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <Read_Temperature+0x258>
    2eae:	6f c0       	rjmp	.+222    	; 0x2f8e <Read_Temperature+0x336>
		{
			if(Temperature_Flag == 0)
    2eb0:	80 91 75 01 	lds	r24, 0x0175
    2eb4:	88 23       	and	r24, r24
    2eb6:	99 f5       	brne	.+102    	; 0x2f1e <Read_Temperature+0x2c6>
			{

				CLCD_GoToXY(0,counter) ;
    2eb8:	90 91 52 01 	lds	r25, 0x0152
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	69 2f       	mov	r22, r25
    2ec0:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    2ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec6:	80 5d       	subi	r24, 0xD0	; 208
    2ec8:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    2ecc:	80 91 52 01 	lds	r24, 0x0152
    2ed0:	8d 30       	cpi	r24, 0x0D	; 13
    2ed2:	41 f4       	brne	.+16     	; 0x2ee4 <Read_Temperature+0x28c>
				{
					Temp_key = key ;
    2ed4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ed6:	88 2f       	mov	r24, r24
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	90 93 7e 01 	sts	0x017E, r25
    2ede:	80 93 7d 01 	sts	0x017D, r24
    2ee2:	17 c0       	rjmp	.+46     	; 0x2f12 <Read_Temperature+0x2ba>
				}
				else
				{
					Temp_key = (Temp_key * 10) + key ;
    2ee4:	80 91 7d 01 	lds	r24, 0x017D
    2ee8:	90 91 7e 01 	lds	r25, 0x017E
    2eec:	9c 01       	movw	r18, r24
    2eee:	22 0f       	add	r18, r18
    2ef0:	33 1f       	adc	r19, r19
    2ef2:	c9 01       	movw	r24, r18
    2ef4:	88 0f       	add	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	88 0f       	add	r24, r24
    2efa:	99 1f       	adc	r25, r25
    2efc:	28 0f       	add	r18, r24
    2efe:	39 1f       	adc	r19, r25
    2f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f02:	88 2f       	mov	r24, r24
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	82 0f       	add	r24, r18
    2f08:	93 1f       	adc	r25, r19
    2f0a:	90 93 7e 01 	sts	0x017E, r25
    2f0e:	80 93 7d 01 	sts	0x017D, r24
				}
				counter ++ ;
    2f12:	80 91 52 01 	lds	r24, 0x0152
    2f16:	8f 5f       	subi	r24, 0xFF	; 255
    2f18:	80 93 52 01 	sts	0x0152, r24
    2f1c:	b2 ce       	rjmp	.-668    	; 0x2c82 <Read_Temperature+0x2a>
			}
			else if(Temperature_Flag == 1)
    2f1e:	80 91 75 01 	lds	r24, 0x0175
    2f22:	81 30       	cpi	r24, 0x01	; 1
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <Read_Temperature+0x2d0>
    2f26:	ad ce       	rjmp	.-678    	; 0x2c82 <Read_Temperature+0x2a>
			{

				CLCD_GoToXY(1,counter) ;
    2f28:	90 91 52 01 	lds	r25, 0x0152
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	69 2f       	mov	r22, r25
    2f30:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    2f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f36:	80 5d       	subi	r24, 0xD0	; 208
    2f38:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    2f3c:	80 91 52 01 	lds	r24, 0x0152
    2f40:	8d 30       	cpi	r24, 0x0D	; 13
    2f42:	41 f4       	brne	.+16     	; 0x2f54 <Read_Temperature+0x2fc>
				{
					Temp2_key = key ;
    2f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f46:	88 2f       	mov	r24, r24
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	90 93 82 01 	sts	0x0182, r25
    2f4e:	80 93 81 01 	sts	0x0181, r24
    2f52:	17 c0       	rjmp	.+46     	; 0x2f82 <Read_Temperature+0x32a>
				}
				else
				{
					Temp2_key = (Temp2_key * 10) + key ;
    2f54:	80 91 81 01 	lds	r24, 0x0181
    2f58:	90 91 82 01 	lds	r25, 0x0182
    2f5c:	9c 01       	movw	r18, r24
    2f5e:	22 0f       	add	r18, r18
    2f60:	33 1f       	adc	r19, r19
    2f62:	c9 01       	movw	r24, r18
    2f64:	88 0f       	add	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	28 0f       	add	r18, r24
    2f6e:	39 1f       	adc	r19, r25
    2f70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f72:	88 2f       	mov	r24, r24
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	82 0f       	add	r24, r18
    2f78:	93 1f       	adc	r25, r19
    2f7a:	90 93 82 01 	sts	0x0182, r25
    2f7e:	80 93 81 01 	sts	0x0181, r24
				}
				counter ++ ;
    2f82:	80 91 52 01 	lds	r24, 0x0152
    2f86:	8f 5f       	subi	r24, 0xFF	; 255
    2f88:	80 93 52 01 	sts	0x0152, r24
    2f8c:	7a ce       	rjmp	.-780    	; 0x2c82 <Read_Temperature+0x2a>
			}
		}
		else if (key == 3)
    2f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f90:	83 30       	cpi	r24, 0x03	; 3
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <Read_Temperature+0x33e>
    2f94:	6f c0       	rjmp	.+222    	; 0x3074 <Read_Temperature+0x41c>
		{
			if(Temperature_Flag == 0)
    2f96:	80 91 75 01 	lds	r24, 0x0175
    2f9a:	88 23       	and	r24, r24
    2f9c:	99 f5       	brne	.+102    	; 0x3004 <Read_Temperature+0x3ac>
			{

				CLCD_GoToXY(0,counter) ;
    2f9e:	90 91 52 01 	lds	r25, 0x0152
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	69 2f       	mov	r22, r25
    2fa6:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    2faa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fac:	80 5d       	subi	r24, 0xD0	; 208
    2fae:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    2fb2:	80 91 52 01 	lds	r24, 0x0152
    2fb6:	8d 30       	cpi	r24, 0x0D	; 13
    2fb8:	41 f4       	brne	.+16     	; 0x2fca <Read_Temperature+0x372>
				{
					Temp_key = key ;
    2fba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fbc:	88 2f       	mov	r24, r24
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	90 93 7e 01 	sts	0x017E, r25
    2fc4:	80 93 7d 01 	sts	0x017D, r24
    2fc8:	17 c0       	rjmp	.+46     	; 0x2ff8 <Read_Temperature+0x3a0>
				}
				else
				{
					Temp_key = (Temp_key * 10) + key ;
    2fca:	80 91 7d 01 	lds	r24, 0x017D
    2fce:	90 91 7e 01 	lds	r25, 0x017E
    2fd2:	9c 01       	movw	r18, r24
    2fd4:	22 0f       	add	r18, r18
    2fd6:	33 1f       	adc	r19, r19
    2fd8:	c9 01       	movw	r24, r18
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	88 0f       	add	r24, r24
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	28 0f       	add	r18, r24
    2fe4:	39 1f       	adc	r19, r25
    2fe6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fe8:	88 2f       	mov	r24, r24
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	82 0f       	add	r24, r18
    2fee:	93 1f       	adc	r25, r19
    2ff0:	90 93 7e 01 	sts	0x017E, r25
    2ff4:	80 93 7d 01 	sts	0x017D, r24
				}
				counter ++ ;
    2ff8:	80 91 52 01 	lds	r24, 0x0152
    2ffc:	8f 5f       	subi	r24, 0xFF	; 255
    2ffe:	80 93 52 01 	sts	0x0152, r24
    3002:	3f ce       	rjmp	.-898    	; 0x2c82 <Read_Temperature+0x2a>
			}
			else if(Temperature_Flag == 1)
    3004:	80 91 75 01 	lds	r24, 0x0175
    3008:	81 30       	cpi	r24, 0x01	; 1
    300a:	09 f0       	breq	.+2      	; 0x300e <Read_Temperature+0x3b6>
    300c:	3a ce       	rjmp	.-908    	; 0x2c82 <Read_Temperature+0x2a>
			{

				CLCD_GoToXY(1,counter) ;
    300e:	90 91 52 01 	lds	r25, 0x0152
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	69 2f       	mov	r22, r25
    3016:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    301a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    301c:	80 5d       	subi	r24, 0xD0	; 208
    301e:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    3022:	80 91 52 01 	lds	r24, 0x0152
    3026:	8d 30       	cpi	r24, 0x0D	; 13
    3028:	41 f4       	brne	.+16     	; 0x303a <Read_Temperature+0x3e2>
				{
					Temp2_key = key ;
    302a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    302c:	88 2f       	mov	r24, r24
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	90 93 82 01 	sts	0x0182, r25
    3034:	80 93 81 01 	sts	0x0181, r24
    3038:	17 c0       	rjmp	.+46     	; 0x3068 <Read_Temperature+0x410>
				}
				else
				{
					Temp2_key = (Temp2_key * 10) + key ;
    303a:	80 91 81 01 	lds	r24, 0x0181
    303e:	90 91 82 01 	lds	r25, 0x0182
    3042:	9c 01       	movw	r18, r24
    3044:	22 0f       	add	r18, r18
    3046:	33 1f       	adc	r19, r19
    3048:	c9 01       	movw	r24, r18
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	28 0f       	add	r18, r24
    3054:	39 1f       	adc	r19, r25
    3056:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3058:	88 2f       	mov	r24, r24
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	82 0f       	add	r24, r18
    305e:	93 1f       	adc	r25, r19
    3060:	90 93 82 01 	sts	0x0182, r25
    3064:	80 93 81 01 	sts	0x0181, r24
				}
				counter ++ ;
    3068:	80 91 52 01 	lds	r24, 0x0152
    306c:	8f 5f       	subi	r24, 0xFF	; 255
    306e:	80 93 52 01 	sts	0x0152, r24
    3072:	07 ce       	rjmp	.-1010   	; 0x2c82 <Read_Temperature+0x2a>
			}
		}
		else if (key == 4)
    3074:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3076:	84 30       	cpi	r24, 0x04	; 4
    3078:	09 f0       	breq	.+2      	; 0x307c <Read_Temperature+0x424>
    307a:	6f c0       	rjmp	.+222    	; 0x315a <Read_Temperature+0x502>
		{
			if(Temperature_Flag == 0)
    307c:	80 91 75 01 	lds	r24, 0x0175
    3080:	88 23       	and	r24, r24
    3082:	99 f5       	brne	.+102    	; 0x30ea <Read_Temperature+0x492>
			{

				CLCD_GoToXY(0,counter) ;
    3084:	90 91 52 01 	lds	r25, 0x0152
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	69 2f       	mov	r22, r25
    308c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    3090:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3092:	80 5d       	subi	r24, 0xD0	; 208
    3094:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    3098:	80 91 52 01 	lds	r24, 0x0152
    309c:	8d 30       	cpi	r24, 0x0D	; 13
    309e:	41 f4       	brne	.+16     	; 0x30b0 <Read_Temperature+0x458>
				{
					Temp_key = key ;
    30a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30a2:	88 2f       	mov	r24, r24
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	90 93 7e 01 	sts	0x017E, r25
    30aa:	80 93 7d 01 	sts	0x017D, r24
    30ae:	17 c0       	rjmp	.+46     	; 0x30de <Read_Temperature+0x486>
				}
				else
				{
					Temp_key = (Temp_key * 10) + key ;
    30b0:	80 91 7d 01 	lds	r24, 0x017D
    30b4:	90 91 7e 01 	lds	r25, 0x017E
    30b8:	9c 01       	movw	r18, r24
    30ba:	22 0f       	add	r18, r18
    30bc:	33 1f       	adc	r19, r19
    30be:	c9 01       	movw	r24, r18
    30c0:	88 0f       	add	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	88 0f       	add	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	28 0f       	add	r18, r24
    30ca:	39 1f       	adc	r19, r25
    30cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30ce:	88 2f       	mov	r24, r24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	82 0f       	add	r24, r18
    30d4:	93 1f       	adc	r25, r19
    30d6:	90 93 7e 01 	sts	0x017E, r25
    30da:	80 93 7d 01 	sts	0x017D, r24
				}
				counter ++ ;
    30de:	80 91 52 01 	lds	r24, 0x0152
    30e2:	8f 5f       	subi	r24, 0xFF	; 255
    30e4:	80 93 52 01 	sts	0x0152, r24
    30e8:	cc cd       	rjmp	.-1128   	; 0x2c82 <Read_Temperature+0x2a>
			}
			else if(Temperature_Flag == 1)
    30ea:	80 91 75 01 	lds	r24, 0x0175
    30ee:	81 30       	cpi	r24, 0x01	; 1
    30f0:	09 f0       	breq	.+2      	; 0x30f4 <Read_Temperature+0x49c>
    30f2:	c7 cd       	rjmp	.-1138   	; 0x2c82 <Read_Temperature+0x2a>
			{

				CLCD_GoToXY(1,counter) ;
    30f4:	90 91 52 01 	lds	r25, 0x0152
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	69 2f       	mov	r22, r25
    30fc:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    3100:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3102:	80 5d       	subi	r24, 0xD0	; 208
    3104:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    3108:	80 91 52 01 	lds	r24, 0x0152
    310c:	8d 30       	cpi	r24, 0x0D	; 13
    310e:	41 f4       	brne	.+16     	; 0x3120 <Read_Temperature+0x4c8>
				{
					Temp2_key = key ;
    3110:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3112:	88 2f       	mov	r24, r24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	90 93 82 01 	sts	0x0182, r25
    311a:	80 93 81 01 	sts	0x0181, r24
    311e:	17 c0       	rjmp	.+46     	; 0x314e <Read_Temperature+0x4f6>
				}
				else
				{
					Temp2_key = (Temp2_key * 10) + key ;
    3120:	80 91 81 01 	lds	r24, 0x0181
    3124:	90 91 82 01 	lds	r25, 0x0182
    3128:	9c 01       	movw	r18, r24
    312a:	22 0f       	add	r18, r18
    312c:	33 1f       	adc	r19, r19
    312e:	c9 01       	movw	r24, r18
    3130:	88 0f       	add	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	88 0f       	add	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	28 0f       	add	r18, r24
    313a:	39 1f       	adc	r19, r25
    313c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    313e:	88 2f       	mov	r24, r24
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	82 0f       	add	r24, r18
    3144:	93 1f       	adc	r25, r19
    3146:	90 93 82 01 	sts	0x0182, r25
    314a:	80 93 81 01 	sts	0x0181, r24
				}
				counter ++ ;
    314e:	80 91 52 01 	lds	r24, 0x0152
    3152:	8f 5f       	subi	r24, 0xFF	; 255
    3154:	80 93 52 01 	sts	0x0152, r24
    3158:	94 cd       	rjmp	.-1240   	; 0x2c82 <Read_Temperature+0x2a>
			}
		}
		else if (key == 5)
    315a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    315c:	85 30       	cpi	r24, 0x05	; 5
    315e:	09 f0       	breq	.+2      	; 0x3162 <Read_Temperature+0x50a>
    3160:	6f c0       	rjmp	.+222    	; 0x3240 <Read_Temperature+0x5e8>
		{
			if(Temperature_Flag == 0)
    3162:	80 91 75 01 	lds	r24, 0x0175
    3166:	88 23       	and	r24, r24
    3168:	99 f5       	brne	.+102    	; 0x31d0 <Read_Temperature+0x578>
			{

				CLCD_GoToXY(0,counter) ;
    316a:	90 91 52 01 	lds	r25, 0x0152
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	69 2f       	mov	r22, r25
    3172:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    3176:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3178:	80 5d       	subi	r24, 0xD0	; 208
    317a:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    317e:	80 91 52 01 	lds	r24, 0x0152
    3182:	8d 30       	cpi	r24, 0x0D	; 13
    3184:	41 f4       	brne	.+16     	; 0x3196 <Read_Temperature+0x53e>
				{
					Temp_key = key ;
    3186:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3188:	88 2f       	mov	r24, r24
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	90 93 7e 01 	sts	0x017E, r25
    3190:	80 93 7d 01 	sts	0x017D, r24
    3194:	17 c0       	rjmp	.+46     	; 0x31c4 <Read_Temperature+0x56c>
				}
				else
				{
					Temp_key = (Temp_key * 10) + key ;
    3196:	80 91 7d 01 	lds	r24, 0x017D
    319a:	90 91 7e 01 	lds	r25, 0x017E
    319e:	9c 01       	movw	r18, r24
    31a0:	22 0f       	add	r18, r18
    31a2:	33 1f       	adc	r19, r19
    31a4:	c9 01       	movw	r24, r18
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	28 0f       	add	r18, r24
    31b0:	39 1f       	adc	r19, r25
    31b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b4:	88 2f       	mov	r24, r24
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	82 0f       	add	r24, r18
    31ba:	93 1f       	adc	r25, r19
    31bc:	90 93 7e 01 	sts	0x017E, r25
    31c0:	80 93 7d 01 	sts	0x017D, r24
				}
				counter ++ ;
    31c4:	80 91 52 01 	lds	r24, 0x0152
    31c8:	8f 5f       	subi	r24, 0xFF	; 255
    31ca:	80 93 52 01 	sts	0x0152, r24
    31ce:	59 cd       	rjmp	.-1358   	; 0x2c82 <Read_Temperature+0x2a>
			}
			else if(Temperature_Flag == 1)
    31d0:	80 91 75 01 	lds	r24, 0x0175
    31d4:	81 30       	cpi	r24, 0x01	; 1
    31d6:	09 f0       	breq	.+2      	; 0x31da <Read_Temperature+0x582>
    31d8:	54 cd       	rjmp	.-1368   	; 0x2c82 <Read_Temperature+0x2a>
			{

				CLCD_GoToXY(1,counter) ;
    31da:	90 91 52 01 	lds	r25, 0x0152
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	69 2f       	mov	r22, r25
    31e2:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    31e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31e8:	80 5d       	subi	r24, 0xD0	; 208
    31ea:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    31ee:	80 91 52 01 	lds	r24, 0x0152
    31f2:	8d 30       	cpi	r24, 0x0D	; 13
    31f4:	41 f4       	brne	.+16     	; 0x3206 <Read_Temperature+0x5ae>
				{
					Temp2_key = key ;
    31f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31f8:	88 2f       	mov	r24, r24
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	90 93 82 01 	sts	0x0182, r25
    3200:	80 93 81 01 	sts	0x0181, r24
    3204:	17 c0       	rjmp	.+46     	; 0x3234 <Read_Temperature+0x5dc>
				}
				else
				{
					Temp2_key = (Temp2_key * 10) + key ;
    3206:	80 91 81 01 	lds	r24, 0x0181
    320a:	90 91 82 01 	lds	r25, 0x0182
    320e:	9c 01       	movw	r18, r24
    3210:	22 0f       	add	r18, r18
    3212:	33 1f       	adc	r19, r19
    3214:	c9 01       	movw	r24, r18
    3216:	88 0f       	add	r24, r24
    3218:	99 1f       	adc	r25, r25
    321a:	88 0f       	add	r24, r24
    321c:	99 1f       	adc	r25, r25
    321e:	28 0f       	add	r18, r24
    3220:	39 1f       	adc	r19, r25
    3222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3224:	88 2f       	mov	r24, r24
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	82 0f       	add	r24, r18
    322a:	93 1f       	adc	r25, r19
    322c:	90 93 82 01 	sts	0x0182, r25
    3230:	80 93 81 01 	sts	0x0181, r24
				}
				counter ++ ;
    3234:	80 91 52 01 	lds	r24, 0x0152
    3238:	8f 5f       	subi	r24, 0xFF	; 255
    323a:	80 93 52 01 	sts	0x0152, r24
    323e:	21 cd       	rjmp	.-1470   	; 0x2c82 <Read_Temperature+0x2a>
			}
		}
		else if (key == 6)
    3240:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3242:	86 30       	cpi	r24, 0x06	; 6
    3244:	09 f0       	breq	.+2      	; 0x3248 <Read_Temperature+0x5f0>
    3246:	6f c0       	rjmp	.+222    	; 0x3326 <Read_Temperature+0x6ce>
		{
			if(Temperature_Flag == 0)
    3248:	80 91 75 01 	lds	r24, 0x0175
    324c:	88 23       	and	r24, r24
    324e:	99 f5       	brne	.+102    	; 0x32b6 <Read_Temperature+0x65e>
			{

				CLCD_GoToXY(0,counter) ;
    3250:	90 91 52 01 	lds	r25, 0x0152
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	69 2f       	mov	r22, r25
    3258:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    325c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    325e:	80 5d       	subi	r24, 0xD0	; 208
    3260:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    3264:	80 91 52 01 	lds	r24, 0x0152
    3268:	8d 30       	cpi	r24, 0x0D	; 13
    326a:	41 f4       	brne	.+16     	; 0x327c <Read_Temperature+0x624>
				{
					Temp_key = key ;
    326c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    326e:	88 2f       	mov	r24, r24
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	90 93 7e 01 	sts	0x017E, r25
    3276:	80 93 7d 01 	sts	0x017D, r24
    327a:	17 c0       	rjmp	.+46     	; 0x32aa <Read_Temperature+0x652>
				}
				else
				{
					Temp_key = (Temp_key * 10) + key ;
    327c:	80 91 7d 01 	lds	r24, 0x017D
    3280:	90 91 7e 01 	lds	r25, 0x017E
    3284:	9c 01       	movw	r18, r24
    3286:	22 0f       	add	r18, r18
    3288:	33 1f       	adc	r19, r19
    328a:	c9 01       	movw	r24, r18
    328c:	88 0f       	add	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	88 0f       	add	r24, r24
    3292:	99 1f       	adc	r25, r25
    3294:	28 0f       	add	r18, r24
    3296:	39 1f       	adc	r19, r25
    3298:	8d 8d       	ldd	r24, Y+29	; 0x1d
    329a:	88 2f       	mov	r24, r24
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	82 0f       	add	r24, r18
    32a0:	93 1f       	adc	r25, r19
    32a2:	90 93 7e 01 	sts	0x017E, r25
    32a6:	80 93 7d 01 	sts	0x017D, r24
				}
				counter ++ ;
    32aa:	80 91 52 01 	lds	r24, 0x0152
    32ae:	8f 5f       	subi	r24, 0xFF	; 255
    32b0:	80 93 52 01 	sts	0x0152, r24
    32b4:	e6 cc       	rjmp	.-1588   	; 0x2c82 <Read_Temperature+0x2a>
			}
			else if(Temperature_Flag == 1)
    32b6:	80 91 75 01 	lds	r24, 0x0175
    32ba:	81 30       	cpi	r24, 0x01	; 1
    32bc:	09 f0       	breq	.+2      	; 0x32c0 <Read_Temperature+0x668>
    32be:	e1 cc       	rjmp	.-1598   	; 0x2c82 <Read_Temperature+0x2a>
			{

				CLCD_GoToXY(1,counter) ;
    32c0:	90 91 52 01 	lds	r25, 0x0152
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	69 2f       	mov	r22, r25
    32c8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    32cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ce:	80 5d       	subi	r24, 0xD0	; 208
    32d0:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    32d4:	80 91 52 01 	lds	r24, 0x0152
    32d8:	8d 30       	cpi	r24, 0x0D	; 13
    32da:	41 f4       	brne	.+16     	; 0x32ec <Read_Temperature+0x694>
				{
					Temp2_key = key ;
    32dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32de:	88 2f       	mov	r24, r24
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	90 93 82 01 	sts	0x0182, r25
    32e6:	80 93 81 01 	sts	0x0181, r24
    32ea:	17 c0       	rjmp	.+46     	; 0x331a <Read_Temperature+0x6c2>
				}
				else
				{
					Temp2_key = (Temp2_key * 10) + key ;
    32ec:	80 91 81 01 	lds	r24, 0x0181
    32f0:	90 91 82 01 	lds	r25, 0x0182
    32f4:	9c 01       	movw	r18, r24
    32f6:	22 0f       	add	r18, r18
    32f8:	33 1f       	adc	r19, r19
    32fa:	c9 01       	movw	r24, r18
    32fc:	88 0f       	add	r24, r24
    32fe:	99 1f       	adc	r25, r25
    3300:	88 0f       	add	r24, r24
    3302:	99 1f       	adc	r25, r25
    3304:	28 0f       	add	r18, r24
    3306:	39 1f       	adc	r19, r25
    3308:	8d 8d       	ldd	r24, Y+29	; 0x1d
    330a:	88 2f       	mov	r24, r24
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	82 0f       	add	r24, r18
    3310:	93 1f       	adc	r25, r19
    3312:	90 93 82 01 	sts	0x0182, r25
    3316:	80 93 81 01 	sts	0x0181, r24
				}
				counter ++ ;
    331a:	80 91 52 01 	lds	r24, 0x0152
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	80 93 52 01 	sts	0x0152, r24
    3324:	ae cc       	rjmp	.-1700   	; 0x2c82 <Read_Temperature+0x2a>
			}
		}
		else if (key == 7)
    3326:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3328:	87 30       	cpi	r24, 0x07	; 7
    332a:	09 f0       	breq	.+2      	; 0x332e <Read_Temperature+0x6d6>
    332c:	6f c0       	rjmp	.+222    	; 0x340c <Read_Temperature+0x7b4>
		{
			if(Temperature_Flag == 0)
    332e:	80 91 75 01 	lds	r24, 0x0175
    3332:	88 23       	and	r24, r24
    3334:	99 f5       	brne	.+102    	; 0x339c <Read_Temperature+0x744>
			{

				CLCD_GoToXY(0,counter) ;
    3336:	90 91 52 01 	lds	r25, 0x0152
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	69 2f       	mov	r22, r25
    333e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    3342:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3344:	80 5d       	subi	r24, 0xD0	; 208
    3346:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    334a:	80 91 52 01 	lds	r24, 0x0152
    334e:	8d 30       	cpi	r24, 0x0D	; 13
    3350:	41 f4       	brne	.+16     	; 0x3362 <Read_Temperature+0x70a>
				{
					Temp_key = key ;
    3352:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3354:	88 2f       	mov	r24, r24
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	90 93 7e 01 	sts	0x017E, r25
    335c:	80 93 7d 01 	sts	0x017D, r24
    3360:	17 c0       	rjmp	.+46     	; 0x3390 <Read_Temperature+0x738>
				}
				else
				{
					Temp_key = (Temp_key * 10) + key ;
    3362:	80 91 7d 01 	lds	r24, 0x017D
    3366:	90 91 7e 01 	lds	r25, 0x017E
    336a:	9c 01       	movw	r18, r24
    336c:	22 0f       	add	r18, r18
    336e:	33 1f       	adc	r19, r19
    3370:	c9 01       	movw	r24, r18
    3372:	88 0f       	add	r24, r24
    3374:	99 1f       	adc	r25, r25
    3376:	88 0f       	add	r24, r24
    3378:	99 1f       	adc	r25, r25
    337a:	28 0f       	add	r18, r24
    337c:	39 1f       	adc	r19, r25
    337e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3380:	88 2f       	mov	r24, r24
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	82 0f       	add	r24, r18
    3386:	93 1f       	adc	r25, r19
    3388:	90 93 7e 01 	sts	0x017E, r25
    338c:	80 93 7d 01 	sts	0x017D, r24
				}
				counter ++ ;
    3390:	80 91 52 01 	lds	r24, 0x0152
    3394:	8f 5f       	subi	r24, 0xFF	; 255
    3396:	80 93 52 01 	sts	0x0152, r24
    339a:	73 cc       	rjmp	.-1818   	; 0x2c82 <Read_Temperature+0x2a>
			}
			else if(Temperature_Flag == 1)
    339c:	80 91 75 01 	lds	r24, 0x0175
    33a0:	81 30       	cpi	r24, 0x01	; 1
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <Read_Temperature+0x74e>
    33a4:	6e cc       	rjmp	.-1828   	; 0x2c82 <Read_Temperature+0x2a>
			{

				CLCD_GoToXY(1,counter) ;
    33a6:	90 91 52 01 	lds	r25, 0x0152
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	69 2f       	mov	r22, r25
    33ae:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    33b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33b4:	80 5d       	subi	r24, 0xD0	; 208
    33b6:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    33ba:	80 91 52 01 	lds	r24, 0x0152
    33be:	8d 30       	cpi	r24, 0x0D	; 13
    33c0:	41 f4       	brne	.+16     	; 0x33d2 <Read_Temperature+0x77a>
				{
					Temp2_key = key ;
    33c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33c4:	88 2f       	mov	r24, r24
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	90 93 82 01 	sts	0x0182, r25
    33cc:	80 93 81 01 	sts	0x0181, r24
    33d0:	17 c0       	rjmp	.+46     	; 0x3400 <Read_Temperature+0x7a8>
				}
				else
				{
					Temp2_key = (Temp2_key * 10) + key ;
    33d2:	80 91 81 01 	lds	r24, 0x0181
    33d6:	90 91 82 01 	lds	r25, 0x0182
    33da:	9c 01       	movw	r18, r24
    33dc:	22 0f       	add	r18, r18
    33de:	33 1f       	adc	r19, r19
    33e0:	c9 01       	movw	r24, r18
    33e2:	88 0f       	add	r24, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	88 0f       	add	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	28 0f       	add	r18, r24
    33ec:	39 1f       	adc	r19, r25
    33ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33f0:	88 2f       	mov	r24, r24
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	82 0f       	add	r24, r18
    33f6:	93 1f       	adc	r25, r19
    33f8:	90 93 82 01 	sts	0x0182, r25
    33fc:	80 93 81 01 	sts	0x0181, r24
				}
				counter ++ ;
    3400:	80 91 52 01 	lds	r24, 0x0152
    3404:	8f 5f       	subi	r24, 0xFF	; 255
    3406:	80 93 52 01 	sts	0x0152, r24
    340a:	3b cc       	rjmp	.-1930   	; 0x2c82 <Read_Temperature+0x2a>
			}
		}
		else if (key == 8)
    340c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    340e:	88 30       	cpi	r24, 0x08	; 8
    3410:	09 f0       	breq	.+2      	; 0x3414 <Read_Temperature+0x7bc>
    3412:	6f c0       	rjmp	.+222    	; 0x34f2 <Read_Temperature+0x89a>
		{
			if(Temperature_Flag == 0)
    3414:	80 91 75 01 	lds	r24, 0x0175
    3418:	88 23       	and	r24, r24
    341a:	99 f5       	brne	.+102    	; 0x3482 <Read_Temperature+0x82a>
			{

				CLCD_GoToXY(0,counter) ;
    341c:	90 91 52 01 	lds	r25, 0x0152
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	69 2f       	mov	r22, r25
    3424:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    3428:	8d 8d       	ldd	r24, Y+29	; 0x1d
    342a:	80 5d       	subi	r24, 0xD0	; 208
    342c:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    3430:	80 91 52 01 	lds	r24, 0x0152
    3434:	8d 30       	cpi	r24, 0x0D	; 13
    3436:	41 f4       	brne	.+16     	; 0x3448 <Read_Temperature+0x7f0>
				{
					Temp_key = key ;
    3438:	8d 8d       	ldd	r24, Y+29	; 0x1d
    343a:	88 2f       	mov	r24, r24
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	90 93 7e 01 	sts	0x017E, r25
    3442:	80 93 7d 01 	sts	0x017D, r24
    3446:	17 c0       	rjmp	.+46     	; 0x3476 <Read_Temperature+0x81e>
				}
				else
				{
					Temp_key = (Temp_key * 10) + key ;
    3448:	80 91 7d 01 	lds	r24, 0x017D
    344c:	90 91 7e 01 	lds	r25, 0x017E
    3450:	9c 01       	movw	r18, r24
    3452:	22 0f       	add	r18, r18
    3454:	33 1f       	adc	r19, r19
    3456:	c9 01       	movw	r24, r18
    3458:	88 0f       	add	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	28 0f       	add	r18, r24
    3462:	39 1f       	adc	r19, r25
    3464:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3466:	88 2f       	mov	r24, r24
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	82 0f       	add	r24, r18
    346c:	93 1f       	adc	r25, r19
    346e:	90 93 7e 01 	sts	0x017E, r25
    3472:	80 93 7d 01 	sts	0x017D, r24
				}
				counter ++ ;
    3476:	80 91 52 01 	lds	r24, 0x0152
    347a:	8f 5f       	subi	r24, 0xFF	; 255
    347c:	80 93 52 01 	sts	0x0152, r24
    3480:	00 cc       	rjmp	.-2048   	; 0x2c82 <Read_Temperature+0x2a>
			}
			else if(Temperature_Flag == 1)
    3482:	80 91 75 01 	lds	r24, 0x0175
    3486:	81 30       	cpi	r24, 0x01	; 1
    3488:	09 f0       	breq	.+2      	; 0x348c <Read_Temperature+0x834>
    348a:	fb cb       	rjmp	.-2058   	; 0x2c82 <Read_Temperature+0x2a>
			{

				CLCD_GoToXY(1,counter) ;
    348c:	90 91 52 01 	lds	r25, 0x0152
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	69 2f       	mov	r22, r25
    3494:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    3498:	8d 8d       	ldd	r24, Y+29	; 0x1d
    349a:	80 5d       	subi	r24, 0xD0	; 208
    349c:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    34a0:	80 91 52 01 	lds	r24, 0x0152
    34a4:	8d 30       	cpi	r24, 0x0D	; 13
    34a6:	41 f4       	brne	.+16     	; 0x34b8 <Read_Temperature+0x860>
				{
					Temp2_key = key ;
    34a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34aa:	88 2f       	mov	r24, r24
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	90 93 82 01 	sts	0x0182, r25
    34b2:	80 93 81 01 	sts	0x0181, r24
    34b6:	17 c0       	rjmp	.+46     	; 0x34e6 <Read_Temperature+0x88e>
				}
				else
				{
					Temp2_key = (Temp2_key * 10) + key ;
    34b8:	80 91 81 01 	lds	r24, 0x0181
    34bc:	90 91 82 01 	lds	r25, 0x0182
    34c0:	9c 01       	movw	r18, r24
    34c2:	22 0f       	add	r18, r18
    34c4:	33 1f       	adc	r19, r19
    34c6:	c9 01       	movw	r24, r18
    34c8:	88 0f       	add	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	88 0f       	add	r24, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	28 0f       	add	r18, r24
    34d2:	39 1f       	adc	r19, r25
    34d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d6:	88 2f       	mov	r24, r24
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	82 0f       	add	r24, r18
    34dc:	93 1f       	adc	r25, r19
    34de:	90 93 82 01 	sts	0x0182, r25
    34e2:	80 93 81 01 	sts	0x0181, r24
				}
				counter ++ ;
    34e6:	80 91 52 01 	lds	r24, 0x0152
    34ea:	8f 5f       	subi	r24, 0xFF	; 255
    34ec:	80 93 52 01 	sts	0x0152, r24
    34f0:	c8 cb       	rjmp	.-2160   	; 0x2c82 <Read_Temperature+0x2a>
			}
		}
		else if (key == 9)
    34f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34f4:	89 30       	cpi	r24, 0x09	; 9
    34f6:	09 f0       	breq	.+2      	; 0x34fa <Read_Temperature+0x8a2>
    34f8:	6f c0       	rjmp	.+222    	; 0x35d8 <Read_Temperature+0x980>
		{
			if(Temperature_Flag == 0)
    34fa:	80 91 75 01 	lds	r24, 0x0175
    34fe:	88 23       	and	r24, r24
    3500:	99 f5       	brne	.+102    	; 0x3568 <Read_Temperature+0x910>
			{

				CLCD_GoToXY(0,counter) ;
    3502:	90 91 52 01 	lds	r25, 0x0152
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	69 2f       	mov	r22, r25
    350a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    350e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3510:	80 5d       	subi	r24, 0xD0	; 208
    3512:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    3516:	80 91 52 01 	lds	r24, 0x0152
    351a:	8d 30       	cpi	r24, 0x0D	; 13
    351c:	41 f4       	brne	.+16     	; 0x352e <Read_Temperature+0x8d6>
				{
					Temp_key = key ;
    351e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3520:	88 2f       	mov	r24, r24
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	90 93 7e 01 	sts	0x017E, r25
    3528:	80 93 7d 01 	sts	0x017D, r24
    352c:	17 c0       	rjmp	.+46     	; 0x355c <Read_Temperature+0x904>
				}
				else
				{
					Temp_key = (Temp_key * 10) + key ;
    352e:	80 91 7d 01 	lds	r24, 0x017D
    3532:	90 91 7e 01 	lds	r25, 0x017E
    3536:	9c 01       	movw	r18, r24
    3538:	22 0f       	add	r18, r18
    353a:	33 1f       	adc	r19, r19
    353c:	c9 01       	movw	r24, r18
    353e:	88 0f       	add	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	28 0f       	add	r18, r24
    3548:	39 1f       	adc	r19, r25
    354a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    354c:	88 2f       	mov	r24, r24
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	82 0f       	add	r24, r18
    3552:	93 1f       	adc	r25, r19
    3554:	90 93 7e 01 	sts	0x017E, r25
    3558:	80 93 7d 01 	sts	0x017D, r24
				}
				counter ++ ;
    355c:	80 91 52 01 	lds	r24, 0x0152
    3560:	8f 5f       	subi	r24, 0xFF	; 255
    3562:	80 93 52 01 	sts	0x0152, r24
    3566:	8d cb       	rjmp	.-2278   	; 0x2c82 <Read_Temperature+0x2a>
			}
			else if(Temperature_Flag == 1)
    3568:	80 91 75 01 	lds	r24, 0x0175
    356c:	81 30       	cpi	r24, 0x01	; 1
    356e:	09 f0       	breq	.+2      	; 0x3572 <Read_Temperature+0x91a>
    3570:	88 cb       	rjmp	.-2288   	; 0x2c82 <Read_Temperature+0x2a>
			{

				CLCD_GoToXY(1,counter) ;
    3572:	90 91 52 01 	lds	r25, 0x0152
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	69 2f       	mov	r22, r25
    357a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    357e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3580:	80 5d       	subi	r24, 0xD0	; 208
    3582:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidSendData>
				if (counter == 13)
    3586:	80 91 52 01 	lds	r24, 0x0152
    358a:	8d 30       	cpi	r24, 0x0D	; 13
    358c:	41 f4       	brne	.+16     	; 0x359e <Read_Temperature+0x946>
				{
					Temp2_key = key ;
    358e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3590:	88 2f       	mov	r24, r24
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	90 93 82 01 	sts	0x0182, r25
    3598:	80 93 81 01 	sts	0x0181, r24
    359c:	17 c0       	rjmp	.+46     	; 0x35cc <Read_Temperature+0x974>
				}
				else
				{
					Temp2_key = (Temp2_key * 10) + key ;
    359e:	80 91 81 01 	lds	r24, 0x0181
    35a2:	90 91 82 01 	lds	r25, 0x0182
    35a6:	9c 01       	movw	r18, r24
    35a8:	22 0f       	add	r18, r18
    35aa:	33 1f       	adc	r19, r19
    35ac:	c9 01       	movw	r24, r18
    35ae:	88 0f       	add	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	28 0f       	add	r18, r24
    35b8:	39 1f       	adc	r19, r25
    35ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35bc:	88 2f       	mov	r24, r24
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	82 0f       	add	r24, r18
    35c2:	93 1f       	adc	r25, r19
    35c4:	90 93 82 01 	sts	0x0182, r25
    35c8:	80 93 81 01 	sts	0x0181, r24
				}
				counter ++ ;
    35cc:	80 91 52 01 	lds	r24, 0x0152
    35d0:	8f 5f       	subi	r24, 0xFF	; 255
    35d2:	80 93 52 01 	sts	0x0152, r24
    35d6:	55 cb       	rjmp	.-2390   	; 0x2c82 <Read_Temperature+0x2a>
			}
		}
		else if(key == 'E')/*Enter Low Temperature*/
    35d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35da:	85 34       	cpi	r24, 0x45	; 69
    35dc:	09 f0       	breq	.+2      	; 0x35e0 <Read_Temperature+0x988>
    35de:	51 cb       	rjmp	.-2398   	; 0x2c82 <Read_Temperature+0x2a>
		{
			if (Local_u8Counter == 0)
    35e0:	80 91 76 01 	lds	r24, 0x0176
    35e4:	88 23       	and	r24, r24
    35e6:	a1 f4       	brne	.+40     	; 0x3610 <Read_Temperature+0x9b8>
			{
				Local_u8Counter ++ ;
    35e8:	80 91 76 01 	lds	r24, 0x0176
    35ec:	8f 5f       	subi	r24, 0xFF	; 255
    35ee:	80 93 76 01 	sts	0x0176, r24
				Temperature_Flag = 1 ;
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	80 93 75 01 	sts	0x0175, r24
				CLCD_GoToXY(1 , 0);
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
				CLCD_vidSendString("Enter Temp L:");
    3600:	81 ed       	ldi	r24, 0xD1	; 209
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
				counter = 13;
    3608:	8d e0       	ldi	r24, 0x0D	; 13
    360a:	80 93 52 01 	sts	0x0152, r24
    360e:	39 cb       	rjmp	.-2446   	; 0x2c82 <Read_Temperature+0x2a>
			}
			else
			{
				Local_u8Counter = 0 ;
    3610:	10 92 76 01 	sts	0x0176, r1
				Reset_TempApp_Flag = 0 ;
    3614:	10 92 72 01 	sts	0x0172, r1
				flag = 0 ;
    3618:	10 92 73 01 	sts	0x0173, r1
				Temperature_Flag = 0 ;
    361c:	10 92 75 01 	sts	0x0175, r1
				counter = 13 ;
    3620:	8d e0       	ldi	r24, 0x0D	; 13
    3622:	80 93 52 01 	sts	0x0152, r24

				EEPROM_voidSendDataByte(Temp_key , 0); // High
    3626:	80 91 7d 01 	lds	r24, 0x017D
    362a:	90 91 7e 01 	lds	r25, 0x017E
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	70 e0       	ldi	r23, 0x00	; 0
    3632:	0e 94 9e 22 	call	0x453c	; 0x453c <EEPROM_voidSendDataByte>
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	a0 e2       	ldi	r26, 0x20	; 32
    363c:	b1 e4       	ldi	r27, 0x41	; 65
    363e:	89 8f       	std	Y+25, r24	; 0x19
    3640:	9a 8f       	std	Y+26, r25	; 0x1a
    3642:	ab 8f       	std	Y+27, r26	; 0x1b
    3644:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3646:	69 8d       	ldd	r22, Y+25	; 0x19
    3648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    364a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    364c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	4a ef       	ldi	r20, 0xFA	; 250
    3654:	54 e4       	ldi	r21, 0x44	; 68
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	8d 8b       	std	Y+21, r24	; 0x15
    3660:	9e 8b       	std	Y+22, r25	; 0x16
    3662:	af 8b       	std	Y+23, r26	; 0x17
    3664:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3666:	6d 89       	ldd	r22, Y+21	; 0x15
    3668:	7e 89       	ldd	r23, Y+22	; 0x16
    366a:	8f 89       	ldd	r24, Y+23	; 0x17
    366c:	98 8d       	ldd	r25, Y+24	; 0x18
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	40 e8       	ldi	r20, 0x80	; 128
    3674:	5f e3       	ldi	r21, 0x3F	; 63
    3676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    367a:	88 23       	and	r24, r24
    367c:	2c f4       	brge	.+10     	; 0x3688 <Read_Temperature+0xa30>
		__ticks = 1;
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	9c 8b       	std	Y+20, r25	; 0x14
    3684:	8b 8b       	std	Y+19, r24	; 0x13
    3686:	3f c0       	rjmp	.+126    	; 0x3706 <Read_Temperature+0xaae>
	else if (__tmp > 65535)
    3688:	6d 89       	ldd	r22, Y+21	; 0x15
    368a:	7e 89       	ldd	r23, Y+22	; 0x16
    368c:	8f 89       	ldd	r24, Y+23	; 0x17
    368e:	98 8d       	ldd	r25, Y+24	; 0x18
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	3f ef       	ldi	r19, 0xFF	; 255
    3694:	4f e7       	ldi	r20, 0x7F	; 127
    3696:	57 e4       	ldi	r21, 0x47	; 71
    3698:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    369c:	18 16       	cp	r1, r24
    369e:	4c f5       	brge	.+82     	; 0x36f2 <Read_Temperature+0xa9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a0:	69 8d       	ldd	r22, Y+25	; 0x19
    36a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 e2       	ldi	r20, 0x20	; 32
    36ae:	51 e4       	ldi	r21, 0x41	; 65
    36b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	bc 01       	movw	r22, r24
    36ba:	cd 01       	movw	r24, r26
    36bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	9c 8b       	std	Y+20, r25	; 0x14
    36c6:	8b 8b       	std	Y+19, r24	; 0x13
    36c8:	0f c0       	rjmp	.+30     	; 0x36e8 <Read_Temperature+0xa90>
    36ca:	88 ec       	ldi	r24, 0xC8	; 200
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	9a 8b       	std	Y+18, r25	; 0x12
    36d0:	89 8b       	std	Y+17, r24	; 0x11
    36d2:	89 89       	ldd	r24, Y+17	; 0x11
    36d4:	9a 89       	ldd	r25, Y+18	; 0x12
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	f1 f7       	brne	.-4      	; 0x36d6 <Read_Temperature+0xa7e>
    36da:	9a 8b       	std	Y+18, r25	; 0x12
    36dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36de:	8b 89       	ldd	r24, Y+19	; 0x13
    36e0:	9c 89       	ldd	r25, Y+20	; 0x14
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	9c 8b       	std	Y+20, r25	; 0x14
    36e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e8:	8b 89       	ldd	r24, Y+19	; 0x13
    36ea:	9c 89       	ldd	r25, Y+20	; 0x14
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	69 f7       	brne	.-38     	; 0x36ca <Read_Temperature+0xa72>
    36f0:	14 c0       	rjmp	.+40     	; 0x371a <Read_Temperature+0xac2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f2:	6d 89       	ldd	r22, Y+21	; 0x15
    36f4:	7e 89       	ldd	r23, Y+22	; 0x16
    36f6:	8f 89       	ldd	r24, Y+23	; 0x17
    36f8:	98 8d       	ldd	r25, Y+24	; 0x18
    36fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	9c 8b       	std	Y+20, r25	; 0x14
    3704:	8b 8b       	std	Y+19, r24	; 0x13
    3706:	8b 89       	ldd	r24, Y+19	; 0x13
    3708:	9c 89       	ldd	r25, Y+20	; 0x14
    370a:	98 8b       	std	Y+16, r25	; 0x10
    370c:	8f 87       	std	Y+15, r24	; 0x0f
    370e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3710:	98 89       	ldd	r25, Y+16	; 0x10
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	f1 f7       	brne	.-4      	; 0x3712 <Read_Temperature+0xaba>
    3716:	98 8b       	std	Y+16, r25	; 0x10
    3718:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
				EEPROM_voidSendDataByte(Temp2_key , 1); // Low
    371a:	80 91 81 01 	lds	r24, 0x0181
    371e:	90 91 82 01 	lds	r25, 0x0182
    3722:	61 e0       	ldi	r22, 0x01	; 1
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	0e 94 9e 22 	call	0x453c	; 0x453c <EEPROM_voidSendDataByte>
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	a0 e2       	ldi	r26, 0x20	; 32
    3730:	b1 e4       	ldi	r27, 0x41	; 65
    3732:	8b 87       	std	Y+11, r24	; 0x0b
    3734:	9c 87       	std	Y+12, r25	; 0x0c
    3736:	ad 87       	std	Y+13, r26	; 0x0d
    3738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373a:	6b 85       	ldd	r22, Y+11	; 0x0b
    373c:	7c 85       	ldd	r23, Y+12	; 0x0c
    373e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3740:	9e 85       	ldd	r25, Y+14	; 0x0e
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	4a ef       	ldi	r20, 0xFA	; 250
    3748:	54 e4       	ldi	r21, 0x44	; 68
    374a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	8f 83       	std	Y+7, r24	; 0x07
    3754:	98 87       	std	Y+8, r25	; 0x08
    3756:	a9 87       	std	Y+9, r26	; 0x09
    3758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    375a:	6f 81       	ldd	r22, Y+7	; 0x07
    375c:	78 85       	ldd	r23, Y+8	; 0x08
    375e:	89 85       	ldd	r24, Y+9	; 0x09
    3760:	9a 85       	ldd	r25, Y+10	; 0x0a
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e8       	ldi	r20, 0x80	; 128
    3768:	5f e3       	ldi	r21, 0x3F	; 63
    376a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    376e:	88 23       	and	r24, r24
    3770:	2c f4       	brge	.+10     	; 0x377c <Read_Temperature+0xb24>
		__ticks = 1;
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	9e 83       	std	Y+6, r25	; 0x06
    3778:	8d 83       	std	Y+5, r24	; 0x05
    377a:	3f c0       	rjmp	.+126    	; 0x37fa <Read_Temperature+0xba2>
	else if (__tmp > 65535)
    377c:	6f 81       	ldd	r22, Y+7	; 0x07
    377e:	78 85       	ldd	r23, Y+8	; 0x08
    3780:	89 85       	ldd	r24, Y+9	; 0x09
    3782:	9a 85       	ldd	r25, Y+10	; 0x0a
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	3f ef       	ldi	r19, 0xFF	; 255
    3788:	4f e7       	ldi	r20, 0x7F	; 127
    378a:	57 e4       	ldi	r21, 0x47	; 71
    378c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3790:	18 16       	cp	r1, r24
    3792:	4c f5       	brge	.+82     	; 0x37e6 <Read_Temperature+0xb8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3794:	6b 85       	ldd	r22, Y+11	; 0x0b
    3796:	7c 85       	ldd	r23, Y+12	; 0x0c
    3798:	8d 85       	ldd	r24, Y+13	; 0x0d
    379a:	9e 85       	ldd	r25, Y+14	; 0x0e
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	40 e2       	ldi	r20, 0x20	; 32
    37a2:	51 e4       	ldi	r21, 0x41	; 65
    37a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	bc 01       	movw	r22, r24
    37ae:	cd 01       	movw	r24, r26
    37b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	9e 83       	std	Y+6, r25	; 0x06
    37ba:	8d 83       	std	Y+5, r24	; 0x05
    37bc:	0f c0       	rjmp	.+30     	; 0x37dc <Read_Temperature+0xb84>
    37be:	88 ec       	ldi	r24, 0xC8	; 200
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	9c 83       	std	Y+4, r25	; 0x04
    37c4:	8b 83       	std	Y+3, r24	; 0x03
    37c6:	8b 81       	ldd	r24, Y+3	; 0x03
    37c8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <Read_Temperature+0xb72>
    37ce:	9c 83       	std	Y+4, r25	; 0x04
    37d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d2:	8d 81       	ldd	r24, Y+5	; 0x05
    37d4:	9e 81       	ldd	r25, Y+6	; 0x06
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	9e 83       	std	Y+6, r25	; 0x06
    37da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37dc:	8d 81       	ldd	r24, Y+5	; 0x05
    37de:	9e 81       	ldd	r25, Y+6	; 0x06
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	69 f7       	brne	.-38     	; 0x37be <Read_Temperature+0xb66>
    37e4:	14 c0       	rjmp	.+40     	; 0x380e <Read_Temperature+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e6:	6f 81       	ldd	r22, Y+7	; 0x07
    37e8:	78 85       	ldd	r23, Y+8	; 0x08
    37ea:	89 85       	ldd	r24, Y+9	; 0x09
    37ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	9e 83       	std	Y+6, r25	; 0x06
    37f8:	8d 83       	std	Y+5, r24	; 0x05
    37fa:	8d 81       	ldd	r24, Y+5	; 0x05
    37fc:	9e 81       	ldd	r25, Y+6	; 0x06
    37fe:	9a 83       	std	Y+2, r25	; 0x02
    3800:	89 83       	std	Y+1, r24	; 0x01
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	9a 81       	ldd	r25, Y+2	; 0x02
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	f1 f7       	brne	.-4      	; 0x3806 <Read_Temperature+0xbae>
    380a:	9a 83       	std	Y+2, r25	; 0x02
    380c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);

				CLCD_voidSendCommand(1);
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
				App_Main_Menu();
    3814:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <App_Main_Menu>
				break ;
			}
		}
	}
    3818:	6d 96       	adiw	r28, 0x1d	; 29
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	08 95       	ret

0000382a <Represent_Temperature>:
}

void Represent_Temperature(void)
{
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	ec 97       	sbiw	r28, 0x3c	; 60
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8LedState = 0b00000000 , Local_u8ReceivedTempHighData , Local_u8ReceivedTempLowData ;
    383e:	1a ae       	std	Y+58, r1	; 0x3a
	do
	{
		if(Reset_TempApp_Flag == 1) /*Reset System*/
    3840:	80 91 72 01 	lds	r24, 0x0172
    3844:	81 30       	cpi	r24, 0x01	; 1
    3846:	49 f5       	brne	.+82     	; 0x389a <Represent_Temperature+0x70>
		{
			Reset_TempApp_Flag = 0 ;
    3848:	10 92 72 01 	sts	0x0172, r1
			flag = 0 ;
    384c:	10 92 73 01 	sts	0x0173, r1
			Temperature_Flag = 0 ;
    3850:	10 92 74 01 	sts	0x0174, r1
			counter = 13 ;
    3854:	8d e0       	ldi	r24, 0x0D	; 13
    3856:	80 93 52 01 	sts	0x0152, r24
			DIO_vidSetPinVal(DIO_PORTA , DIO_PIN3 , DIO_LOW);
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	63 e0       	ldi	r22, 0x03	; 3
    385e:	40 e0       	ldi	r20, 0x00	; 0
    3860:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
			DIO_vidSetPinVal(DIO_PORTA , DIO_PIN2 , DIO_LOW);
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	62 e0       	ldi	r22, 0x02	; 2
    3868:	40 e0       	ldi	r20, 0x00	; 0
    386a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
			DIO_vidSetPinVal(DIO_PORTA , DIO_PIN1 , DIO_LOW);
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	61 e0       	ldi	r22, 0x01	; 1
    3872:	40 e0       	ldi	r20, 0x00	; 0
    3874:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
			TIMR0_VidSetCompMatchVal(0);
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	0e 94 16 11 	call	0x222c	; 0x222c <TIMR0_VidSetCompMatchVal>
			CLCD_voidSendCommand(1);
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
			App_Main_Menu();
    3884:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <App_Main_Menu>
				}

			}
		}
	}while(1);
}
    3888:	ec 96       	adiw	r28, 0x3c	; 60
    388a:	0f b6       	in	r0, 0x3f	; 63
    388c:	f8 94       	cli
    388e:	de bf       	out	0x3e, r29	; 62
    3890:	0f be       	out	0x3f, r0	; 63
    3892:	cd bf       	out	0x3d, r28	; 61
    3894:	cf 91       	pop	r28
    3896:	df 91       	pop	r29
    3898:	08 95       	ret
			App_Main_Menu();
			break ;
		}
		else
		{
			EEPROM_voidReadDataByte(&Local_u8ReceivedTempHighData , 0);
    389a:	ce 01       	movw	r24, r28
    389c:	cb 96       	adiw	r24, 0x3b	; 59
    389e:	60 e0       	ldi	r22, 0x00	; 0
    38a0:	70 e0       	ldi	r23, 0x00	; 0
    38a2:	0e 94 be 22 	call	0x457c	; 0x457c <EEPROM_voidReadDataByte>
			EEPROM_voidReadDataByte(&Local_u8ReceivedTempLowData , 1);
    38a6:	ce 01       	movw	r24, r28
    38a8:	cc 96       	adiw	r24, 0x3c	; 60
    38aa:	61 e0       	ldi	r22, 0x01	; 1
    38ac:	70 e0       	ldi	r23, 0x00	; 0
    38ae:	0e 94 be 22 	call	0x457c	; 0x457c <EEPROM_voidReadDataByte>

			if (Temperature <= Local_u8ReceivedTempLowData)
    38b2:	8c ad       	ldd	r24, Y+60	; 0x3c
    38b4:	28 2f       	mov	r18, r24
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	80 91 77 01 	lds	r24, 0x0177
    38bc:	90 91 78 01 	lds	r25, 0x0178
    38c0:	28 17       	cp	r18, r24
    38c2:	39 07       	cpc	r19, r25
    38c4:	08 f4       	brcc	.+2      	; 0x38c8 <Represent_Temperature+0x9e>
    38c6:	8c c0       	rjmp	.+280    	; 0x39e0 <Represent_Temperature+0x1b6>
			{
				CLCD_voidSendCommand(1) ;
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
				CLCD_vidSendString("Low Temp");
    38ce:	8f ed       	ldi	r24, 0xDF	; 223
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	aa e7       	ldi	r26, 0x7A	; 122
    38dc:	b4 e4       	ldi	r27, 0x44	; 68
    38de:	8d ab       	std	Y+53, r24	; 0x35
    38e0:	9e ab       	std	Y+54, r25	; 0x36
    38e2:	af ab       	std	Y+55, r26	; 0x37
    38e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e6:	6d a9       	ldd	r22, Y+53	; 0x35
    38e8:	7e a9       	ldd	r23, Y+54	; 0x36
    38ea:	8f a9       	ldd	r24, Y+55	; 0x37
    38ec:	98 ad       	ldd	r25, Y+56	; 0x38
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	4a ef       	ldi	r20, 0xFA	; 250
    38f4:	54 e4       	ldi	r21, 0x44	; 68
    38f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	89 ab       	std	Y+49, r24	; 0x31
    3900:	9a ab       	std	Y+50, r25	; 0x32
    3902:	ab ab       	std	Y+51, r26	; 0x33
    3904:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3906:	69 a9       	ldd	r22, Y+49	; 0x31
    3908:	7a a9       	ldd	r23, Y+50	; 0x32
    390a:	8b a9       	ldd	r24, Y+51	; 0x33
    390c:	9c a9       	ldd	r25, Y+52	; 0x34
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e8       	ldi	r20, 0x80	; 128
    3914:	5f e3       	ldi	r21, 0x3F	; 63
    3916:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    391a:	88 23       	and	r24, r24
    391c:	2c f4       	brge	.+10     	; 0x3928 <Represent_Temperature+0xfe>
		__ticks = 1;
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	98 ab       	std	Y+48, r25	; 0x30
    3924:	8f a7       	std	Y+47, r24	; 0x2f
    3926:	3f c0       	rjmp	.+126    	; 0x39a6 <Represent_Temperature+0x17c>
	else if (__tmp > 65535)
    3928:	69 a9       	ldd	r22, Y+49	; 0x31
    392a:	7a a9       	ldd	r23, Y+50	; 0x32
    392c:	8b a9       	ldd	r24, Y+51	; 0x33
    392e:	9c a9       	ldd	r25, Y+52	; 0x34
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	3f ef       	ldi	r19, 0xFF	; 255
    3934:	4f e7       	ldi	r20, 0x7F	; 127
    3936:	57 e4       	ldi	r21, 0x47	; 71
    3938:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    393c:	18 16       	cp	r1, r24
    393e:	4c f5       	brge	.+82     	; 0x3992 <Represent_Temperature+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3940:	6d a9       	ldd	r22, Y+53	; 0x35
    3942:	7e a9       	ldd	r23, Y+54	; 0x36
    3944:	8f a9       	ldd	r24, Y+55	; 0x37
    3946:	98 ad       	ldd	r25, Y+56	; 0x38
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	40 e2       	ldi	r20, 0x20	; 32
    394e:	51 e4       	ldi	r21, 0x41	; 65
    3950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	bc 01       	movw	r22, r24
    395a:	cd 01       	movw	r24, r26
    395c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	98 ab       	std	Y+48, r25	; 0x30
    3966:	8f a7       	std	Y+47, r24	; 0x2f
    3968:	0f c0       	rjmp	.+30     	; 0x3988 <Represent_Temperature+0x15e>
    396a:	88 ec       	ldi	r24, 0xC8	; 200
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	9e a7       	std	Y+46, r25	; 0x2e
    3970:	8d a7       	std	Y+45, r24	; 0x2d
    3972:	8d a5       	ldd	r24, Y+45	; 0x2d
    3974:	9e a5       	ldd	r25, Y+46	; 0x2e
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <Represent_Temperature+0x14c>
    397a:	9e a7       	std	Y+46, r25	; 0x2e
    397c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3980:	98 a9       	ldd	r25, Y+48	; 0x30
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	98 ab       	std	Y+48, r25	; 0x30
    3986:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3988:	8f a5       	ldd	r24, Y+47	; 0x2f
    398a:	98 a9       	ldd	r25, Y+48	; 0x30
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	69 f7       	brne	.-38     	; 0x396a <Represent_Temperature+0x140>
    3990:	14 c0       	rjmp	.+40     	; 0x39ba <Represent_Temperature+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3992:	69 a9       	ldd	r22, Y+49	; 0x31
    3994:	7a a9       	ldd	r23, Y+50	; 0x32
    3996:	8b a9       	ldd	r24, Y+51	; 0x33
    3998:	9c a9       	ldd	r25, Y+52	; 0x34
    399a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	98 ab       	std	Y+48, r25	; 0x30
    39a4:	8f a7       	std	Y+47, r24	; 0x2f
    39a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    39a8:	98 a9       	ldd	r25, Y+48	; 0x30
    39aa:	9c a7       	std	Y+44, r25	; 0x2c
    39ac:	8b a7       	std	Y+43, r24	; 0x2b
    39ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    39b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	f1 f7       	brne	.-4      	; 0x39b2 <Represent_Temperature+0x188>
    39b6:	9c a7       	std	Y+44, r25	; 0x2c
    39b8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				TIMR0_VidSetCompMatchVal(0);
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	0e 94 16 11 	call	0x222c	; 0x222c <TIMR0_VidSetCompMatchVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN3 , DIO_HIGH);
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	63 e0       	ldi	r22, 0x03	; 3
    39c4:	41 e0       	ldi	r20, 0x01	; 1
    39c6:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN2 , DIO_LOW);
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	62 e0       	ldi	r22, 0x02	; 2
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN1 , DIO_LOW);
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	61 e0       	ldi	r22, 0x01	; 1
    39d8:	40 e0       	ldi	r20, 0x00	; 0
    39da:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
    39de:	30 cf       	rjmp	.-416    	; 0x3840 <Represent_Temperature+0x16>
			}
			else if (Temperature > Local_u8ReceivedTempLowData && Temperature <= Local_u8ReceivedTempHighData)
    39e0:	8c ad       	ldd	r24, Y+60	; 0x3c
    39e2:	28 2f       	mov	r18, r24
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	80 91 77 01 	lds	r24, 0x0177
    39ea:	90 91 78 01 	lds	r25, 0x0178
    39ee:	28 17       	cp	r18, r24
    39f0:	39 07       	cpc	r19, r25
    39f2:	08 f0       	brcs	.+2      	; 0x39f6 <Represent_Temperature+0x1cc>
    39f4:	97 c0       	rjmp	.+302    	; 0x3b24 <Represent_Temperature+0x2fa>
    39f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    39f8:	28 2f       	mov	r18, r24
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	80 91 77 01 	lds	r24, 0x0177
    3a00:	90 91 78 01 	lds	r25, 0x0178
    3a04:	28 17       	cp	r18, r24
    3a06:	39 07       	cpc	r19, r25
    3a08:	08 f4       	brcc	.+2      	; 0x3a0c <Represent_Temperature+0x1e2>
    3a0a:	8c c0       	rjmp	.+280    	; 0x3b24 <Represent_Temperature+0x2fa>
			{
				CLCD_voidSendCommand(1) ;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
				CLCD_vidSendString("Normal");
    3a12:	88 ee       	ldi	r24, 0xE8	; 232
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	aa e7       	ldi	r26, 0x7A	; 122
    3a20:	b4 e4       	ldi	r27, 0x44	; 68
    3a22:	8f a3       	std	Y+39, r24	; 0x27
    3a24:	98 a7       	std	Y+40, r25	; 0x28
    3a26:	a9 a7       	std	Y+41, r26	; 0x29
    3a28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a2c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a2e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a30:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a ef       	ldi	r20, 0xFA	; 250
    3a38:	54 e4       	ldi	r21, 0x44	; 68
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	8b a3       	std	Y+35, r24	; 0x23
    3a44:	9c a3       	std	Y+36, r25	; 0x24
    3a46:	ad a3       	std	Y+37, r26	; 0x25
    3a48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a4a:	6b a1       	ldd	r22, Y+35	; 0x23
    3a4c:	7c a1       	ldd	r23, Y+36	; 0x24
    3a4e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a50:	9e a1       	ldd	r25, Y+38	; 0x26
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	2c f4       	brge	.+10     	; 0x3a6c <Represent_Temperature+0x242>
		__ticks = 1;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9a a3       	std	Y+34, r25	; 0x22
    3a68:	89 a3       	std	Y+33, r24	; 0x21
    3a6a:	3f c0       	rjmp	.+126    	; 0x3aea <Represent_Temperature+0x2c0>
	else if (__tmp > 65535)
    3a6c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a6e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a70:	8d a1       	ldd	r24, Y+37	; 0x25
    3a72:	9e a1       	ldd	r25, Y+38	; 0x26
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	4c f5       	brge	.+82     	; 0x3ad6 <Represent_Temperature+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a84:	6f a1       	ldd	r22, Y+39	; 0x27
    3a86:	78 a5       	ldd	r23, Y+40	; 0x28
    3a88:	89 a5       	ldd	r24, Y+41	; 0x29
    3a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	51 e4       	ldi	r21, 0x41	; 65
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9a a3       	std	Y+34, r25	; 0x22
    3aaa:	89 a3       	std	Y+33, r24	; 0x21
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <Represent_Temperature+0x2a2>
    3aae:	88 ec       	ldi	r24, 0xC8	; 200
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	98 a3       	std	Y+32, r25	; 0x20
    3ab4:	8f 8f       	std	Y+31, r24	; 0x1f
    3ab6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ab8:	98 a1       	ldd	r25, Y+32	; 0x20
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <Represent_Temperature+0x290>
    3abe:	98 a3       	std	Y+32, r25	; 0x20
    3ac0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	9a a3       	std	Y+34, r25	; 0x22
    3aca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3acc:	89 a1       	ldd	r24, Y+33	; 0x21
    3ace:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	69 f7       	brne	.-38     	; 0x3aae <Represent_Temperature+0x284>
    3ad4:	14 c0       	rjmp	.+40     	; 0x3afe <Represent_Temperature+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ad8:	7c a1       	ldd	r23, Y+36	; 0x24
    3ada:	8d a1       	ldd	r24, Y+37	; 0x25
    3adc:	9e a1       	ldd	r25, Y+38	; 0x26
    3ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	9a a3       	std	Y+34, r25	; 0x22
    3ae8:	89 a3       	std	Y+33, r24	; 0x21
    3aea:	89 a1       	ldd	r24, Y+33	; 0x21
    3aec:	9a a1       	ldd	r25, Y+34	; 0x22
    3aee:	9e 8f       	std	Y+30, r25	; 0x1e
    3af0:	8d 8f       	std	Y+29, r24	; 0x1d
    3af2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3af4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <Represent_Temperature+0x2cc>
    3afa:	9e 8f       	std	Y+30, r25	; 0x1e
    3afc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				TIMR0_VidSetCompMatchVal(128);
    3afe:	80 e8       	ldi	r24, 0x80	; 128
    3b00:	0e 94 16 11 	call	0x222c	; 0x222c <TIMR0_VidSetCompMatchVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN3 , DIO_LOW);
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	63 e0       	ldi	r22, 0x03	; 3
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN2 , DIO_HIGH);
    3b0e:	80 e0       	ldi	r24, 0x00	; 0
    3b10:	62 e0       	ldi	r22, 0x02	; 2
    3b12:	41 e0       	ldi	r20, 0x01	; 1
    3b14:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN1 , DIO_LOW);
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	61 e0       	ldi	r22, 0x01	; 1
    3b1c:	40 e0       	ldi	r20, 0x00	; 0
    3b1e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
    3b22:	8e ce       	rjmp	.-740    	; 0x3840 <Represent_Temperature+0x16>
			}
			else if (Temperature > Local_u8ReceivedTempHighData)
    3b24:	8b ad       	ldd	r24, Y+59	; 0x3b
    3b26:	28 2f       	mov	r18, r24
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	80 91 77 01 	lds	r24, 0x0177
    3b2e:	90 91 78 01 	lds	r25, 0x0178
    3b32:	28 17       	cp	r18, r24
    3b34:	39 07       	cpc	r19, r25
    3b36:	08 f0       	brcs	.+2      	; 0x3b3a <Represent_Temperature+0x310>
    3b38:	83 ce       	rjmp	.-762    	; 0x3840 <Represent_Temperature+0x16>
			{
				CLCD_voidSendCommand(1) ;
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
				CLCD_vidSendString("DANGEROUS!");
    3b40:	8f ee       	ldi	r24, 0xEF	; 239
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	aa e7       	ldi	r26, 0x7A	; 122
    3b4e:	b4 e4       	ldi	r27, 0x44	; 68
    3b50:	89 8f       	std	Y+25, r24	; 0x19
    3b52:	9a 8f       	std	Y+26, r25	; 0x1a
    3b54:	ab 8f       	std	Y+27, r26	; 0x1b
    3b56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b58:	69 8d       	ldd	r22, Y+25	; 0x19
    3b5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	4a ef       	ldi	r20, 0xFA	; 250
    3b66:	54 e4       	ldi	r21, 0x44	; 68
    3b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	8d 8b       	std	Y+21, r24	; 0x15
    3b72:	9e 8b       	std	Y+22, r25	; 0x16
    3b74:	af 8b       	std	Y+23, r26	; 0x17
    3b76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b78:	6d 89       	ldd	r22, Y+21	; 0x15
    3b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	40 e8       	ldi	r20, 0x80	; 128
    3b86:	5f e3       	ldi	r21, 0x3F	; 63
    3b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b8c:	88 23       	and	r24, r24
    3b8e:	2c f4       	brge	.+10     	; 0x3b9a <Represent_Temperature+0x370>
		__ticks = 1;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	9c 8b       	std	Y+20, r25	; 0x14
    3b96:	8b 8b       	std	Y+19, r24	; 0x13
    3b98:	3f c0       	rjmp	.+126    	; 0x3c18 <Represent_Temperature+0x3ee>
	else if (__tmp > 65535)
    3b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	3f ef       	ldi	r19, 0xFF	; 255
    3ba6:	4f e7       	ldi	r20, 0x7F	; 127
    3ba8:	57 e4       	ldi	r21, 0x47	; 71
    3baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bae:	18 16       	cp	r1, r24
    3bb0:	4c f5       	brge	.+82     	; 0x3c04 <Represent_Temperature+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    3bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e2       	ldi	r20, 0x20	; 32
    3bc0:	51 e4       	ldi	r21, 0x41	; 65
    3bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	9c 8b       	std	Y+20, r25	; 0x14
    3bd8:	8b 8b       	std	Y+19, r24	; 0x13
    3bda:	0f c0       	rjmp	.+30     	; 0x3bfa <Represent_Temperature+0x3d0>
    3bdc:	88 ec       	ldi	r24, 0xC8	; 200
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	9a 8b       	std	Y+18, r25	; 0x12
    3be2:	89 8b       	std	Y+17, r24	; 0x11
    3be4:	89 89       	ldd	r24, Y+17	; 0x11
    3be6:	9a 89       	ldd	r25, Y+18	; 0x12
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	f1 f7       	brne	.-4      	; 0x3be8 <Represent_Temperature+0x3be>
    3bec:	9a 8b       	std	Y+18, r25	; 0x12
    3bee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    3bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	9c 8b       	std	Y+20, r25	; 0x14
    3bf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    3bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	69 f7       	brne	.-38     	; 0x3bdc <Represent_Temperature+0x3b2>
    3c02:	14 c0       	rjmp	.+40     	; 0x3c2c <Represent_Temperature+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c04:	6d 89       	ldd	r22, Y+21	; 0x15
    3c06:	7e 89       	ldd	r23, Y+22	; 0x16
    3c08:	8f 89       	ldd	r24, Y+23	; 0x17
    3c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	9c 8b       	std	Y+20, r25	; 0x14
    3c16:	8b 8b       	std	Y+19, r24	; 0x13
    3c18:	8b 89       	ldd	r24, Y+19	; 0x13
    3c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c1c:	98 8b       	std	Y+16, r25	; 0x10
    3c1e:	8f 87       	std	Y+15, r24	; 0x0f
    3c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c22:	98 89       	ldd	r25, Y+16	; 0x10
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	f1 f7       	brne	.-4      	; 0x3c24 <Represent_Temperature+0x3fa>
    3c28:	98 8b       	std	Y+16, r25	; 0x10
    3c2a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				TIMR0_VidSetCompMatchVal(255);
    3c2c:	8f ef       	ldi	r24, 0xFF	; 255
    3c2e:	0e 94 16 11 	call	0x222c	; 0x222c <TIMR0_VidSetCompMatchVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN3 , DIO_LOW);
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	63 e0       	ldi	r22, 0x03	; 3
    3c36:	40 e0       	ldi	r20, 0x00	; 0
    3c38:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN2 , DIO_LOW);
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	62 e0       	ldi	r22, 0x02	; 2
    3c40:	40 e0       	ldi	r20, 0x00	; 0
    3c42:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				for (u8 i=0 ; i<6 ; i++)
    3c46:	19 ae       	std	Y+57, r1	; 0x39
    3c48:	83 c0       	rjmp	.+262    	; 0x3d50 <Represent_Temperature+0x526>
				{
					if (Reset_TempApp_Flag == 1)
    3c4a:	80 91 72 01 	lds	r24, 0x0172
    3c4e:	81 30       	cpi	r24, 0x01	; 1
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <Represent_Temperature+0x42a>
    3c52:	f6 cd       	rjmp	.-1044   	; 0x3840 <Represent_Temperature+0x16>
					{
						break ;
					}
					else
					{
						TOGG_BIT(0,local_u8LedState);
    3c54:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	89 27       	eor	r24, r25
    3c5a:	8a af       	std	Y+58, r24	; 0x3a
						DIO_vidSetPinVal(DIO_PORTA , DIO_PIN2 , local_u8LedState);
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
    3c5e:	62 e0       	ldi	r22, 0x02	; 2
    3c60:	4a ad       	ldd	r20, Y+58	; 0x3a
    3c62:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	aa e7       	ldi	r26, 0x7A	; 122
    3c6c:	b4 e4       	ldi	r27, 0x44	; 68
    3c6e:	8b 87       	std	Y+11, r24	; 0x0b
    3c70:	9c 87       	std	Y+12, r25	; 0x0c
    3c72:	ad 87       	std	Y+13, r26	; 0x0d
    3c74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	4a ef       	ldi	r20, 0xFA	; 250
    3c84:	54 e4       	ldi	r21, 0x44	; 68
    3c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	8f 83       	std	Y+7, r24	; 0x07
    3c90:	98 87       	std	Y+8, r25	; 0x08
    3c92:	a9 87       	std	Y+9, r26	; 0x09
    3c94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c96:	6f 81       	ldd	r22, Y+7	; 0x07
    3c98:	78 85       	ldd	r23, Y+8	; 0x08
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e8       	ldi	r20, 0x80	; 128
    3ca4:	5f e3       	ldi	r21, 0x3F	; 63
    3ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3caa:	88 23       	and	r24, r24
    3cac:	2c f4       	brge	.+10     	; 0x3cb8 <Represent_Temperature+0x48e>
		__ticks = 1;
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	9e 83       	std	Y+6, r25	; 0x06
    3cb4:	8d 83       	std	Y+5, r24	; 0x05
    3cb6:	3f c0       	rjmp	.+126    	; 0x3d36 <Represent_Temperature+0x50c>
	else if (__tmp > 65535)
    3cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cba:	78 85       	ldd	r23, Y+8	; 0x08
    3cbc:	89 85       	ldd	r24, Y+9	; 0x09
    3cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	3f ef       	ldi	r19, 0xFF	; 255
    3cc4:	4f e7       	ldi	r20, 0x7F	; 127
    3cc6:	57 e4       	ldi	r21, 0x47	; 71
    3cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ccc:	18 16       	cp	r1, r24
    3cce:	4c f5       	brge	.+82     	; 0x3d22 <Represent_Temperature+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	40 e2       	ldi	r20, 0x20	; 32
    3cde:	51 e4       	ldi	r21, 0x41	; 65
    3ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	bc 01       	movw	r22, r24
    3cea:	cd 01       	movw	r24, r26
    3cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	9e 83       	std	Y+6, r25	; 0x06
    3cf6:	8d 83       	std	Y+5, r24	; 0x05
    3cf8:	0f c0       	rjmp	.+30     	; 0x3d18 <Represent_Temperature+0x4ee>
    3cfa:	88 ec       	ldi	r24, 0xC8	; 200
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	9c 83       	std	Y+4, r25	; 0x04
    3d00:	8b 83       	std	Y+3, r24	; 0x03
    3d02:	8b 81       	ldd	r24, Y+3	; 0x03
    3d04:	9c 81       	ldd	r25, Y+4	; 0x04
    3d06:	01 97       	sbiw	r24, 0x01	; 1
    3d08:	f1 f7       	brne	.-4      	; 0x3d06 <Represent_Temperature+0x4dc>
    3d0a:	9c 83       	std	Y+4, r25	; 0x04
    3d0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d10:	9e 81       	ldd	r25, Y+6	; 0x06
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	9e 83       	std	Y+6, r25	; 0x06
    3d16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1c:	00 97       	sbiw	r24, 0x00	; 0
    3d1e:	69 f7       	brne	.-38     	; 0x3cfa <Represent_Temperature+0x4d0>
    3d20:	14 c0       	rjmp	.+40     	; 0x3d4a <Represent_Temperature+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d22:	6f 81       	ldd	r22, Y+7	; 0x07
    3d24:	78 85       	ldd	r23, Y+8	; 0x08
    3d26:	89 85       	ldd	r24, Y+9	; 0x09
    3d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	9e 83       	std	Y+6, r25	; 0x06
    3d34:	8d 83       	std	Y+5, r24	; 0x05
    3d36:	8d 81       	ldd	r24, Y+5	; 0x05
    3d38:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3a:	9a 83       	std	Y+2, r25	; 0x02
    3d3c:	89 83       	std	Y+1, r24	; 0x01
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	9a 81       	ldd	r25, Y+2	; 0x02
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	f1 f7       	brne	.-4      	; 0x3d42 <Represent_Temperature+0x518>
    3d46:	9a 83       	std	Y+2, r25	; 0x02
    3d48:	89 83       	std	Y+1, r24	; 0x01
				CLCD_vidSendString("DANGEROUS!");
				_delay_ms(1000);
				TIMR0_VidSetCompMatchVal(255);
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN3 , DIO_LOW);
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN2 , DIO_LOW);
				for (u8 i=0 ; i<6 ; i++)
    3d4a:	89 ad       	ldd	r24, Y+57	; 0x39
    3d4c:	8f 5f       	subi	r24, 0xFF	; 255
    3d4e:	89 af       	std	Y+57, r24	; 0x39
    3d50:	89 ad       	ldd	r24, Y+57	; 0x39
    3d52:	86 30       	cpi	r24, 0x06	; 6
    3d54:	08 f4       	brcc	.+2      	; 0x3d58 <Represent_Temperature+0x52e>
    3d56:	79 cf       	rjmp	.-270    	; 0x3c4a <Represent_Temperature+0x420>
    3d58:	73 cd       	rjmp	.-1306   	; 0x3840 <Represent_Temperature+0x16>

00003d5a <App_Select_Mode>:
		}
	}while(1);
}

void App_Select_Mode(void)
{
    3d5a:	0f 93       	push	r16
    3d5c:	1f 93       	push	r17
    3d5e:	df 93       	push	r29
    3d60:	cf 93       	push	r28
    3d62:	cd b7       	in	r28, 0x3d	; 61
    3d64:	de b7       	in	r29, 0x3e	; 62
    3d66:	c5 55       	subi	r28, 0x55	; 85
    3d68:	d0 40       	sbci	r29, 0x00	; 0
    3d6a:	0f b6       	in	r0, 0x3f	; 63
    3d6c:	f8 94       	cli
    3d6e:	de bf       	out	0x3e, r29	; 62
    3d70:	0f be       	out	0x3f, r0	; 63
    3d72:	cd bf       	out	0x3d, r28	; 61
	u8 key ;
	CLCD_voidSendCommand(1);
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
	CLCD_vidSendString("Enter Mode:") ;
    3d7a:	8a ef       	ldi	r24, 0xFA	; 250
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
	CLCD_GoToXY(0,12);
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	6c e0       	ldi	r22, 0x0C	; 12
    3d86:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
	while (1)
	{
		do
		{
			if(Reset_TempApp_Flag == 1)
    3d8a:	80 91 72 01 	lds	r24, 0x0172
    3d8e:	81 30       	cpi	r24, 0x01	; 1
    3d90:	09 f5       	brne	.+66     	; 0x3dd4 <App_Select_Mode+0x7a>
			{
				Reset_TempApp_Flag = 0 ;
    3d92:	10 92 72 01 	sts	0x0172, r1
				flag = 0 ;
    3d96:	10 92 73 01 	sts	0x0173, r1
				Temperature_Flag = 0 ;
    3d9a:	10 92 74 01 	sts	0x0174, r1
				counter = 13 ;
    3d9e:	8d e0       	ldi	r24, 0x0D	; 13
    3da0:	80 93 52 01 	sts	0x0152, r24
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN3 , DIO_LOW);
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	63 e0       	ldi	r22, 0x03	; 3
    3da8:	40 e0       	ldi	r20, 0x00	; 0
    3daa:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN2 , DIO_LOW);
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	62 e0       	ldi	r22, 0x02	; 2
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				DIO_vidSetPinVal(DIO_PORTA , DIO_PIN1 , DIO_LOW);
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	61 e0       	ldi	r22, 0x01	; 1
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <DIO_vidSetPinVal>
				TIMR0_VidSetCompMatchVal(0);
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	0e 94 16 11 	call	0x222c	; 0x222c <TIMR0_VidSetCompMatchVal>
				CLCD_voidSendCommand(1);
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
				App_Main_Menu();
    3dce:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <App_Main_Menu>
    3dd2:	0c c0       	rjmp	.+24     	; 0x3dec <App_Select_Mode+0x92>
				break ;
			}
			else
			{
				key = KPD_GetKeyPressed();
    3dd4:	0e 94 6d 10 	call	0x20da	; 0x20da <KPD_GetKeyPressed>
    3dd8:	fe 01       	movw	r30, r28
    3dda:	eb 5a       	subi	r30, 0xAB	; 171
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	80 83       	st	Z, r24
			}
		}while(key == 0xff);
    3de0:	fe 01       	movw	r30, r28
    3de2:	eb 5a       	subi	r30, 0xAB	; 171
    3de4:	ff 4f       	sbci	r31, 0xFF	; 255
    3de6:	80 81       	ld	r24, Z
    3de8:	8f 3f       	cpi	r24, 0xFF	; 255
    3dea:	79 f2       	breq	.-98     	; 0x3d8a <App_Select_Mode+0x30>

		if(key == 1) /*Start The System*/
    3dec:	fe 01       	movw	r30, r28
    3dee:	eb 5a       	subi	r30, 0xAB	; 171
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	80 81       	ld	r24, Z
    3df4:	81 30       	cpi	r24, 0x01	; 1
    3df6:	09 f0       	breq	.+2      	; 0x3dfa <App_Select_Mode+0xa0>
    3df8:	50 c1       	rjmp	.+672    	; 0x409a <App_Select_Mode+0x340>
		{
			CLCD_write_Number(key);
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	eb 5a       	subi	r30, 0xAB	; 171
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	80 81       	ld	r24, Z
    3e02:	88 2f       	mov	r24, r24
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	0e 94 ca 0a 	call	0x1594	; 0x1594 <CLCD_write_Number>
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	ef 5a       	subi	r30, 0xAF	; 175
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	aa e7       	ldi	r26, 0x7A	; 122
    3e16:	b4 e4       	ldi	r27, 0x44	; 68
    3e18:	80 83       	st	Z, r24
    3e1a:	91 83       	std	Z+1, r25	; 0x01
    3e1c:	a2 83       	std	Z+2, r26	; 0x02
    3e1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e20:	8e 01       	movw	r16, r28
    3e22:	03 5b       	subi	r16, 0xB3	; 179
    3e24:	1f 4f       	sbci	r17, 0xFF	; 255
    3e26:	fe 01       	movw	r30, r28
    3e28:	ef 5a       	subi	r30, 0xAF	; 175
    3e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2c:	60 81       	ld	r22, Z
    3e2e:	71 81       	ldd	r23, Z+1	; 0x01
    3e30:	82 81       	ldd	r24, Z+2	; 0x02
    3e32:	93 81       	ldd	r25, Z+3	; 0x03
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	4a ef       	ldi	r20, 0xFA	; 250
    3e3a:	54 e4       	ldi	r21, 0x44	; 68
    3e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	f8 01       	movw	r30, r16
    3e46:	80 83       	st	Z, r24
    3e48:	91 83       	std	Z+1, r25	; 0x01
    3e4a:	a2 83       	std	Z+2, r26	; 0x02
    3e4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e4e:	fe 01       	movw	r30, r28
    3e50:	e3 5b       	subi	r30, 0xB3	; 179
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	60 81       	ld	r22, Z
    3e56:	71 81       	ldd	r23, Z+1	; 0x01
    3e58:	82 81       	ldd	r24, Z+2	; 0x02
    3e5a:	93 81       	ldd	r25, Z+3	; 0x03
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	40 e8       	ldi	r20, 0x80	; 128
    3e62:	5f e3       	ldi	r21, 0x3F	; 63
    3e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e68:	88 23       	and	r24, r24
    3e6a:	44 f4       	brge	.+16     	; 0x3e7c <App_Select_Mode+0x122>
		__ticks = 1;
    3e6c:	fe 01       	movw	r30, r28
    3e6e:	e5 5b       	subi	r30, 0xB5	; 181
    3e70:	ff 4f       	sbci	r31, 0xFF	; 255
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	91 83       	std	Z+1, r25	; 0x01
    3e78:	80 83       	st	Z, r24
    3e7a:	64 c0       	rjmp	.+200    	; 0x3f44 <App_Select_Mode+0x1ea>
	else if (__tmp > 65535)
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e3 5b       	subi	r30, 0xB3	; 179
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	3f ef       	ldi	r19, 0xFF	; 255
    3e8e:	4f e7       	ldi	r20, 0x7F	; 127
    3e90:	57 e4       	ldi	r21, 0x47	; 71
    3e92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e96:	18 16       	cp	r1, r24
    3e98:	0c f0       	brlt	.+2      	; 0x3e9c <App_Select_Mode+0x142>
    3e9a:	43 c0       	rjmp	.+134    	; 0x3f22 <App_Select_Mode+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	ef 5a       	subi	r30, 0xAF	; 175
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	60 81       	ld	r22, Z
    3ea4:	71 81       	ldd	r23, Z+1	; 0x01
    3ea6:	82 81       	ldd	r24, Z+2	; 0x02
    3ea8:	93 81       	ldd	r25, Z+3	; 0x03
    3eaa:	20 e0       	ldi	r18, 0x00	; 0
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	40 e2       	ldi	r20, 0x20	; 32
    3eb0:	51 e4       	ldi	r21, 0x41	; 65
    3eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	8e 01       	movw	r16, r28
    3ebc:	05 5b       	subi	r16, 0xB5	; 181
    3ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	f8 01       	movw	r30, r16
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
    3ed2:	1f c0       	rjmp	.+62     	; 0x3f12 <App_Select_Mode+0x1b8>
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e7 5b       	subi	r30, 0xB7	; 183
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	88 ec       	ldi	r24, 0xC8	; 200
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	91 83       	std	Z+1, r25	; 0x01
    3ee0:	80 83       	st	Z, r24
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	e7 5b       	subi	r30, 0xB7	; 183
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <App_Select_Mode+0x192>
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	e7 5b       	subi	r30, 0xB7	; 183
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efa:	de 01       	movw	r26, r28
    3efc:	a5 5b       	subi	r26, 0xB5	; 181
    3efe:	bf 4f       	sbci	r27, 0xFF	; 255
    3f00:	fe 01       	movw	r30, r28
    3f02:	e5 5b       	subi	r30, 0xB5	; 181
    3f04:	ff 4f       	sbci	r31, 0xFF	; 255
    3f06:	80 81       	ld	r24, Z
    3f08:	91 81       	ldd	r25, Z+1	; 0x01
    3f0a:	01 97       	sbiw	r24, 0x01	; 1
    3f0c:	11 96       	adiw	r26, 0x01	; 1
    3f0e:	9c 93       	st	X, r25
    3f10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f12:	fe 01       	movw	r30, r28
    3f14:	e5 5b       	subi	r30, 0xB5	; 181
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	80 81       	ld	r24, Z
    3f1a:	91 81       	ldd	r25, Z+1	; 0x01
    3f1c:	00 97       	sbiw	r24, 0x00	; 0
    3f1e:	d1 f6       	brne	.-76     	; 0x3ed4 <App_Select_Mode+0x17a>
    3f20:	27 c0       	rjmp	.+78     	; 0x3f70 <App_Select_Mode+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f22:	8e 01       	movw	r16, r28
    3f24:	05 5b       	subi	r16, 0xB5	; 181
    3f26:	1f 4f       	sbci	r17, 0xFF	; 255
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e3 5b       	subi	r30, 0xB3	; 179
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	60 81       	ld	r22, Z
    3f30:	71 81       	ldd	r23, Z+1	; 0x01
    3f32:	82 81       	ldd	r24, Z+2	; 0x02
    3f34:	93 81       	ldd	r25, Z+3	; 0x03
    3f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	f8 01       	movw	r30, r16
    3f40:	91 83       	std	Z+1, r25	; 0x01
    3f42:	80 83       	st	Z, r24
    3f44:	de 01       	movw	r26, r28
    3f46:	a9 5b       	subi	r26, 0xB9	; 185
    3f48:	bf 4f       	sbci	r27, 0xFF	; 255
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	e5 5b       	subi	r30, 0xB5	; 181
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	80 81       	ld	r24, Z
    3f52:	91 81       	ldd	r25, Z+1	; 0x01
    3f54:	8d 93       	st	X+, r24
    3f56:	9c 93       	st	X, r25
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e9 5b       	subi	r30, 0xB9	; 185
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	80 81       	ld	r24, Z
    3f60:	91 81       	ldd	r25, Z+1	; 0x01
    3f62:	01 97       	sbiw	r24, 0x01	; 1
    3f64:	f1 f7       	brne	.-4      	; 0x3f62 <App_Select_Mode+0x208>
    3f66:	fe 01       	movw	r30, r28
    3f68:	e9 5b       	subi	r30, 0xB9	; 185
    3f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6c:	91 83       	std	Z+1, r25	; 0x01
    3f6e:	80 83       	st	Z, r24
			_delay_ms(1000);
			CLCD_voidSendCommand(1);
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
			CLCD_vidSendString("Processing...") ;
    3f76:	86 e0       	ldi	r24, 0x06	; 6
    3f78:	91 e0       	ldi	r25, 0x01	; 1
    3f7a:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    3f7e:	fe 01       	movw	r30, r28
    3f80:	ed 5b       	subi	r30, 0xBD	; 189
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	80 e0       	ldi	r24, 0x00	; 0
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	aa e7       	ldi	r26, 0x7A	; 122
    3f8a:	b4 e4       	ldi	r27, 0x44	; 68
    3f8c:	80 83       	st	Z, r24
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	a2 83       	std	Z+2, r26	; 0x02
    3f92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f94:	8e 01       	movw	r16, r28
    3f96:	01 5c       	subi	r16, 0xC1	; 193
    3f98:	1f 4f       	sbci	r17, 0xFF	; 255
    3f9a:	fe 01       	movw	r30, r28
    3f9c:	ed 5b       	subi	r30, 0xBD	; 189
    3f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa0:	60 81       	ld	r22, Z
    3fa2:	71 81       	ldd	r23, Z+1	; 0x01
    3fa4:	82 81       	ldd	r24, Z+2	; 0x02
    3fa6:	93 81       	ldd	r25, Z+3	; 0x03
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	4a ef       	ldi	r20, 0xFA	; 250
    3fae:	54 e4       	ldi	r21, 0x44	; 68
    3fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	f8 01       	movw	r30, r16
    3fba:	80 83       	st	Z, r24
    3fbc:	91 83       	std	Z+1, r25	; 0x01
    3fbe:	a2 83       	std	Z+2, r26	; 0x02
    3fc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	ff 96       	adiw	r30, 0x3f	; 63
    3fc6:	60 81       	ld	r22, Z
    3fc8:	71 81       	ldd	r23, Z+1	; 0x01
    3fca:	82 81       	ldd	r24, Z+2	; 0x02
    3fcc:	93 81       	ldd	r25, Z+3	; 0x03
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	40 e8       	ldi	r20, 0x80	; 128
    3fd4:	5f e3       	ldi	r21, 0x3F	; 63
    3fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fda:	88 23       	and	r24, r24
    3fdc:	2c f4       	brge	.+10     	; 0x3fe8 <App_Select_Mode+0x28e>
		__ticks = 1;
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	9e af       	std	Y+62, r25	; 0x3e
    3fe4:	8d af       	std	Y+61, r24	; 0x3d
    3fe6:	46 c0       	rjmp	.+140    	; 0x4074 <App_Select_Mode+0x31a>
	else if (__tmp > 65535)
    3fe8:	fe 01       	movw	r30, r28
    3fea:	ff 96       	adiw	r30, 0x3f	; 63
    3fec:	60 81       	ld	r22, Z
    3fee:	71 81       	ldd	r23, Z+1	; 0x01
    3ff0:	82 81       	ldd	r24, Z+2	; 0x02
    3ff2:	93 81       	ldd	r25, Z+3	; 0x03
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	3f ef       	ldi	r19, 0xFF	; 255
    3ff8:	4f e7       	ldi	r20, 0x7F	; 127
    3ffa:	57 e4       	ldi	r21, 0x47	; 71
    3ffc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4000:	18 16       	cp	r1, r24
    4002:	64 f5       	brge	.+88     	; 0x405c <App_Select_Mode+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4004:	fe 01       	movw	r30, r28
    4006:	ed 5b       	subi	r30, 0xBD	; 189
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	60 81       	ld	r22, Z
    400c:	71 81       	ldd	r23, Z+1	; 0x01
    400e:	82 81       	ldd	r24, Z+2	; 0x02
    4010:	93 81       	ldd	r25, Z+3	; 0x03
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	40 e2       	ldi	r20, 0x20	; 32
    4018:	51 e4       	ldi	r21, 0x41	; 65
    401a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	bc 01       	movw	r22, r24
    4024:	cd 01       	movw	r24, r26
    4026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	9e af       	std	Y+62, r25	; 0x3e
    4030:	8d af       	std	Y+61, r24	; 0x3d
    4032:	0f c0       	rjmp	.+30     	; 0x4052 <App_Select_Mode+0x2f8>
    4034:	88 ec       	ldi	r24, 0xC8	; 200
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	9c af       	std	Y+60, r25	; 0x3c
    403a:	8b af       	std	Y+59, r24	; 0x3b
    403c:	8b ad       	ldd	r24, Y+59	; 0x3b
    403e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4040:	01 97       	sbiw	r24, 0x01	; 1
    4042:	f1 f7       	brne	.-4      	; 0x4040 <App_Select_Mode+0x2e6>
    4044:	9c af       	std	Y+60, r25	; 0x3c
    4046:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4048:	8d ad       	ldd	r24, Y+61	; 0x3d
    404a:	9e ad       	ldd	r25, Y+62	; 0x3e
    404c:	01 97       	sbiw	r24, 0x01	; 1
    404e:	9e af       	std	Y+62, r25	; 0x3e
    4050:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4052:	8d ad       	ldd	r24, Y+61	; 0x3d
    4054:	9e ad       	ldd	r25, Y+62	; 0x3e
    4056:	00 97       	sbiw	r24, 0x00	; 0
    4058:	69 f7       	brne	.-38     	; 0x4034 <App_Select_Mode+0x2da>
    405a:	16 c0       	rjmp	.+44     	; 0x4088 <App_Select_Mode+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    405c:	fe 01       	movw	r30, r28
    405e:	ff 96       	adiw	r30, 0x3f	; 63
    4060:	60 81       	ld	r22, Z
    4062:	71 81       	ldd	r23, Z+1	; 0x01
    4064:	82 81       	ldd	r24, Z+2	; 0x02
    4066:	93 81       	ldd	r25, Z+3	; 0x03
    4068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	9e af       	std	Y+62, r25	; 0x3e
    4072:	8d af       	std	Y+61, r24	; 0x3d
    4074:	8d ad       	ldd	r24, Y+61	; 0x3d
    4076:	9e ad       	ldd	r25, Y+62	; 0x3e
    4078:	9a af       	std	Y+58, r25	; 0x3a
    407a:	89 af       	std	Y+57, r24	; 0x39
    407c:	89 ad       	ldd	r24, Y+57	; 0x39
    407e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4080:	01 97       	sbiw	r24, 0x01	; 1
    4082:	f1 f7       	brne	.-4      	; 0x4080 <App_Select_Mode+0x326>
    4084:	9a af       	std	Y+58, r25	; 0x3a
    4086:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			CLCD_voidSendCommand(1);
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
			Represent_Temperature();
    408e:	0e 94 15 1c 	call	0x382a	; 0x382a <Represent_Temperature>
			flag = 1 ;
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	80 93 73 01 	sts	0x0173, r24
    4098:	78 ce       	rjmp	.-784    	; 0x3d8a <App_Select_Mode+0x30>
		}
		else if(key == 2) /*Enter Temperature*/
    409a:	fe 01       	movw	r30, r28
    409c:	eb 5a       	subi	r30, 0xAB	; 171
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	80 81       	ld	r24, Z
    40a2:	82 30       	cpi	r24, 0x02	; 2
    40a4:	09 f0       	breq	.+2      	; 0x40a8 <App_Select_Mode+0x34e>
    40a6:	80 c0       	rjmp	.+256    	; 0x41a8 <App_Select_Mode+0x44e>
		{
			CLCD_write_Number(key);
    40a8:	fe 01       	movw	r30, r28
    40aa:	eb 5a       	subi	r30, 0xAB	; 171
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	80 81       	ld	r24, Z
    40b0:	88 2f       	mov	r24, r24
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <CLCD_write_Number>
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	aa e7       	ldi	r26, 0x7A	; 122
    40be:	b4 e4       	ldi	r27, 0x44	; 68
    40c0:	8d ab       	std	Y+53, r24	; 0x35
    40c2:	9e ab       	std	Y+54, r25	; 0x36
    40c4:	af ab       	std	Y+55, r26	; 0x37
    40c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40c8:	6d a9       	ldd	r22, Y+53	; 0x35
    40ca:	7e a9       	ldd	r23, Y+54	; 0x36
    40cc:	8f a9       	ldd	r24, Y+55	; 0x37
    40ce:	98 ad       	ldd	r25, Y+56	; 0x38
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	4a ef       	ldi	r20, 0xFA	; 250
    40d6:	54 e4       	ldi	r21, 0x44	; 68
    40d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	89 ab       	std	Y+49, r24	; 0x31
    40e2:	9a ab       	std	Y+50, r25	; 0x32
    40e4:	ab ab       	std	Y+51, r26	; 0x33
    40e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40e8:	69 a9       	ldd	r22, Y+49	; 0x31
    40ea:	7a a9       	ldd	r23, Y+50	; 0x32
    40ec:	8b a9       	ldd	r24, Y+51	; 0x33
    40ee:	9c a9       	ldd	r25, Y+52	; 0x34
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	40 e8       	ldi	r20, 0x80	; 128
    40f6:	5f e3       	ldi	r21, 0x3F	; 63
    40f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40fc:	88 23       	and	r24, r24
    40fe:	2c f4       	brge	.+10     	; 0x410a <App_Select_Mode+0x3b0>
		__ticks = 1;
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	98 ab       	std	Y+48, r25	; 0x30
    4106:	8f a7       	std	Y+47, r24	; 0x2f
    4108:	3f c0       	rjmp	.+126    	; 0x4188 <App_Select_Mode+0x42e>
	else if (__tmp > 65535)
    410a:	69 a9       	ldd	r22, Y+49	; 0x31
    410c:	7a a9       	ldd	r23, Y+50	; 0x32
    410e:	8b a9       	ldd	r24, Y+51	; 0x33
    4110:	9c a9       	ldd	r25, Y+52	; 0x34
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	3f ef       	ldi	r19, 0xFF	; 255
    4116:	4f e7       	ldi	r20, 0x7F	; 127
    4118:	57 e4       	ldi	r21, 0x47	; 71
    411a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    411e:	18 16       	cp	r1, r24
    4120:	4c f5       	brge	.+82     	; 0x4174 <App_Select_Mode+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4122:	6d a9       	ldd	r22, Y+53	; 0x35
    4124:	7e a9       	ldd	r23, Y+54	; 0x36
    4126:	8f a9       	ldd	r24, Y+55	; 0x37
    4128:	98 ad       	ldd	r25, Y+56	; 0x38
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	40 e2       	ldi	r20, 0x20	; 32
    4130:	51 e4       	ldi	r21, 0x41	; 65
    4132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4136:	dc 01       	movw	r26, r24
    4138:	cb 01       	movw	r24, r22
    413a:	bc 01       	movw	r22, r24
    413c:	cd 01       	movw	r24, r26
    413e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	98 ab       	std	Y+48, r25	; 0x30
    4148:	8f a7       	std	Y+47, r24	; 0x2f
    414a:	0f c0       	rjmp	.+30     	; 0x416a <App_Select_Mode+0x410>
    414c:	88 ec       	ldi	r24, 0xC8	; 200
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	9e a7       	std	Y+46, r25	; 0x2e
    4152:	8d a7       	std	Y+45, r24	; 0x2d
    4154:	8d a5       	ldd	r24, Y+45	; 0x2d
    4156:	9e a5       	ldd	r25, Y+46	; 0x2e
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	f1 f7       	brne	.-4      	; 0x4158 <App_Select_Mode+0x3fe>
    415c:	9e a7       	std	Y+46, r25	; 0x2e
    415e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4160:	8f a5       	ldd	r24, Y+47	; 0x2f
    4162:	98 a9       	ldd	r25, Y+48	; 0x30
    4164:	01 97       	sbiw	r24, 0x01	; 1
    4166:	98 ab       	std	Y+48, r25	; 0x30
    4168:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    416a:	8f a5       	ldd	r24, Y+47	; 0x2f
    416c:	98 a9       	ldd	r25, Y+48	; 0x30
    416e:	00 97       	sbiw	r24, 0x00	; 0
    4170:	69 f7       	brne	.-38     	; 0x414c <App_Select_Mode+0x3f2>
    4172:	14 c0       	rjmp	.+40     	; 0x419c <App_Select_Mode+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4174:	69 a9       	ldd	r22, Y+49	; 0x31
    4176:	7a a9       	ldd	r23, Y+50	; 0x32
    4178:	8b a9       	ldd	r24, Y+51	; 0x33
    417a:	9c a9       	ldd	r25, Y+52	; 0x34
    417c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4180:	dc 01       	movw	r26, r24
    4182:	cb 01       	movw	r24, r22
    4184:	98 ab       	std	Y+48, r25	; 0x30
    4186:	8f a7       	std	Y+47, r24	; 0x2f
    4188:	8f a5       	ldd	r24, Y+47	; 0x2f
    418a:	98 a9       	ldd	r25, Y+48	; 0x30
    418c:	9c a7       	std	Y+44, r25	; 0x2c
    418e:	8b a7       	std	Y+43, r24	; 0x2b
    4190:	8b a5       	ldd	r24, Y+43	; 0x2b
    4192:	9c a5       	ldd	r25, Y+44	; 0x2c
    4194:	01 97       	sbiw	r24, 0x01	; 1
    4196:	f1 f7       	brne	.-4      	; 0x4194 <App_Select_Mode+0x43a>
    4198:	9c a7       	std	Y+44, r25	; 0x2c
    419a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			Read_Temperature();
    419c:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Read_Temperature>
			flag = 1 ;
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	80 93 73 01 	sts	0x0173, r24
    41a6:	f1 cd       	rjmp	.-1054   	; 0x3d8a <App_Select_Mode+0x30>
		}
		else if(key == 3) /*Show Current Temp*/
    41a8:	fe 01       	movw	r30, r28
    41aa:	eb 5a       	subi	r30, 0xAB	; 171
    41ac:	ff 4f       	sbci	r31, 0xFF	; 255
    41ae:	80 81       	ld	r24, Z
    41b0:	83 30       	cpi	r24, 0x03	; 3
    41b2:	09 f0       	breq	.+2      	; 0x41b6 <App_Select_Mode+0x45c>
    41b4:	34 c1       	rjmp	.+616    	; 0x441e <App_Select_Mode+0x6c4>
		{
			CLCD_write_Number(key);
    41b6:	fe 01       	movw	r30, r28
    41b8:	eb 5a       	subi	r30, 0xAB	; 171
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	80 81       	ld	r24, Z
    41be:	88 2f       	mov	r24, r24
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <CLCD_write_Number>
    41c6:	80 e0       	ldi	r24, 0x00	; 0
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	aa e7       	ldi	r26, 0x7A	; 122
    41cc:	b4 e4       	ldi	r27, 0x44	; 68
    41ce:	8f a3       	std	Y+39, r24	; 0x27
    41d0:	98 a7       	std	Y+40, r25	; 0x28
    41d2:	a9 a7       	std	Y+41, r26	; 0x29
    41d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d6:	6f a1       	ldd	r22, Y+39	; 0x27
    41d8:	78 a5       	ldd	r23, Y+40	; 0x28
    41da:	89 a5       	ldd	r24, Y+41	; 0x29
    41dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    41de:	20 e0       	ldi	r18, 0x00	; 0
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	4a ef       	ldi	r20, 0xFA	; 250
    41e4:	54 e4       	ldi	r21, 0x44	; 68
    41e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	8b a3       	std	Y+35, r24	; 0x23
    41f0:	9c a3       	std	Y+36, r25	; 0x24
    41f2:	ad a3       	std	Y+37, r26	; 0x25
    41f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    41f6:	6b a1       	ldd	r22, Y+35	; 0x23
    41f8:	7c a1       	ldd	r23, Y+36	; 0x24
    41fa:	8d a1       	ldd	r24, Y+37	; 0x25
    41fc:	9e a1       	ldd	r25, Y+38	; 0x26
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	40 e8       	ldi	r20, 0x80	; 128
    4204:	5f e3       	ldi	r21, 0x3F	; 63
    4206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    420a:	88 23       	and	r24, r24
    420c:	2c f4       	brge	.+10     	; 0x4218 <App_Select_Mode+0x4be>
		__ticks = 1;
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	9a a3       	std	Y+34, r25	; 0x22
    4214:	89 a3       	std	Y+33, r24	; 0x21
    4216:	3f c0       	rjmp	.+126    	; 0x4296 <App_Select_Mode+0x53c>
	else if (__tmp > 65535)
    4218:	6b a1       	ldd	r22, Y+35	; 0x23
    421a:	7c a1       	ldd	r23, Y+36	; 0x24
    421c:	8d a1       	ldd	r24, Y+37	; 0x25
    421e:	9e a1       	ldd	r25, Y+38	; 0x26
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	3f ef       	ldi	r19, 0xFF	; 255
    4224:	4f e7       	ldi	r20, 0x7F	; 127
    4226:	57 e4       	ldi	r21, 0x47	; 71
    4228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    422c:	18 16       	cp	r1, r24
    422e:	4c f5       	brge	.+82     	; 0x4282 <App_Select_Mode+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4230:	6f a1       	ldd	r22, Y+39	; 0x27
    4232:	78 a5       	ldd	r23, Y+40	; 0x28
    4234:	89 a5       	ldd	r24, Y+41	; 0x29
    4236:	9a a5       	ldd	r25, Y+42	; 0x2a
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	40 e2       	ldi	r20, 0x20	; 32
    423e:	51 e4       	ldi	r21, 0x41	; 65
    4240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4244:	dc 01       	movw	r26, r24
    4246:	cb 01       	movw	r24, r22
    4248:	bc 01       	movw	r22, r24
    424a:	cd 01       	movw	r24, r26
    424c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4250:	dc 01       	movw	r26, r24
    4252:	cb 01       	movw	r24, r22
    4254:	9a a3       	std	Y+34, r25	; 0x22
    4256:	89 a3       	std	Y+33, r24	; 0x21
    4258:	0f c0       	rjmp	.+30     	; 0x4278 <App_Select_Mode+0x51e>
    425a:	88 ec       	ldi	r24, 0xC8	; 200
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	98 a3       	std	Y+32, r25	; 0x20
    4260:	8f 8f       	std	Y+31, r24	; 0x1f
    4262:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4264:	98 a1       	ldd	r25, Y+32	; 0x20
    4266:	01 97       	sbiw	r24, 0x01	; 1
    4268:	f1 f7       	brne	.-4      	; 0x4266 <App_Select_Mode+0x50c>
    426a:	98 a3       	std	Y+32, r25	; 0x20
    426c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    426e:	89 a1       	ldd	r24, Y+33	; 0x21
    4270:	9a a1       	ldd	r25, Y+34	; 0x22
    4272:	01 97       	sbiw	r24, 0x01	; 1
    4274:	9a a3       	std	Y+34, r25	; 0x22
    4276:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4278:	89 a1       	ldd	r24, Y+33	; 0x21
    427a:	9a a1       	ldd	r25, Y+34	; 0x22
    427c:	00 97       	sbiw	r24, 0x00	; 0
    427e:	69 f7       	brne	.-38     	; 0x425a <App_Select_Mode+0x500>
    4280:	14 c0       	rjmp	.+40     	; 0x42aa <App_Select_Mode+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4282:	6b a1       	ldd	r22, Y+35	; 0x23
    4284:	7c a1       	ldd	r23, Y+36	; 0x24
    4286:	8d a1       	ldd	r24, Y+37	; 0x25
    4288:	9e a1       	ldd	r25, Y+38	; 0x26
    428a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428e:	dc 01       	movw	r26, r24
    4290:	cb 01       	movw	r24, r22
    4292:	9a a3       	std	Y+34, r25	; 0x22
    4294:	89 a3       	std	Y+33, r24	; 0x21
    4296:	89 a1       	ldd	r24, Y+33	; 0x21
    4298:	9a a1       	ldd	r25, Y+34	; 0x22
    429a:	9e 8f       	std	Y+30, r25	; 0x1e
    429c:	8d 8f       	std	Y+29, r24	; 0x1d
    429e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42a2:	01 97       	sbiw	r24, 0x01	; 1
    42a4:	f1 f7       	brne	.-4      	; 0x42a2 <App_Select_Mode+0x548>
    42a6:	9e 8f       	std	Y+30, r25	; 0x1e
    42a8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			CLCD_voidSendCommand(1);
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
			while (1)
			{
				if (Reset_TempApp_Flag == 1)
    42b0:	80 91 72 01 	lds	r24, 0x0172
    42b4:	81 30       	cpi	r24, 0x01	; 1
    42b6:	09 f4       	brne	.+2      	; 0x42ba <App_Select_Mode+0x560>
    42b8:	68 cd       	rjmp	.-1328   	; 0x3d8a <App_Select_Mode+0x30>
				{
					break ;
				}
				else
				{
					ADC_u8StatrtConversionSynch(0 , &ADC_Reading);
    42ba:	29 e7       	ldi	r18, 0x79	; 121
    42bc:	31 e0       	ldi	r19, 0x01	; 1
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	b9 01       	movw	r22, r18
    42c2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StatrtConversionSynch>
					Milli_Volt = (u16)((u32)ADC_Reading * 500) / 256 ;
    42c6:	80 91 79 01 	lds	r24, 0x0179
    42ca:	90 91 7a 01 	lds	r25, 0x017A
    42ce:	cc 01       	movw	r24, r24
    42d0:	a0 e0       	ldi	r26, 0x00	; 0
    42d2:	b0 e0       	ldi	r27, 0x00	; 0
    42d4:	24 ef       	ldi	r18, 0xF4	; 244
    42d6:	31 e0       	ldi	r19, 0x01	; 1
    42d8:	40 e0       	ldi	r20, 0x00	; 0
    42da:	50 e0       	ldi	r21, 0x00	; 0
    42dc:	bc 01       	movw	r22, r24
    42de:	cd 01       	movw	r24, r26
    42e0:	0e 94 81 23 	call	0x4702	; 0x4702 <__mulsi3>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	89 2f       	mov	r24, r25
    42ea:	99 27       	eor	r25, r25
    42ec:	90 93 80 01 	sts	0x0180, r25
    42f0:	80 93 7f 01 	sts	0x017F, r24
					Temperature = Milli_Volt / 10 ;
    42f4:	80 91 7f 01 	lds	r24, 0x017F
    42f8:	90 91 80 01 	lds	r25, 0x0180
    42fc:	2a e0       	ldi	r18, 0x0A	; 10
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	b9 01       	movw	r22, r18
    4302:	0e 94 a0 23 	call	0x4740	; 0x4740 <__udivmodhi4>
    4306:	cb 01       	movw	r24, r22
    4308:	90 93 78 01 	sts	0x0178, r25
    430c:	80 93 77 01 	sts	0x0177, r24

					CLCD_vidSendString("Curr Temp:");
    4310:	84 e1       	ldi	r24, 0x14	; 20
    4312:	91 e0       	ldi	r25, 0x01	; 1
    4314:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
					CLCD_GoToXY(0,11);
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	6b e0       	ldi	r22, 0x0B	; 11
    431c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
					CLCD_write_Number(Temperature);
    4320:	80 91 77 01 	lds	r24, 0x0177
    4324:	90 91 78 01 	lds	r25, 0x0178
    4328:	0e 94 ca 0a 	call	0x1594	; 0x1594 <CLCD_write_Number>
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	aa e7       	ldi	r26, 0x7A	; 122
    4332:	b4 e4       	ldi	r27, 0x44	; 68
    4334:	89 8f       	std	Y+25, r24	; 0x19
    4336:	9a 8f       	std	Y+26, r25	; 0x1a
    4338:	ab 8f       	std	Y+27, r26	; 0x1b
    433a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    433c:	69 8d       	ldd	r22, Y+25	; 0x19
    433e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	4a ef       	ldi	r20, 0xFA	; 250
    434a:	54 e4       	ldi	r21, 0x44	; 68
    434c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4350:	dc 01       	movw	r26, r24
    4352:	cb 01       	movw	r24, r22
    4354:	8d 8b       	std	Y+21, r24	; 0x15
    4356:	9e 8b       	std	Y+22, r25	; 0x16
    4358:	af 8b       	std	Y+23, r26	; 0x17
    435a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    435c:	6d 89       	ldd	r22, Y+21	; 0x15
    435e:	7e 89       	ldd	r23, Y+22	; 0x16
    4360:	8f 89       	ldd	r24, Y+23	; 0x17
    4362:	98 8d       	ldd	r25, Y+24	; 0x18
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	40 e8       	ldi	r20, 0x80	; 128
    436a:	5f e3       	ldi	r21, 0x3F	; 63
    436c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4370:	88 23       	and	r24, r24
    4372:	2c f4       	brge	.+10     	; 0x437e <App_Select_Mode+0x624>
		__ticks = 1;
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	9c 8b       	std	Y+20, r25	; 0x14
    437a:	8b 8b       	std	Y+19, r24	; 0x13
    437c:	3f c0       	rjmp	.+126    	; 0x43fc <App_Select_Mode+0x6a2>
	else if (__tmp > 65535)
    437e:	6d 89       	ldd	r22, Y+21	; 0x15
    4380:	7e 89       	ldd	r23, Y+22	; 0x16
    4382:	8f 89       	ldd	r24, Y+23	; 0x17
    4384:	98 8d       	ldd	r25, Y+24	; 0x18
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	3f ef       	ldi	r19, 0xFF	; 255
    438a:	4f e7       	ldi	r20, 0x7F	; 127
    438c:	57 e4       	ldi	r21, 0x47	; 71
    438e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4392:	18 16       	cp	r1, r24
    4394:	4c f5       	brge	.+82     	; 0x43e8 <App_Select_Mode+0x68e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4396:	69 8d       	ldd	r22, Y+25	; 0x19
    4398:	7a 8d       	ldd	r23, Y+26	; 0x1a
    439a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    439c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	40 e2       	ldi	r20, 0x20	; 32
    43a4:	51 e4       	ldi	r21, 0x41	; 65
    43a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	bc 01       	movw	r22, r24
    43b0:	cd 01       	movw	r24, r26
    43b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	9c 8b       	std	Y+20, r25	; 0x14
    43bc:	8b 8b       	std	Y+19, r24	; 0x13
    43be:	0f c0       	rjmp	.+30     	; 0x43de <App_Select_Mode+0x684>
    43c0:	88 ec       	ldi	r24, 0xC8	; 200
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	9a 8b       	std	Y+18, r25	; 0x12
    43c6:	89 8b       	std	Y+17, r24	; 0x11
    43c8:	89 89       	ldd	r24, Y+17	; 0x11
    43ca:	9a 89       	ldd	r25, Y+18	; 0x12
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <App_Select_Mode+0x672>
    43d0:	9a 8b       	std	Y+18, r25	; 0x12
    43d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d4:	8b 89       	ldd	r24, Y+19	; 0x13
    43d6:	9c 89       	ldd	r25, Y+20	; 0x14
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	9c 8b       	std	Y+20, r25	; 0x14
    43dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43de:	8b 89       	ldd	r24, Y+19	; 0x13
    43e0:	9c 89       	ldd	r25, Y+20	; 0x14
    43e2:	00 97       	sbiw	r24, 0x00	; 0
    43e4:	69 f7       	brne	.-38     	; 0x43c0 <App_Select_Mode+0x666>
    43e6:	14 c0       	rjmp	.+40     	; 0x4410 <App_Select_Mode+0x6b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e8:	6d 89       	ldd	r22, Y+21	; 0x15
    43ea:	7e 89       	ldd	r23, Y+22	; 0x16
    43ec:	8f 89       	ldd	r24, Y+23	; 0x17
    43ee:	98 8d       	ldd	r25, Y+24	; 0x18
    43f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	9c 8b       	std	Y+20, r25	; 0x14
    43fa:	8b 8b       	std	Y+19, r24	; 0x13
    43fc:	8b 89       	ldd	r24, Y+19	; 0x13
    43fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4400:	98 8b       	std	Y+16, r25	; 0x10
    4402:	8f 87       	std	Y+15, r24	; 0x0f
    4404:	8f 85       	ldd	r24, Y+15	; 0x0f
    4406:	98 89       	ldd	r25, Y+16	; 0x10
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	f1 f7       	brne	.-4      	; 0x4408 <App_Select_Mode+0x6ae>
    440c:	98 8b       	std	Y+16, r25	; 0x10
    440e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					CLCD_voidSendCommand(1);
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
					flag = 1 ;
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	80 93 73 01 	sts	0x0173, r24
    441c:	49 cf       	rjmp	.-366    	; 0x42b0 <App_Select_Mode+0x556>
				}
			}
		}
		else
		{
			CLCD_voidSendCommand(1);
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
			CLCD_vidSendString("Wrong Option!");
    4424:	8f e1       	ldi	r24, 0x1F	; 31
    4426:	91 e0       	ldi	r25, 0x01	; 1
    4428:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	aa ef       	ldi	r26, 0xFA	; 250
    4432:	b4 e4       	ldi	r27, 0x44	; 68
    4434:	8b 87       	std	Y+11, r24	; 0x0b
    4436:	9c 87       	std	Y+12, r25	; 0x0c
    4438:	ad 87       	std	Y+13, r26	; 0x0d
    443a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    443c:	6b 85       	ldd	r22, Y+11	; 0x0b
    443e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4440:	8d 85       	ldd	r24, Y+13	; 0x0d
    4442:	9e 85       	ldd	r25, Y+14	; 0x0e
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	4a ef       	ldi	r20, 0xFA	; 250
    444a:	54 e4       	ldi	r21, 0x44	; 68
    444c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	8f 83       	std	Y+7, r24	; 0x07
    4456:	98 87       	std	Y+8, r25	; 0x08
    4458:	a9 87       	std	Y+9, r26	; 0x09
    445a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    445c:	6f 81       	ldd	r22, Y+7	; 0x07
    445e:	78 85       	ldd	r23, Y+8	; 0x08
    4460:	89 85       	ldd	r24, Y+9	; 0x09
    4462:	9a 85       	ldd	r25, Y+10	; 0x0a
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	40 e8       	ldi	r20, 0x80	; 128
    446a:	5f e3       	ldi	r21, 0x3F	; 63
    446c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4470:	88 23       	and	r24, r24
    4472:	2c f4       	brge	.+10     	; 0x447e <App_Select_Mode+0x724>
		__ticks = 1;
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	9e 83       	std	Y+6, r25	; 0x06
    447a:	8d 83       	std	Y+5, r24	; 0x05
    447c:	3f c0       	rjmp	.+126    	; 0x44fc <App_Select_Mode+0x7a2>
	else if (__tmp > 65535)
    447e:	6f 81       	ldd	r22, Y+7	; 0x07
    4480:	78 85       	ldd	r23, Y+8	; 0x08
    4482:	89 85       	ldd	r24, Y+9	; 0x09
    4484:	9a 85       	ldd	r25, Y+10	; 0x0a
    4486:	20 e0       	ldi	r18, 0x00	; 0
    4488:	3f ef       	ldi	r19, 0xFF	; 255
    448a:	4f e7       	ldi	r20, 0x7F	; 127
    448c:	57 e4       	ldi	r21, 0x47	; 71
    448e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4492:	18 16       	cp	r1, r24
    4494:	4c f5       	brge	.+82     	; 0x44e8 <App_Select_Mode+0x78e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4496:	6b 85       	ldd	r22, Y+11	; 0x0b
    4498:	7c 85       	ldd	r23, Y+12	; 0x0c
    449a:	8d 85       	ldd	r24, Y+13	; 0x0d
    449c:	9e 85       	ldd	r25, Y+14	; 0x0e
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	40 e2       	ldi	r20, 0x20	; 32
    44a4:	51 e4       	ldi	r21, 0x41	; 65
    44a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	bc 01       	movw	r22, r24
    44b0:	cd 01       	movw	r24, r26
    44b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	9e 83       	std	Y+6, r25	; 0x06
    44bc:	8d 83       	std	Y+5, r24	; 0x05
    44be:	0f c0       	rjmp	.+30     	; 0x44de <App_Select_Mode+0x784>
    44c0:	88 ec       	ldi	r24, 0xC8	; 200
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	9c 83       	std	Y+4, r25	; 0x04
    44c6:	8b 83       	std	Y+3, r24	; 0x03
    44c8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ca:	9c 81       	ldd	r25, Y+4	; 0x04
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	f1 f7       	brne	.-4      	; 0x44cc <App_Select_Mode+0x772>
    44d0:	9c 83       	std	Y+4, r25	; 0x04
    44d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d4:	8d 81       	ldd	r24, Y+5	; 0x05
    44d6:	9e 81       	ldd	r25, Y+6	; 0x06
    44d8:	01 97       	sbiw	r24, 0x01	; 1
    44da:	9e 83       	std	Y+6, r25	; 0x06
    44dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44de:	8d 81       	ldd	r24, Y+5	; 0x05
    44e0:	9e 81       	ldd	r25, Y+6	; 0x06
    44e2:	00 97       	sbiw	r24, 0x00	; 0
    44e4:	69 f7       	brne	.-38     	; 0x44c0 <App_Select_Mode+0x766>
    44e6:	14 c0       	rjmp	.+40     	; 0x4510 <App_Select_Mode+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44e8:	6f 81       	ldd	r22, Y+7	; 0x07
    44ea:	78 85       	ldd	r23, Y+8	; 0x08
    44ec:	89 85       	ldd	r24, Y+9	; 0x09
    44ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f4:	dc 01       	movw	r26, r24
    44f6:	cb 01       	movw	r24, r22
    44f8:	9e 83       	std	Y+6, r25	; 0x06
    44fa:	8d 83       	std	Y+5, r24	; 0x05
    44fc:	8d 81       	ldd	r24, Y+5	; 0x05
    44fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4500:	9a 83       	std	Y+2, r25	; 0x02
    4502:	89 83       	std	Y+1, r24	; 0x01
    4504:	89 81       	ldd	r24, Y+1	; 0x01
    4506:	9a 81       	ldd	r25, Y+2	; 0x02
    4508:	01 97       	sbiw	r24, 0x01	; 1
    450a:	f1 f7       	brne	.-4      	; 0x4508 <App_Select_Mode+0x7ae>
    450c:	9a 83       	std	Y+2, r25	; 0x02
    450e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			CLCD_voidSendCommand(1);
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	0e 94 77 08 	call	0x10ee	; 0x10ee <CLCD_voidSendCommand>
			CLCD_vidSendString("Enter Mode:") ;
    4516:	8a ef       	ldi	r24, 0xFA	; 250
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	0e 94 41 0a 	call	0x1482	; 0x1482 <CLCD_vidSendString>
			CLCD_GoToXY(0,12);
    451e:	80 e0       	ldi	r24, 0x00	; 0
    4520:	6c e0       	ldi	r22, 0x0C	; 12
    4522:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CLCD_GoToXY>
    4526:	31 cc       	rjmp	.-1950   	; 0x3d8a <App_Select_Mode+0x30>

00004528 <Reset_System_INT2_Fun>:
		}
	}
}

void Reset_System_INT2_Fun(void)
{
    4528:	df 93       	push	r29
    452a:	cf 93       	push	r28
    452c:	cd b7       	in	r28, 0x3d	; 61
    452e:	de b7       	in	r29, 0x3e	; 62
	Reset_TempApp_Flag = 1 ;
    4530:	81 e0       	ldi	r24, 0x01	; 1
    4532:	80 93 72 01 	sts	0x0172, r24
}
    4536:	cf 91       	pop	r28
    4538:	df 91       	pop	r29
    453a:	08 95       	ret

0000453c <EEPROM_voidSendDataByte>:

void EEPROM_voidSendDataByte (u8 Copy_u8Data ,u16 Copy_u16Address)
{
    453c:	df 93       	push	r29
    453e:	cf 93       	push	r28
    4540:	00 d0       	rcall	.+0      	; 0x4542 <EEPROM_voidSendDataByte+0x6>
    4542:	0f 92       	push	r0
    4544:	cd b7       	in	r28, 0x3d	; 61
    4546:	de b7       	in	r29, 0x3e	; 62
    4548:	89 83       	std	Y+1, r24	; 0x01
    454a:	7b 83       	std	Y+3, r23	; 0x03
    454c:	6a 83       	std	Y+2, r22	; 0x02
	TWI_SendStatrtCondition();
    454e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <TWI_SendStatrtCondition>

	TWI_SendSlaveAddressWithWrite(0b1010000 | A2 << 2 | Copy_u16Address >> 8);
    4552:	8a 81       	ldd	r24, Y+2	; 0x02
    4554:	9b 81       	ldd	r25, Y+3	; 0x03
    4556:	89 2f       	mov	r24, r25
    4558:	99 27       	eor	r25, r25
    455a:	84 65       	ori	r24, 0x54	; 84
    455c:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_SendSlaveAddressWithWrite>
	TWI_MasterWriteDataByte((u8)Copy_u16Address);
    4560:	8a 81       	ldd	r24, Y+2	; 0x02
    4562:	0e 94 94 12 	call	0x2528	; 0x2528 <TWI_MasterWriteDataByte>
	TWI_MasterWriteDataByte(Copy_u8Data);
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	0e 94 94 12 	call	0x2528	; 0x2528 <TWI_MasterWriteDataByte>

	TWI_SendStopCondition();
    456c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <TWI_SendStopCondition>
}
    4570:	0f 90       	pop	r0
    4572:	0f 90       	pop	r0
    4574:	0f 90       	pop	r0
    4576:	cf 91       	pop	r28
    4578:	df 91       	pop	r29
    457a:	08 95       	ret

0000457c <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte (u8 *Copy_u8Data ,u16 Copy_u16Address)
{
    457c:	df 93       	push	r29
    457e:	cf 93       	push	r28
    4580:	00 d0       	rcall	.+0      	; 0x4582 <EEPROM_voidReadDataByte+0x6>
    4582:	00 d0       	rcall	.+0      	; 0x4584 <EEPROM_voidReadDataByte+0x8>
    4584:	cd b7       	in	r28, 0x3d	; 61
    4586:	de b7       	in	r29, 0x3e	; 62
    4588:	9a 83       	std	Y+2, r25	; 0x02
    458a:	89 83       	std	Y+1, r24	; 0x01
    458c:	7c 83       	std	Y+4, r23	; 0x04
    458e:	6b 83       	std	Y+3, r22	; 0x03
	TWI_SendStatrtCondition();
    4590:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <TWI_SendStatrtCondition>

	TWI_SendSlaveAddressWithWrite(0b1010000 | A2 << 2 | Copy_u16Address >> 8);
    4594:	8b 81       	ldd	r24, Y+3	; 0x03
    4596:	9c 81       	ldd	r25, Y+4	; 0x04
    4598:	89 2f       	mov	r24, r25
    459a:	99 27       	eor	r25, r25
    459c:	84 65       	ori	r24, 0x54	; 84
    459e:	0e 94 3c 12 	call	0x2478	; 0x2478 <TWI_SendSlaveAddressWithWrite>
	TWI_MasterWriteDataByte((u8)Copy_u16Address);
    45a2:	8b 81       	ldd	r24, Y+3	; 0x03
    45a4:	0e 94 94 12 	call	0x2528	; 0x2528 <TWI_MasterWriteDataByte>

	TWI_SendRepeatedStart();
    45a8:	0e 94 12 12 	call	0x2424	; 0x2424 <TWI_SendRepeatedStart>

	TWI_SendSlaveAddressWithRead(0b1010000 | A2 << 2 | Copy_u16Address >> 8);
    45ac:	8b 81       	ldd	r24, Y+3	; 0x03
    45ae:	9c 81       	ldd	r25, Y+4	; 0x04
    45b0:	89 2f       	mov	r24, r25
    45b2:	99 27       	eor	r25, r25
    45b4:	84 65       	ori	r24, 0x54	; 84
    45b6:	0e 94 68 12 	call	0x24d0	; 0x24d0 <TWI_SendSlaveAddressWithRead>
	TWI_MasterReadDataByte(Copy_u8Data);
    45ba:	89 81       	ldd	r24, Y+1	; 0x01
    45bc:	9a 81       	ldd	r25, Y+2	; 0x02
    45be:	0e 94 bd 12 	call	0x257a	; 0x257a <TWI_MasterReadDataByte>

	TWI_SendStopCondition();
    45c2:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <TWI_SendStopCondition>
}
    45c6:	0f 90       	pop	r0
    45c8:	0f 90       	pop	r0
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	cf 91       	pop	r28
    45d0:	df 91       	pop	r29
    45d2:	08 95       	ret

000045d4 <main>:
#include "DIO_interface.h"

#include "avr/delay.h"

void main(void)
{
    45d4:	df 93       	push	r29
    45d6:	cf 93       	push	r28
    45d8:	cd b7       	in	r28, 0x3d	; 61
    45da:	de b7       	in	r29, 0x3e	; 62
    45dc:	2f 97       	sbiw	r28, 0x0f	; 15
    45de:	0f b6       	in	r0, 0x3f	; 63
    45e0:	f8 94       	cli
    45e2:	de bf       	out	0x3e, r29	; 62
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ReceivedData ;

	Temp_App_Init();
    45e8:	0e 94 08 13 	call	0x2610	; 0x2610 <Temp_App_Init>

	App_Start_Message();
    45ec:	0e 94 60 13 	call	0x26c0	; 0x26c0 <App_Start_Message>

	EEPROM_voidReadDataByte(&Local_u8ReceivedData , 5);
    45f0:	ce 01       	movw	r24, r28
    45f2:	0f 96       	adiw	r24, 0x0f	; 15
    45f4:	65 e0       	ldi	r22, 0x05	; 5
    45f6:	70 e0       	ldi	r23, 0x00	; 0
    45f8:	0e 94 be 22 	call	0x457c	; 0x457c <EEPROM_voidReadDataByte>
	if (Local_u8ReceivedData != 1) /*Read High and Low temp at First Time Opening project*/
    45fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    45fe:	81 30       	cpi	r24, 0x01	; 1
    4600:	09 f4       	brne	.+2      	; 0x4604 <main+0x30>
    4602:	7a c0       	rjmp	.+244    	; 0x46f8 <main+0x124>
	{
		EEPROM_voidSendDataByte(1 , 5);
    4604:	81 e0       	ldi	r24, 0x01	; 1
    4606:	65 e0       	ldi	r22, 0x05	; 5
    4608:	70 e0       	ldi	r23, 0x00	; 0
    460a:	0e 94 9e 22 	call	0x453c	; 0x453c <EEPROM_voidSendDataByte>
    460e:	80 e0       	ldi	r24, 0x00	; 0
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	a0 e2       	ldi	r26, 0x20	; 32
    4614:	b1 e4       	ldi	r27, 0x41	; 65
    4616:	8b 87       	std	Y+11, r24	; 0x0b
    4618:	9c 87       	std	Y+12, r25	; 0x0c
    461a:	ad 87       	std	Y+13, r26	; 0x0d
    461c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    461e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4620:	7c 85       	ldd	r23, Y+12	; 0x0c
    4622:	8d 85       	ldd	r24, Y+13	; 0x0d
    4624:	9e 85       	ldd	r25, Y+14	; 0x0e
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	4a ef       	ldi	r20, 0xFA	; 250
    462c:	54 e4       	ldi	r21, 0x44	; 68
    462e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	8f 83       	std	Y+7, r24	; 0x07
    4638:	98 87       	std	Y+8, r25	; 0x08
    463a:	a9 87       	std	Y+9, r26	; 0x09
    463c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    463e:	6f 81       	ldd	r22, Y+7	; 0x07
    4640:	78 85       	ldd	r23, Y+8	; 0x08
    4642:	89 85       	ldd	r24, Y+9	; 0x09
    4644:	9a 85       	ldd	r25, Y+10	; 0x0a
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	40 e8       	ldi	r20, 0x80	; 128
    464c:	5f e3       	ldi	r21, 0x3F	; 63
    464e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4652:	88 23       	and	r24, r24
    4654:	2c f4       	brge	.+10     	; 0x4660 <main+0x8c>
		__ticks = 1;
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	9e 83       	std	Y+6, r25	; 0x06
    465c:	8d 83       	std	Y+5, r24	; 0x05
    465e:	3f c0       	rjmp	.+126    	; 0x46de <main+0x10a>
	else if (__tmp > 65535)
    4660:	6f 81       	ldd	r22, Y+7	; 0x07
    4662:	78 85       	ldd	r23, Y+8	; 0x08
    4664:	89 85       	ldd	r24, Y+9	; 0x09
    4666:	9a 85       	ldd	r25, Y+10	; 0x0a
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	3f ef       	ldi	r19, 0xFF	; 255
    466c:	4f e7       	ldi	r20, 0x7F	; 127
    466e:	57 e4       	ldi	r21, 0x47	; 71
    4670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4674:	18 16       	cp	r1, r24
    4676:	4c f5       	brge	.+82     	; 0x46ca <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4678:	6b 85       	ldd	r22, Y+11	; 0x0b
    467a:	7c 85       	ldd	r23, Y+12	; 0x0c
    467c:	8d 85       	ldd	r24, Y+13	; 0x0d
    467e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	40 e2       	ldi	r20, 0x20	; 32
    4686:	51 e4       	ldi	r21, 0x41	; 65
    4688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	bc 01       	movw	r22, r24
    4692:	cd 01       	movw	r24, r26
    4694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	9e 83       	std	Y+6, r25	; 0x06
    469e:	8d 83       	std	Y+5, r24	; 0x05
    46a0:	0f c0       	rjmp	.+30     	; 0x46c0 <main+0xec>
    46a2:	88 ec       	ldi	r24, 0xC8	; 200
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	9c 83       	std	Y+4, r25	; 0x04
    46a8:	8b 83       	std	Y+3, r24	; 0x03
    46aa:	8b 81       	ldd	r24, Y+3	; 0x03
    46ac:	9c 81       	ldd	r25, Y+4	; 0x04
    46ae:	01 97       	sbiw	r24, 0x01	; 1
    46b0:	f1 f7       	brne	.-4      	; 0x46ae <main+0xda>
    46b2:	9c 83       	std	Y+4, r25	; 0x04
    46b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b6:	8d 81       	ldd	r24, Y+5	; 0x05
    46b8:	9e 81       	ldd	r25, Y+6	; 0x06
    46ba:	01 97       	sbiw	r24, 0x01	; 1
    46bc:	9e 83       	std	Y+6, r25	; 0x06
    46be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c0:	8d 81       	ldd	r24, Y+5	; 0x05
    46c2:	9e 81       	ldd	r25, Y+6	; 0x06
    46c4:	00 97       	sbiw	r24, 0x00	; 0
    46c6:	69 f7       	brne	.-38     	; 0x46a2 <main+0xce>
    46c8:	14 c0       	rjmp	.+40     	; 0x46f2 <main+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ca:	6f 81       	ldd	r22, Y+7	; 0x07
    46cc:	78 85       	ldd	r23, Y+8	; 0x08
    46ce:	89 85       	ldd	r24, Y+9	; 0x09
    46d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	9e 83       	std	Y+6, r25	; 0x06
    46dc:	8d 83       	std	Y+5, r24	; 0x05
    46de:	8d 81       	ldd	r24, Y+5	; 0x05
    46e0:	9e 81       	ldd	r25, Y+6	; 0x06
    46e2:	9a 83       	std	Y+2, r25	; 0x02
    46e4:	89 83       	std	Y+1, r24	; 0x01
    46e6:	89 81       	ldd	r24, Y+1	; 0x01
    46e8:	9a 81       	ldd	r25, Y+2	; 0x02
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	f1 f7       	brne	.-4      	; 0x46ea <main+0x116>
    46ee:	9a 83       	std	Y+2, r25	; 0x02
    46f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Read_Temperature();
    46f2:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <Read_Temperature>
    46f6:	04 c0       	rjmp	.+8      	; 0x4700 <main+0x12c>
	}
	else
	{
		App_Main_Menu();
    46f8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <App_Main_Menu>
		App_Select_Mode();
    46fc:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <App_Select_Mode>
    4700:	ff cf       	rjmp	.-2      	; 0x4700 <main+0x12c>

00004702 <__mulsi3>:
    4702:	62 9f       	mul	r22, r18
    4704:	d0 01       	movw	r26, r0
    4706:	73 9f       	mul	r23, r19
    4708:	f0 01       	movw	r30, r0
    470a:	82 9f       	mul	r24, r18
    470c:	e0 0d       	add	r30, r0
    470e:	f1 1d       	adc	r31, r1
    4710:	64 9f       	mul	r22, r20
    4712:	e0 0d       	add	r30, r0
    4714:	f1 1d       	adc	r31, r1
    4716:	92 9f       	mul	r25, r18
    4718:	f0 0d       	add	r31, r0
    471a:	83 9f       	mul	r24, r19
    471c:	f0 0d       	add	r31, r0
    471e:	74 9f       	mul	r23, r20
    4720:	f0 0d       	add	r31, r0
    4722:	65 9f       	mul	r22, r21
    4724:	f0 0d       	add	r31, r0
    4726:	99 27       	eor	r25, r25
    4728:	72 9f       	mul	r23, r18
    472a:	b0 0d       	add	r27, r0
    472c:	e1 1d       	adc	r30, r1
    472e:	f9 1f       	adc	r31, r25
    4730:	63 9f       	mul	r22, r19
    4732:	b0 0d       	add	r27, r0
    4734:	e1 1d       	adc	r30, r1
    4736:	f9 1f       	adc	r31, r25
    4738:	bd 01       	movw	r22, r26
    473a:	cf 01       	movw	r24, r30
    473c:	11 24       	eor	r1, r1
    473e:	08 95       	ret

00004740 <__udivmodhi4>:
    4740:	aa 1b       	sub	r26, r26
    4742:	bb 1b       	sub	r27, r27
    4744:	51 e1       	ldi	r21, 0x11	; 17
    4746:	07 c0       	rjmp	.+14     	; 0x4756 <__udivmodhi4_ep>

00004748 <__udivmodhi4_loop>:
    4748:	aa 1f       	adc	r26, r26
    474a:	bb 1f       	adc	r27, r27
    474c:	a6 17       	cp	r26, r22
    474e:	b7 07       	cpc	r27, r23
    4750:	10 f0       	brcs	.+4      	; 0x4756 <__udivmodhi4_ep>
    4752:	a6 1b       	sub	r26, r22
    4754:	b7 0b       	sbc	r27, r23

00004756 <__udivmodhi4_ep>:
    4756:	88 1f       	adc	r24, r24
    4758:	99 1f       	adc	r25, r25
    475a:	5a 95       	dec	r21
    475c:	a9 f7       	brne	.-22     	; 0x4748 <__udivmodhi4_loop>
    475e:	80 95       	com	r24
    4760:	90 95       	com	r25
    4762:	bc 01       	movw	r22, r24
    4764:	cd 01       	movw	r24, r26
    4766:	08 95       	ret

00004768 <__prologue_saves__>:
    4768:	2f 92       	push	r2
    476a:	3f 92       	push	r3
    476c:	4f 92       	push	r4
    476e:	5f 92       	push	r5
    4770:	6f 92       	push	r6
    4772:	7f 92       	push	r7
    4774:	8f 92       	push	r8
    4776:	9f 92       	push	r9
    4778:	af 92       	push	r10
    477a:	bf 92       	push	r11
    477c:	cf 92       	push	r12
    477e:	df 92       	push	r13
    4780:	ef 92       	push	r14
    4782:	ff 92       	push	r15
    4784:	0f 93       	push	r16
    4786:	1f 93       	push	r17
    4788:	cf 93       	push	r28
    478a:	df 93       	push	r29
    478c:	cd b7       	in	r28, 0x3d	; 61
    478e:	de b7       	in	r29, 0x3e	; 62
    4790:	ca 1b       	sub	r28, r26
    4792:	db 0b       	sbc	r29, r27
    4794:	0f b6       	in	r0, 0x3f	; 63
    4796:	f8 94       	cli
    4798:	de bf       	out	0x3e, r29	; 62
    479a:	0f be       	out	0x3f, r0	; 63
    479c:	cd bf       	out	0x3d, r28	; 61
    479e:	09 94       	ijmp

000047a0 <__epilogue_restores__>:
    47a0:	2a 88       	ldd	r2, Y+18	; 0x12
    47a2:	39 88       	ldd	r3, Y+17	; 0x11
    47a4:	48 88       	ldd	r4, Y+16	; 0x10
    47a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    47a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    47aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    47ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    47ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    47b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    47b2:	b9 84       	ldd	r11, Y+9	; 0x09
    47b4:	c8 84       	ldd	r12, Y+8	; 0x08
    47b6:	df 80       	ldd	r13, Y+7	; 0x07
    47b8:	ee 80       	ldd	r14, Y+6	; 0x06
    47ba:	fd 80       	ldd	r15, Y+5	; 0x05
    47bc:	0c 81       	ldd	r16, Y+4	; 0x04
    47be:	1b 81       	ldd	r17, Y+3	; 0x03
    47c0:	aa 81       	ldd	r26, Y+2	; 0x02
    47c2:	b9 81       	ldd	r27, Y+1	; 0x01
    47c4:	ce 0f       	add	r28, r30
    47c6:	d1 1d       	adc	r29, r1
    47c8:	0f b6       	in	r0, 0x3f	; 63
    47ca:	f8 94       	cli
    47cc:	de bf       	out	0x3e, r29	; 62
    47ce:	0f be       	out	0x3f, r0	; 63
    47d0:	cd bf       	out	0x3d, r28	; 61
    47d2:	ed 01       	movw	r28, r26
    47d4:	08 95       	ret

000047d6 <_exit>:
    47d6:	f8 94       	cli

000047d8 <__stop_program>:
    47d8:	ff cf       	rjmp	.-2      	; 0x47d8 <__stop_program>
